# import { ImporterParams } from "src/api/schema/importer.graphql"
# import { CandlebatcherSettings, AdviserSettings, TraderSettings, BacktesterSettings } from "src/api/schema/settings.graphql"
# import { ExWatcherParams } from "src/api/schema/exwatcher.graphql"
# import { BacktestParams } from "src/api/schema/backtest.graphql"
# import { UserRobotParams } from "src/api/schema/userRobot.graphql"
# import { APIPairKeysInput } from "src/api/schema/apikeys.graphql"

scalar Datetime
scalar JSON

type Query {
  ping: String
}

type Mutation {
  # Importer
  startImporter(params: ImporterParams!): ServiceRunnerResponse!
  stopImporter(taskId: ID!): ServiceRunnerResponse!
  # Exchange Data Watcher
  startExWatcher(params: ExWatcherParams!): ServiceRunnerResponse!
  stopExWatcher(taskId: String!): ServiceRunnerResponse!
  # UserRobot
  startUserRobot(
    userRobotId: ID!
    overrideParams: UserRobotParams
  ): ServiceRunnerResponse!
  stopUserRobot(userRobotId: ID!): ServiceRunnerResponse!
  updateUserRobot(userRobotId: ID!, params: TraderUpdateParams!): Response!
  # Backtest
  startBacktest(
    robotId: Int!
    backtesterId: ID
    overrideParams: BacktestParams
  ): ServiceRunnerResponse!
  stopBacktest(taskId: ID!): ServiceRunnerResponse!
}

type Error {
  name: String!
  message: String!
  info: JSON
  stack: JSON
}

type Response {
  success: Boolean!
  error: Error
}

type ServiceRunnerResponse {
  success: Boolean!
  error: Error
  taskId: String
  status: String
}

input TraderUpdateParams {
  traderSettings: TraderSettings!
}
