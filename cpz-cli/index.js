require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),o=r.n(a),n=r("uuid"),s=r("verror"),i=r.n(s),c=r("azure-keyvault"),p=r.n(c),E=r("adal-node");var l=function(e,t){try{const r=(r,a)=>new E.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new p.a.KeyVaultClient(new p.a.KeyVaultCredentials(r))}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var _=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const o=l(t,r),n={keySize:4096,keyOps:["encrypt","decrypt"]},s=await o.createKey(e,a,"RSA",n);return p.a.parseKeyIdentifier(s.key.kid)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var d=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:o,keyVersion:n=""}){try{const s=l(t,r),c=await s.encrypt(e,o,n,"RSA-OAEP",Buffer.from(a));return JSON.stringify(c.result)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var P=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:o}){try{const n=l(t,r),s=await n.setSecret(e,o,a);return p.a.parseSecretIdentifier(s.id)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},S=r("dotenv-safe"),u=r.n(S);u.a.config();const{KEY_VAULT_URL:A,KEY_VAULT_WRITE_CLIENT_ID:y,KEY_VAULT_WRITE_APP_SECRET:T}=process.env;async function I(e,t,r){await _({uri:A,clientId:y,appSecret:T,keyName:e});const a=await d({uri:A,clientId:y,appSecret:T,value:r,keyName:e});return(await P({uri:A,clientId:y,appSecret:T,secretValue:a,secretName:t})).version}var m=r("@azure/ms-rest-nodeauth"),C=r("@azure/arm-eventgrid");const N="eventslogger",v={type:"object",description:"Error object if something goes wrong.",optional:!0,props:{name:{description:"Error name.",type:"string",empty:!1},message:{description:"Error message.",type:"string",empty:!1},info:{description:"Error details.",type:"object",optional:!0}}},k={debug:{description:"Debug mode.",type:"boolean",optional:!0},proxy:{description:"Proxy endpoint.",type:"string",optional:!0,empty:!1},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},K={debug:{description:"Debug mode.",type:"boolean",optional:!0},strategyParameters:{description:"Strategy parameters.",type:"object",optional:!0},requiredHistoryCache:{description:"Load history data from cache.",type:"boolean",optional:!0,default:!0},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},O={encryptionKeyName:{description:"Name of encryption key",type:"string"},name:{description:"Secret name",type:"string"},version:{description:"Secret version",type:"string"}},b={mode:{description:"Service run mode.",type:"tradeMode",values:["emulator","realtime"],requiredProps:{realtime:["keys.main.APIKey","keys.main.APISecret"]},optional:!0},debug:{description:"Debug mode.",type:"boolean",optional:!0},slippageStep:{description:"Price Slippage Step.",type:"number",optional:!0},deviation:{description:"Price deviation",type:"number",optional:!0},volume:{description:"User trade volume",type:"number",optional:!0},multiPosition:{description:"Multiple active positions available",type:"boolean",optional:!0},exchangeParams:{description:"User specific exchange parameters",type:"object",optional:!0},keys:{description:"Exchange API Keys Info",type:"object",props:{main:{description:"Main Exchange API Keys Info",type:"object",props:{APIKey:{description:"Main Exchange API Key",type:"object",props:O},APISecret:{description:"Main Exchange API Secret",type:"object",props:O}}},spare:{description:"Spare Exchange API Keys Info",type:"object",props:{APIKey:{description:"Spare Exchange API Key",type:"object",props:O},APISecret:{description:"Spare Exchange API Secret",type:"object",props:O}},optional:!0}},optional:!0}},g="CPZ.Tasks.Adviser.Start",f="CPZ.Tasks.Adviser.Stop",R="CPZ.Tasks.Adviser.Update",G="CPZ.Tasks.Adviser.Started",h="CPZ.Tasks.Adviser.Stopped",Z="CPZ.Tasks.Adviser.Updated",D="CPZ.Candles.NewCandle";const w="CPZ.Tasks.Backtester.Start",L="CPZ.Tasks.Backtester.Stop",U="CPZ.Tasks.Backtester.Started",Y="CPZ.Tasks.Backtester.Stopped",M="CPZ.Tasks.Backtester.Finished";const j="CPZ.Tasks.Candlebatcher.Start",x="CPZ.Tasks.Candlebatcher.Stop",B="CPZ.Tasks.Candlebatcher.Update",$="CPZ.Tasks.Candlebatcher.Started",z="CPZ.Tasks.Candlebatcher.Stopped",V="CPZ.Tasks.Candlebatcher.Updated";const W="CPZ.Tasks.Importer.Start",F="CPZ.Tasks.Importer.Stop",q="CPZ.Tasks.Importer.Started",J="CPZ.Tasks.Importer.Stoppped",H="CPZ.Tasks.Importer.Finished",X="CPZ.Tasks.Marketwatcher.Start",Q="CPZ.Tasks.Marketwatcher.Stop",ee="CPZ.Tasks.Marketwatcher.Subscribe",te="CPZ.Tasks.Marketwatcher.Unsubscribe",re="CPZ.Tasks.Marketwatcher.Started",ae="CPZ.Tasks.Marketwatcher.Stopped",oe="CPZ.Tasks.Marketwatcher.Updated",ne="CPZ.Tasks.Trader.Start",se="CPZ.Tasks.Trader.Stop",ie="CPZ.Tasks.Trader.Update",ce="CPZ.Tasks.Trader.Started",pe="CPZ.Tasks.Trader.Stopped",Ee="CPZ.Tasks.Trader.Updated",le="CPZ.Tasks.Exwatcher.Started",_e="CPZ.Tasks.Exwatcher.Stopped";const de="CPZ.Signals.NewSignal",Pe="CPZ.Ticks.NewTick";const Se={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8104,types:[g,f,R]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",localPort:8104,types:[D]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8108,types:[w,L]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8103,types:[j,x,B]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8107,types:[re,ae,oe,$,z,V,q,J,H,G,h,Z,ce,pe,Ee,U,Y,M,le,_e]}]},...{[N]:[{name:`${N}-tasks`,topic:"tasks",url:"/api/events",types:[g,f,R,G,h,Z,w,L,U,Y,M,j,x,B,$,z,V,W,F,q,J,H,X,Q,ee,te,re,ae,oe,ne,se,ie,ce,pe,Ee,"CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished",le,_e,"CPZ.Tasks.UserRobot.Started","CPZ.Tasks.UserRobot.Stopped","CPZ.Tasks.UserRobot.Updated"]},{name:`${N}-candles`,topic:"candles",url:"/api/events",types:[D,"CPZ.Candles.Handled"]},{name:`${N}-signals`,topic:"signals",url:"/api/events",types:[de,"CPZ.Signals.Handled"]},{name:`${N}-ticks`,topic:"ticks",url:"/api/events",types:[Pe,"CPZ.Ticks.Handled"]},{name:`${N}-trades`,topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:`${N}-log`,topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:`${N}-error`,topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8105,types:[W,F]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8102,types:[X,Q,ee,te]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8106,types:[ne,se,ie]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",localPort:8106,types:[D]},{name:"trader-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8106,types:[Pe]},{name:"trader-signals",topic:"signals",url:"/api/signalEvents",localPort:8106,types:[de]}]}},ue=["tasks","candles","ticks","signals","trades","log","error"];u.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP","STORAGE"]);const{MANAGE_APP_ID:Ae,MANAGE_APP_KEY:ye,AD_DIRECTORY_ID:Te,SUBSRIPTION_ID:Ie,RESOURSE_GROUP:me,STORAGE:Ce}=process.env;async function Ne(e,{topic:t,topicName:r,serviceName:a,subName:o,endpointUrl:n,eventTypes:s}){const i=`/subscriptions/${Ie}/resourceGroups/${me}/providers/Microsoft.EventGrid/topics/${r}`,c={deadLetterDestination:{endpointType:"StorageBlob",blobContainerName:`eg-${t}-dead`,resourceId:`/subscriptions/${Ie}/resourceGroups/${me}/providers/microsoft.Storage/storageAccounts/${Ce}`},destination:{endpointType:"WebHook",endpointUrl:n},filter:{includedEventTypes:a===N?null:s},retryPolicy:{eventTimeToLiveInMinutes:60,maxDeliveryAttempts:10},eventDeliverySchema:"EventGridSchema"};return await e.eventSubscriptions.createOrUpdate(i,o,c)}const ve=(e,t,r,a)=>`https://cpz-${e}-${t}.azurewebsites.net${r}?api-key=${a}`,ke=(e,t)=>`cpz-${e}-${t}`;async function Ke(e,t){try{for(const r of t){console.log(`Creating ${r.topicName} - ${r.name} sub to ${r.url}`);try{await Ne(e,{topic:r.topic,topicName:r.topicName,serviceName:r.serviceName,subName:r.name,endpointUrl:r.url,eventTypes:r.types}),console.log(r.name,"ok")}catch(e){console.log(e)}}}catch(e){console.error(e)}}var Oe={adviser:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_TRADE_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","DEBUG"]},backtester:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"]},candlebatcher:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},connector:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"]},control:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"]},eventslogger:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"]},importer:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"]},marketwatcher:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","PROXY_ENDPOINT","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","DEBUG"]},trader:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]}},be=r("fs"),ge=r.n(be);u.a.config();const{KEY_VAULT_URL:fe,KEY_VAULT_WRITE_CLIENT_ID:Re,KEY_VAULT_WRITE_APP_SECRET:Ge}=process.env;function he(){try{const e=JSON.parse(ge.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),e}catch(e){return console.log("No current env list file"),{}}}const Ze=new o.a;Ze.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:o,APIKeyEncrKeyName:s,APISecretEncrKeyName:i,APIKeySecretName:c,APISecretSecretName:p}=e.options,E={APIKey:{},APISecret:{}};a&&(E.APIKey.encryptionKeyName=a.toString(),E.APISecret.encryptionKeyName=a.toString(),E.APIKey.name=a.toString(),E.APISecret.name=a.toString()),E.APIKey.encryptionKeyName=s||E.APIKey.encryptionKeyName||Object(n.v4)(),E.APISecret.encryptionKeyName=i||E.APISecret.encryptionKeyName||Object(n.v4)(),E.APIKey.name=c||E.APIKey.name||Object(n.v4)(),E.APISecret.name=p||E.APISecret.name||Object(n.v4)(),E.APIKey.version=await I(E.APIKey.encryptionKeyName,E.APIKey.name,t),E.APISecret.version=await I(E.APISecret.encryptionKeyName,E.APISecret.name,r);const l={};o?l.spare=E:l.main=E,this.log(JSON.stringify(l))}),Ze.command("eg create subs <Env> <APIKey>").action(async function(e){this.log("createSubs",e),this.log("Creating Event Grid subscriptions for environment",e.Env);const t=await async function(){const e=await m.loginWithServicePrincipalSecret(Ae,ye,Te);return new C.EventGridManagementClient(e,Ie)}();this.log("Connected to Azure!");const r=function(e,t){let r=[];Object.keys(Se).forEach(a=>{r=[...new Set([...Se[a].map(r=>({...r,topicName:ke(r.topic,e),url:ve(a,e,r.url,t),serviceName:a})),...r])]});const a={};return ue.forEach(e=>{a[e]=r.filter(t=>t.topic===e)}),a}(e.Env,e.APIKey);for(const e of Object.keys(r)){const a=r[e];this.log(`Creating "${e}" subscriptions`,a.map(e=>e.name).join(", ")),await Ke(t,a)}}),Ze.command("env create list").action(async function(e){this.log("createEnvList",e),function(){let e=he();e||(e={}),Object.keys(Oe).forEach(t=>{e[t]||(e[t]={}),Oe[t].variables.forEach(r=>{e[t][r]||(e[t][r]="")}),Object.keys(e[t]).filter(e=>!Oe[t].variables.includes(e)).forEach(r=>{delete e[t][r]})}),ge.a.writeFileSync("envlist.json",JSON.stringify(e))}()}),Ze.command("env update <Env>").action(async function(e){this.log("updateEnvVars",e),await async function(e){const t=he();if(!t)return void console.log("Create envlist.json first","env create list");const r={...t};await Promise.all(Object.keys(t).map(async a=>{await Promise.all(Object.keys(t[a]).map(async o=>{const n=`${a}-${o}-${e}`.replace(/_/g,"-");console.log(n),console.log(t[a][o]),await P({uri:fe,clientId:Re,appSecret:Ge,secretValue:t[a][o],secretName:n}),r[a][o]=n}))})),ge.a.writeFileSync("envsetresult.json",JSON.stringify(r))}(e.Env)}),Ze.delimiter("cpz$").show()},"@azure/arm-eventgrid":function(e,t){e.exports=require("@azure/arm-eventgrid")},"@azure/ms-rest-nodeauth":function(e,t){e.exports=require("@azure/ms-rest-nodeauth")},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},fs:function(e,t){e.exports=require("fs")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQva2V5VmF1bHQvY2xpZW50LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L2NyZWF0ZUtleS5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9rZXlWYXVsdC9lbmNyeXB0LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L3NldFNlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMva2V5VmF1bHQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL3NlcnZpY2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL3NldHRpbmdzLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvYWR2aXNlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL2NhbmRsZXMvY2FuZGxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL3N0YXRlL3RpbWVmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy9tYXJrZXR3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvdHJhZGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvZXh3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvYmFja3Rlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy9zaWduYWxzL3NpZ25hbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90aWNrcy90aWNrcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9hZHZpc2VyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL3RvcGljcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9iYWNrdGVzdGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL2NhbmRsZWJhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy9lbmRwb2ludHMvY29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9ldmVudHNsb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy91c2VyUm9ib3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90cmFkZXMvdHJhZGVzLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvbG9nL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL2Vycm9yL2Vycm9yLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL2ltcG9ydGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL21hcmtldHdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy9lbmRwb2ludHMvdHJhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvdXRpbHMvZW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2FkdmlzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9iYWNrdGVzdGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2NvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2V2ZW50c2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZW52aXJvbm1lbnQvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L21hcmtldHdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L3RyYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZW52dmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tleVZhdWx0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudnZhcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYXp1cmUvbXMtcmVzdC1ub2RlYXV0aFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImFkYWwtbm9kZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImF6dXJlLWtleXZhdWx0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZG90ZW52LXNhZmVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInV1aWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2ZXJyb3JcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2b3JwYWxcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNsaWVudCIsImNsaWVudElkIiwic2VjcmV0IiwiYWRhbENhbGxiYWNrIiwiY2hhbGxlbmdlIiwiY2FsbGJhY2siLCJleHRlcm5hbF9hZGFsX25vZGVfIiwiYXV0aG9yaXphdGlvbiIsImFjcXVpcmVUb2tlbldpdGhDbGllbnRDcmVkZW50aWFscyIsInJlc291cmNlIiwiZXJyIiwidG9rZW5SZXNwb25zZSIsInRva2VuVHlwZSIsImFjY2Vzc1Rva2VuIiwiZXh0ZXJuYWxfYXp1cmVfa2V5dmF1bHRfZGVmYXVsdCIsImEiLCJLZXlWYXVsdENsaWVudCIsIktleVZhdWx0Q3JlZGVudGlhbHMiLCJlcnJvciIsImV4dGVybmFsX3ZlcnJvcl9kZWZhdWx0IiwiY2F1c2UiLCJrZXlWYXVsdF9jcmVhdGVLZXkiLCJhc3luYyIsInVyaSIsImFwcFNlY3JldCIsImtleU5hbWUiLCJrZXlWYXVsdENsaWVudCIsImtleU9wdGlvbnMiLCJrZXlTaXplIiwia2V5T3BzIiwicmVzdWx0IiwiY3JlYXRlS2V5IiwicGFyc2VLZXlJZGVudGlmaWVyIiwia2lkIiwia2V5VmF1bHRfZW5jcnlwdCIsImtleVZlcnNpb24iLCJlbmNyeXB0IiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXlWYXVsdF9zZXRTZWNyZXQiLCJzZWNyZXRWYWx1ZSIsInNlY3JldE5hbWUiLCJzZXRTZWNyZXQiLCJwYXJzZVNlY3JldElkZW50aWZpZXIiLCJpZCIsImV4dGVybmFsX2RvdGVudl9zYWZlX2RlZmF1bHQiLCJjb25maWciLCJLRVlfVkFVTFRfVVJMIiwiS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCIsIktFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVUIiwicHJvY2VzcyIsImVudiIsImVuY3J5cHRBbmRTYXZlIiwiZW5jcnlwdGVkRGF0YSIsInZlcnNpb24iLCJFVkVOVFNfTE9HR0VSX1NFUlZJQ0UiLCJCQVNFX0VSUk9SIiwidHlwZSIsImRlc2NyaXB0aW9uIiwib3B0aW9uYWwiLCJwcm9wcyIsImVtcHR5IiwibWVzc2FnZSIsImluZm8iLCJDQU5ETEVCQVRDSEVSX1NFVFRJTkdTIiwiZGVidWciLCJwcm94eSIsInJlcXVpcmVkSGlzdG9yeU1heEJhcnMiLCJpbnRlZ2VyIiwiQURWSVNFUl9TRVRUSU5HUyIsInN0cmF0ZWd5UGFyYW1ldGVycyIsInJlcXVpcmVkSGlzdG9yeUNhY2hlIiwiZGVmYXVsdCIsIktFWV9WQVVMVF9TRUNSRVQiLCJlbmNyeXB0aW9uS2V5TmFtZSIsIlRSQURFUl9TRVRUSU5HUyIsInZhbHVlcyIsInJlcXVpcmVkUHJvcHMiLCJyZWFsdGltZSIsInNsaXBwYWdlU3RlcCIsImRldmlhdGlvbiIsInZvbHVtZSIsIm11bHRpUG9zaXRpb24iLCJleGNoYW5nZVBhcmFtcyIsImtleXMiLCJtYWluIiwiQVBJS2V5IiwiQVBJU2VjcmV0Iiwic3BhcmUiLCJUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5UIiwiVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5UIiwiVEFTS1NfQURWSVNFUl9VUERBVEVfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1VQREFURURfRVZFTlQiLCJDQU5ETEVTX05FV0NBTkRMRV9FVkVOVCIsIlRBU0tTX0JBQ0tURVNURVJfU1RBUlRfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUQVJURURfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCIsIlRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUF9FVkVOVCIsIlRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UIiwiVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQiLCJUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5UIiwiVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVCIsIlRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVCIsIlRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RPUF9FVkVOVCIsIlRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5UIiwiVEFTS1NfVFJBREVSX1VQREFURURfRVZFTlQiLCJUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UIiwiU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQiLCJUSUNLU19ORVdUSUNLX0VWRU5UIiwiZW5kcG9pbnRzX2VuZHBvaW50cyIsImFkdmlzZXIiLCJ0b3BpYyIsInVybCIsImxvY2FsUG9ydCIsInR5cGVzIiwiYmFja3Rlc3RlciIsImNhbmRsZWJhdGNoZXIiLCJjb250cm9sIiwiW29iamVjdCBPYmplY3RdIiwiaW1wb3J0ZXIiLCJtYXJrZXR3YXRjaGVyIiwidHJhZGVyIiwidG9waWNzIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIm1pc3NpbmdWYXJzIiwiZmlsdGVyIiwidmFyaWFibGUiLCJFcnJvciIsImpvaW4iLCJjaGVja0VudlZhcnMiLCJNQU5BR0VfQVBQX0lEIiwiTUFOQUdFX0FQUF9LRVkiLCJBRF9ESVJFQ1RPUllfSUQiLCJTVUJTUklQVElPTl9JRCIsIlJFU09VUlNFX0dST1VQIiwiU1RPUkFHRSIsImNyZWF0ZU9yVXBkYXRlU3ViIiwiRUdNQ2xpZW50IiwidG9waWNOYW1lIiwic2VydmljZU5hbWUiLCJzdWJOYW1lIiwiZW5kcG9pbnRVcmwiLCJldmVudFR5cGVzIiwic2NvcGUiLCJwcm9wZXJ0aWVzIiwiZGVhZExldHRlckRlc3RpbmF0aW9uIiwiZW5kcG9pbnRUeXBlIiwiYmxvYkNvbnRhaW5lck5hbWUiLCJyZXNvdXJjZUlkIiwiZGVzdGluYXRpb24iLCJpbmNsdWRlZEV2ZW50VHlwZXMiLCJyZXRyeVBvbGljeSIsImV2ZW50VGltZVRvTGl2ZUluTWludXRlcyIsIm1heERlbGl2ZXJ5QXR0ZW1wdHMiLCJldmVudERlbGl2ZXJ5U2NoZW1hIiwiZXZlbnRTdWJzY3JpcHRpb25zIiwiY3JlYXRlT3JVcGRhdGUiLCJjcmVhdGVFbmRwb2ludFVybCIsImVudmlyb25tZW50IiwicG9zdGZpeCIsImFwaWtleSIsImNyZWF0ZVRvcGljTmFtZSIsImNyZWF0ZVN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uIiwiY29uc29sZSIsImxvZyIsImNvbmZpZ19lbnZpcm9ubWVudCIsInZhcmlhYmxlcyIsImNvbm5lY3RvciIsImV2ZW50c2xvZ2dlciIsInV0aWxzX0tFWV9WQVVMVF9VUkwiLCJ1dGlsc19LRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lEIiwidXRpbHNfS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQiLCJsb2FkRW52RmlsZSIsImVudkZpbGUiLCJwYXJzZSIsImV4dGVybmFsX2ZzX2RlZmF1bHQiLCJyZWFkRmlsZVN5bmMiLCJ2b3JwYWwiLCJleHRlcm5hbF92b3JwYWxfZGVmYXVsdCIsImNvbW1hbmQiLCJvcHRpb24iLCJhY3Rpb24iLCJhcmdzIiwidGhpcyIsInVzZXIiLCJBUElLZXlFbmNyS2V5TmFtZSIsIkFQSVNlY3JldEVuY3JLZXlOYW1lIiwiQVBJS2V5U2VjcmV0TmFtZSIsIkFQSVNlY3JldFNlY3JldE5hbWUiLCJvcHRpb25zIiwidG9TdHJpbmciLCJleHRlcm5hbF91dWlkXyIsIkVudiIsImNyZWRlbnRpYWxzIiwibXNfcmVzdF9ub2RlYXV0aF8iLCJhcm1fZXZlbnRncmlkXyIsInV0aWxzX2dldENsaWVudCIsImFsbEVuZHBvaW50cyIsImZvckVhY2giLCJTZXQiLCJtYXAiLCJlbmRwb2ludCIsImVuZHBvaW50cyIsImNyZWF0ZVN1YnNjcmlwdGlvbnNMaXN0IiwidG9waWNTdWJzY3JpcHRpb25zIiwic3ViIiwiaW5jbHVkZXMiLCJ3cml0ZUZpbGVTeW5jIiwiZ2VuZXJhdGVFbnZWYXJzTGlzdCIsImVudlNldFJlc3VsdCIsIlByb21pc2UiLCJhbGwiLCJyZXBsYWNlIiwic2V0U2VjcmV0RW52VmFycyIsImRlbGltaXRlciIsInNob3ciLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoibUVBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTBEQSxPQXJEQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxl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LE1BQUFpQixFQUFBRCxLQUNBLElBQUFDLEVBRUEsWUFEQVYsUUFBQUMsSUFBQSwrQ0FHQSxNQUFBNkMsRUFBQSxJQUF3QnBDLFNBQ3hCcUMsUUFBQUMsSUFDQXBRLE9BQUE0RyxLQUFBa0gsR0FBQTJCLElBQUE3TSxnQkFDQXVOLFFBQUFDLElBQ0FwUSxPQUFBNEcsS0FBQWtILEVBQUFqTixJQUFBNE8sSUFBQTdNLFVBQ0EsTUFBQXFCLEtBQWdDcEQsS0FBT2dLLEtBQVlnQyxJQUFZd0QsUUFDL0QsS0FDQSxLQUVBakQsUUFBQUMsSUFBQXBKLEdBQ0FtSixRQUFBQyxJQUFBUyxFQUFBak4sR0FBQWdLLFVBQ2dCOUcsRUFBUyxDQUN6QmxCLElBQWlCNkssR0FDakJuTSxTQUFzQm9NLEdBQ3RCN0ssVUFBdUI4SyxHQUN2QjVKLFlBQUE4SixFQUFBak4sR0FBQWdLLEdBQ0E1RyxlQUVBaU0sRUFBQXJQLEdBQUFnSyxHQUFBNUcsUUFNRStKLEdBQUEzTCxFQUFFMk4sY0FBQSxvQkFBQW5NLEtBQUFDLFVBQUFvTSxJSWhFSUksQ0FBZ0IvQixFQUFBVSxPSDBCeEJmLEdBQUFxQyxVQUFBLFFBQUFDLDZDSW5DQW5SLEVBQUFELFFBQUFxUixRQUFBLGlFQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsc0RDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSw2Q0NBQXBSLEVBQUFELFFBQUFxUixRQUFBLCtDQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsaUNDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSwwQkNBQXBSLEVBQUFELFFBQUFxUixRQUFBLDhCQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsZ0NDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiaW1wb3J0IFZFcnJvciBmcm9tIFwidmVycm9yXCI7XHJcbmltcG9ydCBLZXlWYXVsdCBmcm9tIFwiYXp1cmUta2V5dmF1bHRcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25Db250ZXh0IH0gZnJvbSBcImFkYWwtbm9kZVwiO1xyXG5cclxuLyoqXHJcbiAqINCa0LvQuNC10L3RgiDQuiDRgdC70YPQttCx0LUgQXp1cmUgS2V5VmF1bHRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNyZXQg0L/QsNGA0L7Qu9GMINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IEtleVZhdWx0Q2xpZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDbGllbnQoY2xpZW50SWQsIHNlY3JldCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDYWxsYmFjayBmb3IgQURBTCBhdXRoZW50aWNhdGlvbi5cclxuICAgIGNvbnN0IGFkYWxDYWxsYmFjayA9IChjaGFsbGVuZ2UsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXV0aGVudGljYXRpb25Db250ZXh0KGNoYWxsZW5nZS5hdXRob3JpemF0aW9uKTtcclxuICAgICAgcmV0dXJuIGNvbnRleHQuYWNxdWlyZVRva2VuV2l0aENsaWVudENyZWRlbnRpYWxzKFxyXG4gICAgICAgIGNoYWxsZW5nZS5yZXNvdXJjZSxcclxuICAgICAgICBjbGllbnRJZCxcclxuICAgICAgICBzZWNyZXQsXHJcbiAgICAgICAgKGVyciwgdG9rZW5SZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gVGhlIEtleVZhdWx0Q3JlZGVudGlhbHMgY2FsbGJhY2sgZXhwZWN0cyBhbiBlcnJvciwgaWYgYW55LCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLlxyXG4gICAgICAgICAgLy8gSXQgdGhlbiBleHBlY3RzIGEgdmFsdWUgZm9yIHRoZSBIVFRQICdBdXRob3JpemF0aW9uJyBoZWFkZXIsIHdoaWNoIHdlIGNvbXB1dGUgYmFzZWQgdXBvbiB0aGUgYWNjZXNzIHRva2VuIG9idGFpbmVkIHdpdGggdGhlIFNQIGNsaWVudCBjcmVkZW50aWFscy5cclxuICAgICAgICAgIC8vIFRoZSB0b2tlbiB0eXBlIHdpbGwgZ2VuZXJhbGx5IGVxdWFsICdCZWFyZXInIC0gaW4gc29tZSB1c2VyLXNwZWNpZmljIHNpdHVhdGlvbnMsIGEgZGlmZmVyZW50IHR5cGUgb2YgdG9rZW4gbWF5IGJlIGlzc3VlZC5cclxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgYCR7dG9rZW5SZXNwb25zZS50b2tlblR5cGV9ICR7dG9rZW5SZXNwb25zZS5hY2Nlc3NUb2tlbn1gXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBuZXcgS2V5VmF1bHQuS2V5VmF1bHRDbGllbnQoXHJcbiAgICAgIG5ldyBLZXlWYXVsdC5LZXlWYXVsdENyZWRlbnRpYWxzKGFkYWxDYWxsYmFjaylcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIGtleVZhdWx0Q2xpZW50O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgVkVycm9yKFxyXG4gICAgICB7IG5hbWU6IFwiS2V5VmF1bHRFcnJvclwiLCBjYXVzZTogZXJyb3IgfSxcclxuICAgICAgXCJGYWlsZWQgdG8gY3JlYXRlIEtleVZhdWx0IGNsaWVudFwiXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0Q2xpZW50O1xyXG4iLCJpbXBvcnQgVkVycm9yIGZyb20gXCJ2ZXJyb3JcIjtcclxuaW1wb3J0IEtleVZhdWx0IGZyb20gXCJhenVyZS1rZXl2YXVsdFwiO1xyXG5pbXBvcnQgZ2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudFwiO1xyXG5cclxuLyoqXHJcbiAqINCh0L7Qt9C00LDQvdC40LUg0L3QvtCy0L7Qs9C+INC60LvRjtGH0LBcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBBenVyZSBLZXkgVmF1bHQgVVJJXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBBenVyZSBLZXkgVmF1bHQgQ2xpZW50IElkIChTZXJ2aWNlIHByaW5jaXBhbClcclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFNlY3JldCBBenVyZSBLZXkgVmF1bHQgQXBwbGljYXRpb24gU2VjcmV0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlOYW1lINC40LzRj1xyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSDQstC10YDRgdC40Y9cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUtleSh7IHVyaSwgY2xpZW50SWQsIGFwcFNlY3JldCwga2V5TmFtZSB9KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGtleVZhdWx0Q2xpZW50ID0gZ2V0Q2xpZW50KGNsaWVudElkLCBhcHBTZWNyZXQpO1xyXG5cclxuICAgIGNvbnN0IGtleU9wZXJhdGlvbnMgPSBbXCJlbmNyeXB0XCIsIFwiZGVjcnlwdFwiXTtcclxuICAgIGNvbnN0IGtleU9wdGlvbnMgPSB7XHJcbiAgICAgIGtleVNpemU6IDQwOTYsXHJcbiAgICAgIGtleU9wczoga2V5T3BlcmF0aW9uc1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBrZXlWYXVsdENsaWVudC5jcmVhdGVLZXkoXHJcbiAgICAgIHVyaSxcclxuICAgICAga2V5TmFtZSxcclxuICAgICAgXCJSU0FcIixcclxuICAgICAga2V5T3B0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBrZXlJZCA9IEtleVZhdWx0LnBhcnNlS2V5SWRlbnRpZmllcihyZXN1bHQua2V5LmtpZCk7XHJcbiAgICByZXR1cm4ga2V5SWQ7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBWRXJyb3IoXHJcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxyXG4gICAgICBcIkZhaWxlZCB0byBjcmVhdGUgbmV3IGtleVwiXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlS2V5O1xyXG4iLCJpbXBvcnQgVkVycm9yIGZyb20gXCJ2ZXJyb3JcIjtcclxuaW1wb3J0IGdldENsaWVudCBmcm9tIFwiLi9jbGllbnRcIjtcclxuXHJcbi8qKlxyXG4gKiDQqNC40YTRgNC+0LLQsNC90LjQtSDRgdC+0L7QsdGJ0LXQvdC40Y9cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBBenVyZSBLZXkgVmF1bHQgVVJJXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBBenVyZSBLZXkgVmF1bHQgQ2xpZW50IElkIChTZXJ2aWNlIHByaW5jaXBhbClcclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFNlY3JldCBBenVyZSBLZXkgVmF1bHQgQXBwbGljYXRpb24gU2VjcmV0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSDRgdC+0L7QsdGJ0LXQvdC40LVcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleU5hbWUg0LjQvNGPINC60LvRjtGH0LBcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleVZlcnNpb24g0LLQtdGA0YHQuNGPINC60LvRjtGH0LBcclxuICogQHJldHVybnMge2pzb259INC30LDRiNC40YTRgNC+0LLQsNC90L3QvtC1INGB0L7QvtCx0YnQtdC90LjQtVxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZW5jcnlwdCh7XHJcbiAgdXJpLFxyXG4gIGNsaWVudElkLFxyXG4gIGFwcFNlY3JldCxcclxuICB2YWx1ZSxcclxuICBrZXlOYW1lLFxyXG4gIGtleVZlcnNpb24gPSBcIlwiXHJcbn0pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBnZXRDbGllbnQoY2xpZW50SWQsIGFwcFNlY3JldCk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQga2V5VmF1bHRDbGllbnQuZW5jcnlwdChcclxuICAgICAgdXJpLFxyXG4gICAgICBrZXlOYW1lLFxyXG4gICAgICBrZXlWZXJzaW9uLFxyXG4gICAgICBcIlJTQS1PQUVQXCIsXHJcbiAgICAgIEJ1ZmZlci5mcm9tKHZhbHVlKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0LnJlc3VsdCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBWRXJyb3IoXHJcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxyXG4gICAgICBcIkZhaWxlZCB0byBlbmNyeXB0IHZhbHVlXCJcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBlbmNyeXB0O1xyXG4iLCJpbXBvcnQgVkVycm9yIGZyb20gXCJ2ZXJyb3JcIjtcclxuaW1wb3J0IEtleVZhdWx0IGZyb20gXCJhenVyZS1rZXl2YXVsdFwiO1xyXG5pbXBvcnQgZ2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudFwiO1xyXG5cclxuLyoqXHJcbiAqINCh0L7RhdGA0LDQvdC10L3QuNC1INGB0LXQutGA0LXRgtCwINCyINGF0YDQsNC90LjQu9C40YnQtVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIEF6dXJlIEtleSBWYXVsdCBVUklcclxuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIEF6dXJlIEtleSBWYXVsdCBDbGllbnQgSWQgKFNlcnZpY2UgcHJpbmNpcGFsKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwU2VjcmV0IEF6dXJlIEtleSBWYXVsdCBBcHBsaWNhdGlvbiBTZWNyZXRcclxuICogQHBhcmFtIHtzdHJpbmd9IHNlY3JldFZhbHVlINC30L3QsNGH0LXQvdC40LVcclxuICogQHBhcmFtIHtzdHJpbmd9IHNlY3JldE5hbWUg0LjQvNGPXHJcbiAqIEByZXR1cm5zIHtqc29ufSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0U2VjcmV0KHtcclxuICB1cmksXHJcbiAgY2xpZW50SWQsXHJcbiAgYXBwU2VjcmV0LFxyXG4gIHNlY3JldFZhbHVlLFxyXG4gIHNlY3JldE5hbWVcclxufSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBrZXlWYXVsdENsaWVudCA9IGdldENsaWVudChjbGllbnRJZCwgYXBwU2VjcmV0KTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGtleVZhdWx0Q2xpZW50LnNldFNlY3JldCh1cmksIHNlY3JldE5hbWUsIHNlY3JldFZhbHVlKTtcclxuICAgIGNvbnN0IHNlY3JldElkID0gS2V5VmF1bHQucGFyc2VTZWNyZXRJZGVudGlmaWVyKHJlc3VsdC5pZCk7XHJcbiAgICByZXR1cm4gc2VjcmV0SWQ7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBWRXJyb3IoXHJcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxyXG4gICAgICBcIkZhaWxlZCB0byBzZXQgc2VjcmV0XCJcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZXRTZWNyZXQ7XHJcbiIsImltcG9ydCB7IGNyZWF0ZUtleSwgZW5jcnlwdCwgc2V0U2VjcmV0IH0gZnJvbSBcImNwektleVZhdWx0XCI7XHJcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcbmNvbnN0IHtcclxuICBLRVlfVkFVTFRfVVJMLFxyXG4gIEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXHJcbiAgS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVRcclxufSA9IHByb2Nlc3MuZW52O1xyXG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0QW5kU2F2ZShrZXlOYW1lLCBzZWNyZXROYW1lLCB2YWx1ZSkge1xyXG4gIGF3YWl0IGNyZWF0ZUtleSh7XHJcbiAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXHJcbiAgICBjbGllbnRJZDogS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCxcclxuICAgIGFwcFNlY3JldDogS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQsXHJcbiAgICBrZXlOYW1lXHJcbiAgfSk7XHJcbiAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IGF3YWl0IGVuY3J5cHQoe1xyXG4gICAgdXJpOiBLRVlfVkFVTFRfVVJMLFxyXG4gICAgY2xpZW50SWQ6IEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXHJcbiAgICBhcHBTZWNyZXQ6IEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVULFxyXG4gICAgdmFsdWUsXHJcbiAgICBrZXlOYW1lXHJcbiAgfSk7XHJcbiAgY29uc3Qgc2VjcmV0ID0gYXdhaXQgc2V0U2VjcmV0KHtcclxuICAgIHVyaTogS0VZX1ZBVUxUX1VSTCxcclxuICAgIGNsaWVudElkOiBLRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lELFxyXG4gICAgYXBwU2VjcmV0OiBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVCxcclxuICAgIHNlY3JldFZhbHVlOiBlbmNyeXB0ZWREYXRhLFxyXG4gICAgc2VjcmV0TmFtZVxyXG4gIH0pO1xyXG4gIHJldHVybiBzZWNyZXQudmVyc2lvbjtcclxufVxyXG5cclxuZXhwb3J0IHsgZW5jcnlwdEFuZFNhdmUgfTtcclxuIiwiY29uc3QgQ09OVFJPTF9TRVJWSUNFID0gXCJjb250cm9sXCI7XG5jb25zdCBNQVJLRVRXQVRDSEVSX1NFUlZJQ0UgPSBcIm1hcmtldHdhdGNoZXJcIjtcbmNvbnN0IENBTkRMRUJBVENIRVJfU0VSVklDRSA9IFwiY2FuZGxlYmF0Y2hlclwiO1xuY29uc3QgRVhXQVRDSEVSX1NFUlZJQ0UgPSBcImV4d2F0Y2hlclwiO1xuY29uc3QgSU1QT1JURVJfU0VSVklDRSA9IFwiaW1wb3J0ZXJcIjtcbmNvbnN0IEFEVklTRVJfU0VSVklDRSA9IFwiYWR2aXNlclwiO1xuY29uc3QgVFJBREVSX1NFUlZJQ0UgPSBcInRyYWRlclwiO1xuY29uc3QgQkFDS1RFU1RFUl9TRVJWSUNFID0gXCJiYWNrdGVzdGVyXCI7XG5jb25zdCBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UgPSBcImV2ZW50c2xvZ2dlclwiO1xuY29uc3QgQ09OTkVDVE9SX1NFUlZJQ0UgPSBcImNvbm5lY3RvclwiO1xuXG5leHBvcnQge1xuICBDT05UUk9MX1NFUlZJQ0UsXG4gIE1BUktFVFdBVENIRVJfU0VSVklDRSxcbiAgQ0FORExFQkFUQ0hFUl9TRVJWSUNFLFxuICBFWFdBVENIRVJfU0VSVklDRSxcbiAgSU1QT1JURVJfU0VSVklDRSxcbiAgQURWSVNFUl9TRVJWSUNFLFxuICBUUkFERVJfU0VSVklDRSxcbiAgQkFDS1RFU1RFUl9TRVJWSUNFLFxuICBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UsXG4gIENPTk5FQ1RPUl9TRVJWSUNFXG59O1xuIiwiY29uc3QgQkFTRV9FVkVOVCA9IHtcclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICBpZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJBbiB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50LlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICB0b3BpYzoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgcmVzb3VyY2UgcGF0aCBvZiB0aGUgZXZlbnQgc291cmNlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzdWJqZWN0OiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcmVzb3VyY2UgcGF0aCByZWxhdGl2ZSB0byB0aGUgdG9waWMgcGF0aC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IHRydWVcclxuICAgIH0sXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkV2ZW50IGRhdGEgc3BlY2lmaWMgdG8gdGhlIGV2ZW50IHR5cGUuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCJcclxuICAgIH0sXHJcbiAgICBldmVudFR5cGU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIHR5cGUgb2YgdGhlIGV2ZW50IHRoYXQgb2NjdXJyZWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGV2ZW50VGltZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgdGltZSAoaW4gVVRDKSB0aGUgZXZlbnQgd2FzIGdlbmVyYXRlZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgbWV0YWRhdGFWZXJzaW9uOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBzY2hlbWEgdmVyc2lvbiBvZiB0aGUgZXZlbnQgbWV0YWRhdGEuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGRhdGFWZXJzaW9uOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBzY2hlbWEgdmVyc2lvbiBvZiB0aGUgZGF0YSBvYmplY3QuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IEJBU0VfRVJST1IgPSB7XHJcbiAgdHlwZTogXCJvYmplY3RcIixcclxuICBkZXNjcmlwdGlvbjogXCJFcnJvciBvYmplY3QgaWYgc29tZXRoaW5nIGdvZXMgd3JvbmcuXCIsXHJcbiAgb3B0aW9uYWw6IHRydWUsXHJcbiAgcHJvcHM6IHtcclxuICAgIG5hbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiRXJyb3IgbmFtZS5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgbWVzc2FnZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJFcnJvciBtZXNzYWdlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBpbmZvOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIGRldGFpbHMuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgU1VCX1ZBTElEQVRJT05fRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIk1pY3Jvc29mdC5FdmVudEdyaWQuU3Vic2NyaXB0aW9uVmFsaWRhdGlvbkV2ZW50XCJcclxufTtcclxuXHJcbmNvbnN0IFNVQl9ERUxFVEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJNaWNyb3NvZnQuRXZlbnRHcmlkLlN1YnNjcmlwdGlvbkRlbGV0ZWRFdmVudFwiXHJcbn07XHJcblxyXG5leHBvcnQgeyBCQVNFX0VWRU5ULCBCQVNFX0VSUk9SLCBTVUJfVkFMSURBVElPTl9FVkVOVCwgU1VCX0RFTEVURURfRVZFTlQgfTtcclxuIiwiY29uc3QgQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyA9IHtcclxuICBkZWJ1Zzoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcclxuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIHByb3h5OiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJQcm94eSBlbmRwb2ludC5cIixcclxuICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICBvcHRpb25hbDogdHJ1ZSxcclxuICAgIGVtcHR5OiBmYWxzZVxyXG4gIH0sXHJcbiAgcmVxdWlyZWRIaXN0b3J5TWF4QmFyczoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiTG9hZCBoaXN0b3J5IGRhdGEgZnJvbSBjYWNoZS5cIixcclxuICAgIHR5cGU6IFwiaW50XCIsXHJcbiAgICBpbnRlZ2VyOiB0cnVlLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBBRFZJU0VSX1NFVFRJTkdTID0ge1xyXG4gIGRlYnVnOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJEZWJ1ZyBtb2RlLlwiLFxyXG4gICAgdHlwZTogXCJib29sZWFuXCIsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgc3RyYXRlZ3lQYXJhbWV0ZXJzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJTdHJhdGVneSBwYXJhbWV0ZXJzLlwiLFxyXG4gICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfSxcclxuICByZXF1aXJlZEhpc3RvcnlDYWNoZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiTG9hZCBoaXN0b3J5IGRhdGEgZnJvbSBjYWNoZS5cIixcclxuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWUsXHJcbiAgICBkZWZhdWx0OiB0cnVlXHJcbiAgfSxcclxuICByZXF1aXJlZEhpc3RvcnlNYXhCYXJzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJMb2FkIGhpc3RvcnkgZGF0YSBmcm9tIGNhY2hlLlwiLFxyXG4gICAgdHlwZTogXCJpbnRcIixcclxuICAgIGludGVnZXI6IHRydWUsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IEtFWV9WQVVMVF9TRUNSRVQgPSB7XHJcbiAgZW5jcnlwdGlvbktleU5hbWU6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIk5hbWUgb2YgZW5jcnlwdGlvbiBrZXlcIixcclxuICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICB9LFxyXG4gIG5hbWU6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlNlY3JldCBuYW1lXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgfSxcclxuICB2ZXJzaW9uOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJTZWNyZXQgdmVyc2lvblwiLFxyXG4gICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gIH1cclxufTtcclxuY29uc3QgVFJBREVSX1NFVFRJTkdTID0ge1xyXG4gIG1vZGU6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlNlcnZpY2UgcnVuIG1vZGUuXCIsXHJcbiAgICB0eXBlOiBcInRyYWRlTW9kZVwiLFxyXG4gICAgdmFsdWVzOiBbXCJlbXVsYXRvclwiLCBcInJlYWx0aW1lXCJdLFxyXG4gICAgcmVxdWlyZWRQcm9wczoge1xyXG4gICAgICByZWFsdGltZTogW1wia2V5cy5tYWluLkFQSUtleVwiLCBcImtleXMubWFpbi5BUElTZWNyZXRcIl1cclxuICAgIH0sXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgZGVidWc6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIkRlYnVnIG1vZGUuXCIsXHJcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfSxcclxuICBzbGlwcGFnZVN0ZXA6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlByaWNlIFNsaXBwYWdlIFN0ZXAuXCIsXHJcbiAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIGRldmlhdGlvbjoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiUHJpY2UgZGV2aWF0aW9uXCIsXHJcbiAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIHZvbHVtZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVXNlciB0cmFkZSB2b2x1bWVcIixcclxuICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgbXVsdGlQb3NpdGlvbjoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiTXVsdGlwbGUgYWN0aXZlIHBvc2l0aW9ucyBhdmFpbGFibGVcIixcclxuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIGV4Y2hhbmdlUGFyYW1zOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVc2VyIHNwZWNpZmljIGV4Y2hhbmdlIHBhcmFtZXRlcnNcIixcclxuICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAga2V5czoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgQVBJIEtleXMgSW5mb1wiLFxyXG4gICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgIHByb3BzOiB7XHJcbiAgICAgIG1haW46IHtcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJNYWluIEV4Y2hhbmdlIEFQSSBLZXlzIEluZm9cIixcclxuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICBBUElLZXk6IHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTWFpbiBFeGNoYW5nZSBBUEkgS2V5XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgICAgICAgIHByb3BzOiBLRVlfVkFVTFRfU0VDUkVUXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgQVBJU2VjcmV0OiB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1haW4gRXhjaGFuZ2UgQVBJIFNlY3JldFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICAgICAgICBwcm9wczogS0VZX1ZBVUxUX1NFQ1JFVFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc3BhcmU6IHtcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTcGFyZSBFeGNoYW5nZSBBUEkgS2V5cyBJbmZvXCIsXHJcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgQVBJS2V5OiB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNwYXJlIEV4Y2hhbmdlIEFQSSBLZXlcIixcclxuICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgICAgICAgcHJvcHM6IEtFWV9WQVVMVF9TRUNSRVRcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBBUElTZWNyZXQ6IHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3BhcmUgRXhjaGFuZ2UgQVBJIFNlY3JldFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICAgICAgICBwcm9wczogS0VZX1ZBVUxUX1NFQ1JFVFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgQkFDS1RFU1RFUl9TRVRUSU5HUyA9IHtcclxuICBkZWJ1Zzoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcclxuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9XHJcbn07XHJcbmV4cG9ydCB7XHJcbiAgQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyxcclxuICBBRFZJU0VSX1NFVFRJTkdTLFxyXG4gIFRSQURFUl9TRVRUSU5HUyxcclxuICBCQUNLVEVTVEVSX1NFVFRJTkdTXHJcbn07XHJcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBBRFZJU0VSX1NFVFRJTkdTIH0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINCX0LDQv9GD0YHQuiDQvdC+0LLQvtCz0L4g0YHQvtCy0LXRgtC90LjQutCwXHJcbiAqL1xyXG5jb25zdCBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5TdGFydFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICByb2JvdElkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJvYm90IHVuaXEgSWQuXCIsXHJcbiAgICAgIHR5cGU6IFwiaW50XCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxyXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICB0aW1lZnJhbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICAgIHR5cGU6IFwiaW50XCJcclxuICAgIH0sXHJcbiAgICBzdHJhdGVneU5hbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiU3RyYXRlZ3kgZmlsZSBuYW1lLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJBZHZpc2VyIHNldHRpbmdzLlwiLFxyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczogQURWSVNFUl9TRVRUSU5HU1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINCe0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LLQtdGC0L3QuNC60LBcclxuICovXHJcbmNvbnN0IFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkFkdmlzZXIuU3RvcFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICog0KHQvtCx0YvRgtC40LUgLSDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QsiDRgdC+0LLQtdGC0L3QuNC60LBcclxuICovXHJcbmNvbnN0IFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5VcGRhdGVcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc2V0dGluZ3M6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciBzZXR0aW5ncy5cIixcclxuICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgcHJvcHM6IEFEVklTRVJfU0VUVElOR1NcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogINCh0L7QsdGL0YLQuNC1IC0g0KHQvtCy0LXRgtC90LjQuiDQt9Cw0L/Rg9GJ0LXQvVxyXG4gKi9cclxuY29uc3QgVEFTS1NfQURWSVNFUl9TVEFSVEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5TdGFydGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqINCh0L7QsdGL0YLQuNC1IC0g0KHQvtCy0LXRgtC90LjQuiDQvtGB0YLQsNC90L7QstC70LXQvVxyXG4gKi9cclxuY29uc3QgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5TdG9wcGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqINCh0L7QsdGL0YLQuNC1IC0g0J/QsNGA0LDQvNC10YLRgNGLINGB0L7QstC10YLQvdC40LrQsCDQvtCx0L3QvtCy0LvQtdC90YtcclxuICovXHJcbmNvbnN0IFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkFkdmlzZXIuVXBkYXRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcclxuICBUQVNLU19BRFZJU0VSX1VQREFURURfRVZFTlRcclxufTtcclxuIiwiaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XHJcblxyXG5jb25zdCBDQU5ETEVTX05FV0NBTkRMRV9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLkNhbmRsZXMuTmV3Q2FuZGxlXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIGlkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgQ2FuZGxlIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxyXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICB0aW1lZnJhbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICAgIHR5cGU6IFwiaW50XCJcclxuICAgIH0sXHJcbiAgICB0aW1lOiB7IGRlc2NyaXB0aW9uOiBcIkNhbmRsZSB0aW1lIGluIHNlY29uZHMuXCIsIHR5cGU6IFwibnVtYmVyXCIgfSxcclxuICAgIHRpbWVzdGFtcDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGUgdGltZXN0YW1wIGluIFVUQy5cIixcclxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXHJcbiAgICB9LFxyXG4gICAgb3BlbjogeyBkZXNjcmlwdGlvbjogXCJDYW5kbGUgT3BlbiBQcmljZS5cIiwgdHlwZTogXCJudW1iZXJcIiB9LFxyXG4gICAgY2xvc2U6IHsgZGVzY3JpcHRpb246IFwiQ2FuZGxlIENsb3NlIFByaWNlLlwiLCB0eXBlOiBcIm51bWJlclwiIH0sXHJcbiAgICBoaWdoOiB7IGRlc2NyaXB0aW9uOiBcIkNhbmRsZSBIaWdoZXN0IFByaWNlLlwiLCB0eXBlOiBcIm51bWJlclwiIH0sXHJcbiAgICBsb3c6IHsgZGVzY3JpcHRpb246IFwiVHJhZGUgTG93ZXN0IFByaWNlLlwiLCB0eXBlOiBcIm51bWJlclwiIH0sXHJcbiAgICB2b2x1bWU6IHsgZGVzY3JpcHRpb246IFwiQ2FuZGxlIFZvbHVtZS5cIiwgdHlwZTogXCJudW1iZXJcIiB9XHJcbiAgfVxyXG59O1xyXG5jb25zdCBDQU5ETEVTX0hBTkRMRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5DYW5kbGVzLkhhbmRsZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgaWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBDYW5kbGUgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgc2VydmljZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTZXZpY2UgbmFtZSBoYW5kZWxpbmcgZXZlbnRcIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgdmFsdWVzOiBbXCJhZHZpc2VyXCIsIFwidHJhZGVyXCJdXHJcbiAgICB9LFxyXG4gICAgc3VjY2Vzczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTdWNjZXNzIGV4ZWN1dGlvbiBsaXN0XCIsXHJcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgaXRlbXM6IFwic3RyaW5nXCIsXHJcbiAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiRXJyb3IgZXhlY3V0aW9uIGxpc3RcIixcclxuICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICBpdGVtczoge1xyXG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgICAgICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgc3VjY2Vzc1BlbmRpbmc6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlN1Y2Nlc3MgcXVldWVkIGxpc3RcIixcclxuICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgIGl0ZW1zOiBcInN0cmluZ1wiLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIGVycm9yUGVuZGluZzoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiRXJyb3IgcXVldWVkIGxpc3RcIixcclxuICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgIGl0ZW1zOiB7XHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgdGFza0lkOiB7IHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IENBTkRMRVNfSEFORExFRF9FVkVOVCwgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQgfTtcclxuIiwiaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XHJcbmltcG9ydCB7XHJcbiAgQURWSVNFUl9TRVRUSU5HUyxcclxuICBUUkFERVJfU0VUVElOR1MsXHJcbiAgQkFDS1RFU1RFUl9TRVRUSU5HU1xyXG59IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RhcnRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgcm9ib3RJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcImludFwiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICB1c2VySWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcInV1aWRcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc3RyYXRlZ3lOYW1lOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlN0cmF0ZWd5IGZpbGUgbmFtZS5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIHRpbWVmcmFtZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcclxuICAgICAgdHlwZTogXCJpbnRcIlxyXG4gICAgfSxcclxuICAgIGRhdGVGcm9tOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0IHN0YXJ0IGRhdGUuXCIsXHJcbiAgICAgIHR5cGU6IFwiZGF0ZWZyb21cIlxyXG4gICAgfSxcclxuICAgIGRhdGVUbzoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJCYWNrdGVzdCBlbmQgZGF0ZS5cIixcclxuICAgICAgdHlwZTogXCJkYXRldG9cIlxyXG4gICAgfSxcclxuICAgIHNldHRpbmdzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0ZXIgc2V0dGluZ3MuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIHByb3BzOiBCQUNLVEVTVEVSX1NFVFRJTkdTXHJcbiAgICB9LFxyXG4gICAgYWR2aXNlclNldHRpbmdzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFkdmlzZXIgc2V0dGluZ3MuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIHByb3BzOiBBRFZJU0VSX1NFVFRJTkdTXHJcbiAgICB9LFxyXG4gICAgdHJhZGVyU2V0dGluZ3M6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVHJhZGVyIHNldHRpbmdzLlwiLFxyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVE9QX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQmFja3Rlc3Rlci5TdG9wXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RhcnRlZFwiLFxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQmFja3Rlc3Rlci5TdG9wcGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9GSU5JU0hFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuRmluaXNoZWRcIixcclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQsXHJcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXHJcbn07XHJcbiIsImNvbnN0IFZBTElEX1RJTUVGUkFNRVMgPSBbMSwgNSwgMTUsIDMwLCA2MCwgMTIwLCAyNDAsIDE0NDBdO1xyXG5cclxuZXhwb3J0IHsgVkFMSURfVElNRUZSQU1FUyB9O1xyXG4iLCJpbXBvcnQgeyBWQUxJRF9USU1FRlJBTUVTIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL3RpbWVmcmFtZXNcIjtcclxuaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XHJcbmltcG9ydCB7IENBTkRMRUJBVENIRVJfU0VUVElOR1MgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuXHJcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0YXJ0XCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHByb3ZpZGVyVHlwZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJEYXRhIHByb3ZpZGVyIHR5cGUuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1wiY2N4dFwiXSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcclxuICAgIGFzc2V0OiB7IGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxyXG4gICAgY3VycmVuY3k6IHsgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxyXG4gICAgdGltZWZyYW1lczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJMaXN0IG9mIHRpbWVmcmFtZXMgaW4gbWludXRlcy5cIixcclxuICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICBpdGVtczogXCJudW1iZXJcIixcclxuICAgICAgZW51bTogVkFMSURfVElNRUZSQU1FU1xyXG4gICAgfSxcclxuICAgIHNldHRpbmdzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbmRsZWJhdGNoZXIgc2V0dGluZ3MuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIHByb3BzOiBDQU5ETEVCQVRDSEVSX1NFVFRJTkdTXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0b3BcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlVwZGF0ZVwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGViYXRjaGVyIHNldHRpbmdzLlwiLFxyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczogQ0FORExFQkFUQ0hFUl9TRVRUSU5HU1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5TdGFydGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BQRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0b3BwZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkNhbmRsZWJhdGNoZXIuVXBkYXRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURV9FVkVOVCxcclxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlRcclxufTtcclxuIiwiaW1wb3J0IHsgVkFMSURfVElNRUZSQU1FUyB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS90aW1lZnJhbWVzXCI7XHJcbmltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5cclxuY29uc3QgVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5JbXBvcnRlci5TdGFydFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBkZWJ1Zzoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJEZWJ1ZyBtb2RlLlwiLFxyXG4gICAgICB0eXBlOiBcImJvb2xlYW5cIixcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBwcm92aWRlclR5cGU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiRGF0YSBwcm92aWRlciB0eXBlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtcImNjeHRcIl0sXHJcbiAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIHRpbWVmcmFtZXM6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgZW51bTogVkFMSURfVElNRUZSQU1FUyxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICByZXF1aXJlQmF0Y2hpbmc6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiQmF0Y2ggbG9hZGluZyBjYW5kbGVzXCIsXHJcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHNhdmVUb0NhY2hlOiB7XHJcbiAgICAgIGRhdGFTY2hlbWE6IFwiU2F2ZSBjdXJyZW50IGxvYWRlZCBjYW5kbGVzIHRvIGNhY2hlXCIsXHJcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIC8vIFRPRE86IGRhdGVmcm9tL2RhdGV0byBjdXN0b20gdmFsaWRhdGlvblxyXG4gICAgZGF0ZUZyb206IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiSW1wb3J0IHN0YXJ0IGRhdGUuXCIsXHJcbiAgICAgIHR5cGU6IFwiZGF0ZWZyb21cIlxyXG4gICAgfSxcclxuICAgIGRhdGVUbzoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJJbXBvcnQgZW5kIGRhdGUuXCIsXHJcbiAgICAgIHR5cGU6IFwiZGF0ZXRvXCJcclxuICAgIH0sXHJcbiAgICBwcm94eToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQcm94eSBlbmRwb2ludC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgb3B0aW9uYWw6IHRydWUsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IFRBU0tTX0lNUE9SVEVSX1NUT1BfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5JbXBvcnRlci5TdG9wXCIsXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkltcG9ydGVyLlN0YXJ0ZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBUQVNLU19JTVBPUlRFUl9TVE9QUEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuSW1wb3J0ZXIuU3RvcHBwZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkltcG9ydGVyLkZpbmlzaGVkXCIsXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0lNUE9SVEVSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVFxyXG59O1xyXG4iLCJpbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuXHJcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlN0YXJ0XCIsXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgIGRlYnVnOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRlYnVnIG1vZGUuXCIsXHJcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHByb3ZpZGVyVHlwZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJEYXRhIHByb3ZpZGVyIHR5cGUuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1wi0YFyeXB0b9GBb21wYXJlXCJdLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHN1YnNjcmlwdGlvbnM6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiRGF0YSBzdWJzY3JpcHRpb25zIGxpc3RcIixcclxuICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICBpdGVtczoge1xyXG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgIGFzc2V0OiB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiY3VycmVuY3lcIixcclxuICAgICAgICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY3VycmVuY3k6IHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiY3VycmVuY3lcIixcclxuICAgICAgICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlN0b3BcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3Vic2NyaWJlXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiwgZW1wdHk6IGZhbHNlIH0sXHJcbiAgICBzdWJzY3JpcHRpb25zOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRhdGEgc3Vic2NyaXB0aW9ucyBsaXN0XCIsXHJcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgaXRlbXM6IHtcclxuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICBhc3NldDoge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcImN1cnJlbmN5XCIsXHJcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGN1cnJlbmN5OiB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcImN1cnJlbmN5XCIsXHJcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuVW5zdWJzY3JpYmVcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc3Vic2NyaXB0aW9uczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJEYXRhIHN1YnNjcmlwdGlvbnMgbGlzdFwiLFxyXG4gICAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgYXNzZXQ6IHtcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIixcclxuICAgICAgICAgICAgdHlwZTogXCJjdXJyZW5jeVwiLFxyXG4gICAgICAgICAgICBlbXB0eTogZmFsc2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjdXJyZW5jeToge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIixcclxuICAgICAgICAgICAgdHlwZTogXCJjdXJyZW5jeVwiLFxyXG4gICAgICAgICAgICBlbXB0eTogZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3RhcnRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5TdG9wcGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuIC0gJ25hbWVQcm92aWRlcidcIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuVXBkYXRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLiAtICduYW1lUHJvdmlkZXInXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5UXHJcbn07XHJcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBUUkFERVJfU0VUVElOR1MgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuLyoqXHJcbiAqINCh0L7QsdGL0YLQuNC1IC0g0LfQsNC/0YPRgdC6INC90L7QstC+0LPQviDQv9GA0L7RgtC+0YDQs9C+0LLRidC40LrQsFxyXG4gKi9cclxuY29uc3QgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVHJhZGVyLlN0YXJ0XCIsXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgcm9ib3RJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLiAtICdBZHZpc29yTmFtZSdcIixcclxuICAgICAgdHlwZTogXCJpbnRcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgdXNlcklkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVzZXIgdW5pcSBJZC5cIixcclxuICAgICAgdHlwZTogXCJ1dWlkXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxyXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICB0aW1lZnJhbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICAgIHR5cGU6IFwiaW50XCJcclxuICAgIH0sXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUcmFkZXIgc2V0dGluZ3MuXCIsXHJcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICAgIHByb3BzOiBUUkFERVJfU0VUVElOR1NcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICog0KHQvtCx0YvRgtC40LUgLSDQntGB0YLQsNC90L7QstC60LAg0L/RgNC+0YLQvtGA0LPQvtCy0YnQuNC60LBcclxuICovXHJcbmNvbnN0IFRBU0tTX1RSQURFUl9TVE9QX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVHJhZGVyLlN0b3BcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqINCh0L7QsdGL0YLQuNC1IC0g0J7QsdC90L7QstC70LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LIg0L/RgNC+0YLQvtGA0LPQvtCy0YnQuNC60LBcclxuICovXHJcbmNvbnN0IFRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5UcmFkZXIuVXBkYXRlXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHNldHRpbmdzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlciBzZXR0aW5ncy5cIixcclxuICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgcHJvcHM6IFRSQURFUl9TRVRUSU5HU1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINCf0YDQvtGC0L7RgNCz0L7QstGJ0LjQuiDQt9Cw0L/Rg9GJ0LXQvVxyXG4gKi9cclxuY29uc3QgVEFTS1NfVFJBREVSX1NUQVJURURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5UcmFkZXIuU3RhcnRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINCf0YDQvtGC0L7RgNCz0L7QstGJ0LjQuiDQvtGB0YLQsNC90L7QstC70LXQvVxyXG4gKi9cclxuY29uc3QgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5UcmFkZXIuU3RvcHBlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINC/0LDRgNCw0LzQtdGC0YDRiyDQv9GA0L7RgtC+0YDQs9C+0LLRidC40LrQsCDQvtCx0L3QvtCy0LvQtdC90YtcclxuICovXHJcbmNvbnN0IFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVHJhZGVyLlVwZGF0ZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgdGFza0lkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfU1RPUF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UXHJcbn07XHJcbiIsImltcG9ydCB7IFZBTElEX1RJTUVGUkFNRVMgfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvdGltZWZyYW1lc1wiO1xyXG5pbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xyXG5cclxuY29uc3QgRVhXQVRDSEVSX1NUQVJUX1BBUkFNUyA9IHtcclxuICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcclxuICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgdGltZWZyYW1lczoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiTGlzdCBvZiB0aW1lZnJhbWVzIGluIG1pbnV0ZXMuXCIsXHJcbiAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICBpdGVtczogXCJudW1iZXJcIixcclxuICAgIGVudW06IFZBTElEX1RJTUVGUkFNRVMsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgbWFya2V0d2F0Y2hlclByb3ZpZGVyVHlwZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiTWFya2V0d2F0Y2hlciBkYXRhIHByb3ZpZGVyIHR5cGUuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgdmFsdWVzOiBbXCLRgXJ5cHRv0YFvbXBhcmVcIl0sXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgY2FuZGxlYmF0Y2hlclByb3ZpZGVyVHlwZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlYmF0Y2hlciBkYXRhIHByb3ZpZGVyIHR5cGUuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgdmFsdWVzOiBbXCJjY3h0XCJdLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIGNhbmRsZWJhdGNoZXJTZXR0aW5nczoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlYmF0Y2hlciBzZXR0aW5ncy5cIixcclxuICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICBwcm9wczogQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyxcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgRVhXQVRDSEVSX1NUT1BfUEFSQU1TID0ge1xyXG4gIHRhc2tJZDoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVW5pcSB3YXRjaGVyIGlkLlwiLFxyXG4gICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgIGVtcHR5OiBmYWxzZVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IEVYV0FUQ0hFUl9VUERBVEVfUEFSQU1TID0ge1xyXG4gIHRhc2tJZDoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVW5pcSB3YXRjaGVyIGlkLlwiLFxyXG4gICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgIGVtcHR5OiBmYWxzZVxyXG4gIH0sXHJcbiAgY2FuZGxlYmF0Y2hlclNldHRpbmdzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGViYXRjaGVyIHNldHRpbmdzLlwiLFxyXG4gICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgIHByb3BzOiBDQU5ETEVCQVRDSEVSX1NFVFRJTkdTXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5FeHdhdGNoZXIuU3RhcnRlZFwiLFxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfRVhXQVRDSEVSX1NUT1BQRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5FeHdhdGNoZXIuU3RvcHBlZFwiLFxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBFWFdBVENIRVJfU1RBUlRfUEFSQU1TLFxyXG4gIEVYV0FUQ0hFUl9TVE9QX1BBUkFNUyxcclxuICBFWFdBVENIRVJfVVBEQVRFX1BBUkFNUyxcclxuICBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19FWFdBVENIRVJfU1RPUFBFRF9FVkVOVFxyXG59O1xyXG4iLCJpbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHtcclxuICBCQUNLVEVTVEVSX1NFVFRJTkdTLFxyXG4gIEFEVklTRVJfU0VUVElOR1MsXHJcbiAgVFJBREVSX1NFVFRJTkdTXHJcbn0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XHJcblxyXG5jb25zdCBCQUNLVEVTVF9TVEFSVF9QQVJBTVMgPSB7XHJcbiAgcm9ib3RJZDoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcclxuICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICBlbXB0eTogZmFsc2VcclxuICB9LFxyXG4gIHVzZXJJZDoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxyXG4gICAgdHlwZTogXCJ1dWlkXCIsXHJcbiAgICBlbXB0eTogZmFsc2VcclxuICB9LFxyXG4gIGRhdGVGcm9tOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJCYWNrdGVzdCBzdGFydCBkYXRlLlwiLFxyXG4gICAgdHlwZTogXCJkYXRlZnJvbVwiXHJcbiAgfSxcclxuICBkYXRlVG86IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0IGVuZCBkYXRlLlwiLFxyXG4gICAgdHlwZTogXCJkYXRldG9cIlxyXG4gIH0sXHJcbiAgc2V0dGluZ3M6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0ZXIgc2V0dGluZ3MuXCIsXHJcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgcHJvcHM6IEJBQ0tURVNURVJfU0VUVElOR1MsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgYWR2aXNlclNldHRpbmdzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJBZHZpc2VyIHNldHRpbmdzLlwiLFxyXG4gICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgIHByb3BzOiBBRFZJU0VSX1NFVFRJTkdTLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9LFxyXG4gIHRyYWRlclNldHRpbmdzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJUcmFkZXIgc2V0dGluZ3MuXCIsXHJcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgcHJvcHM6IFRSQURFUl9TRVRUSU5HUyxcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgQkFDS1RFU1RfU1RPUF9QQVJBTVMgPSB7XHJcbiAgdGFza0lkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgZW1wdHk6IGZhbHNlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RfU1RBUlRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0LlN0YXJ0ZWRcIixcclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0YXNrSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IFRBU0tTX0JBQ0tURVNUX1NUT1BQRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5CYWNrdGVzdC5TdG9wcGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVEFTS1NfQkFDS1RFU1RfRklOSVNIRURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5CYWNrdGVzdC5GaW5pc2hlZFwiLFxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIHRhc2tJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBCQVNFX0VSUk9SXHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBCQUNLVEVTVF9TVEFSVF9QQVJBTVMsXHJcbiAgQkFDS1RFU1RfU1RPUF9QQVJBTVMsXHJcbiAgVEFTS1NfQkFDS1RFU1RfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX0JBQ0tURVNUX0ZJTklTSEVEX0VWRU5UXHJcbn07XHJcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBUUkFERVJfU0VUVElOR1MgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuXHJcbmNvbnN0IFNJR05BTFNfTkVXU0lHTkFMX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouU2lnbmFscy5OZXdTaWduYWxcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgc2lnbmFsSWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBDYW5kbGUgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIHRpbWVmcmFtZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcclxuICAgICAgdHlwZTogXCJpbnRcIlxyXG4gICAgfSxcclxuICAgIGFkdmlzZXJJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJBZHZpc2VyIHRhc2sgSWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHJvYm90SWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcclxuICAgICAgdHlwZTogXCJpbnRcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgdGltZXN0YW1wOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNpZ25hbCB0aW1lc3RhbXAgaW4gVVRDLlwiLFxyXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcclxuICAgIH0sXHJcbiAgICBhY3Rpb246IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiU2lnbmFsIHR5cGUuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1wibG9uZ1wiLCBcImNsb3NlTG9uZ1wiLCBcInNob3J0XCIsIFwiY2xvc2VTaG9ydFwiXVxyXG4gICAgfSxcclxuICAgIG9yZGVyVHlwZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciB0eXBlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtcInN0b3BcIiwgXCJsaW1pdFwiLCBcIm1hcmtldFwiXSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBwcmljZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBpbiBxdW90ZSBjdXJyZW5jeS5cIixcclxuICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgfSxcclxuICAgIHByaWNlU291cmNlOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbmRsZSBmaWVsZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgdmFsdWVzOiBbXCJvcGVuXCIsIFwiY2xvc2VcIiwgXCJoaWdoXCIsIFwibG93XCIsIFwic3RvcFwiXSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBjYW5kbGVJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGUgdW5pcSBJZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBjYW5kbGVUaW1lc3RhbXA6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlIHRpbWVzdGFtcC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBwb3NpdGlvbklkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgcG9zaXRpb24gSWRcIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgfSxcclxuICAgIHNldHRpbmdzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlciBwYXJhbWV0ZXJzLlwiLFxyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczoge1xyXG4gICAgICAgIHNsaXBwYWdlU3RlcDogVFJBREVSX1NFVFRJTkdTLnNsaXBwYWdlU3RlcCxcclxuICAgICAgICBkZXZpYXRpb246IFRSQURFUl9TRVRUSU5HUy5kZXZpYXRpb24sXHJcbiAgICAgICAgdm9sdW1lOiBUUkFERVJfU0VUVElOR1Mudm9sdW1lLFxyXG4gICAgICAgIHBvc2l0aW9uQ29kZToge1xyXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gY29kZS5cIixcclxuICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICBvcHRpb25hbDogdHJ1ZSxcclxuICAgICAgICAgIGVtcHR5OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH1cclxuICB9XHJcbn07XHJcbmNvbnN0IFNJR05BTFNfSEFORExFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlNpZ25hbHMuSGFuZGxlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICBzaWduYWxJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIFNpZ25hbCBJZC5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXHJcbiAgICBzZXJ2aWNlOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNldmljZSBuYW1lIGhhbmRlbGluZyBldmVudFwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtcInRyYWRlclwiXVxyXG4gICAgfSxcclxuICAgIHN1Y2Nlc3M6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiU3VjY2VzcyBleGVjdXRpb24gbGlzdFwiLFxyXG4gICAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICAgIGl0ZW1zOiBcInN0cmluZ1wiLFxyXG4gICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGVycm9yOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIGV4ZWN1dGlvbiBsaXN0XCIsXHJcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgaXRlbXM6IHtcclxuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICB0YXNrSWQ6IHsgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXHJcbiAgICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH1cclxuICB9LFxyXG4gIHN1Y2Nlc3NQZW5kaW5nOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJTdWNjZXNzIHF1ZXVlZCBsaXN0XCIsXHJcbiAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICBpdGVtczogXCJzdHJpbmdcIixcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfSxcclxuICBlcnJvclBlbmRpbmc6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIHF1ZXVlZCBsaXN0XCIsXHJcbiAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICBpdGVtczoge1xyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczoge1xyXG4gICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBTSUdOQUxTX0hBTkRMRURfRVZFTlQsIFNJR05BTFNfTkVXU0lHTkFMX0VWRU5UIH07XHJcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5cclxuY29uc3QgVElDS1NfTkVXVElDS19FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRpY2tzLk5ld1RpY2tcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGRpcmVjdGlvbjoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBkaXJlY3Rpb24uXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1widXBcIiwgXCJkb3duXCIsIFwidW5jaGFuZ2VkXCJdXHJcbiAgICB9LFxyXG4gICAgcHJpY2U6IHsgZGVzY3JpcHRpb246IFwiVHJhZGUgUHJpY2UuXCIsIHR5cGU6IFwibnVtYmVyXCIgfSxcclxuICAgIHRpbWVzdGFtcDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUcmFkZSB0aW1lc3RhbXAgaW4gVVRDLlwiLFxyXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcclxuICAgIH0sXHJcbiAgICB2b2x1bWU6IHsgZGVzY3JpcHRpb246IFwiVHJhZGUgVm9sdW1lLlwiLCB0eXBlOiBcIm51bWJlclwiIH0sXHJcbiAgICB0cmFkZUlkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlIElELlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBUSUNLU19IQU5ETEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGlja3MuSGFuZGxlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICB0cmFkZUlkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgVHJhZGUgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgc2VydmljZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTZXZpY2UgbmFtZSBoYW5kZWxpbmcgZXZlbnRcIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgdmFsdWVzOiBbXCJ0cmFkZXJcIl1cclxuICAgIH0sXHJcbiAgICBzdWNjZXNzOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlN1Y2Nlc3MgZXhlY3V0aW9uIGxpc3RcIixcclxuICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICBpdGVtczogXCJzdHJpbmdcIixcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBlcnJvcjoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJFcnJvciBleGVjdXRpb24gbGlzdFwiLFxyXG4gICAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgdGFza0lkOiB7IHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5leHBvcnQgeyBUSUNLU19ORVdUSUNLX0VWRU5ULCBUSUNLU19IQU5ETEVEX0VWRU5UIH07XHJcbiIsImltcG9ydCBhZHZpc2VyIGZyb20gXCIuL2FkdmlzZXJcIjtcclxuaW1wb3J0IGJhY2t0ZXN0ZXIgZnJvbSBcIi4vYmFja3Rlc3RlclwiO1xyXG5pbXBvcnQgY2FuZGxlYmF0Y2hlciBmcm9tIFwiLi9jYW5kbGViYXRjaGVyXCI7XHJcbmltcG9ydCBjb250cm9sIGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IGV2ZW50c2xvZ2dlciBmcm9tIFwiLi9ldmVudHNsb2dnZXJcIjtcclxuaW1wb3J0IGltcG9ydGVyIGZyb20gXCIuL2ltcG9ydGVyXCI7XHJcbmltcG9ydCBtYXJrZXR3YXRjaGVyIGZyb20gXCIuL21hcmtldHdhdGNoZXJcIjtcclxuaW1wb3J0IHRyYWRlciBmcm9tIFwiLi90cmFkZXJcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19UT1BJQyxcclxuICBDQU5ETEVTX1RPUElDLFxyXG4gIFRJQ0tTX1RPUElDLFxyXG4gIFNJR05BTFNfVE9QSUMsXHJcbiAgVFJBREVTX1RPUElDLFxyXG4gIExPR19UT1BJQyxcclxuICBFUlJPUl9UT1BJQ1xyXG59IGZyb20gXCIuL3RvcGljc1wiO1xyXG5cclxuY29uc3QgZW5kcG9pbnRzID0ge1xyXG4gIC4uLmFkdmlzZXIsXHJcbiAgLi4uYmFja3Rlc3RlcixcclxuICAuLi5jYW5kbGViYXRjaGVyLFxyXG4gIC4uLmNvbnRyb2wsXHJcbiAgLi4uZXZlbnRzbG9nZ2VyLFxyXG4gIC4uLmltcG9ydGVyLFxyXG4gIC4uLm1hcmtldHdhdGNoZXIsXHJcbiAgLi4udHJhZGVyXHJcbn07XHJcbmNvbnN0IHRvcGljcyA9IFtcclxuICBUQVNLU19UT1BJQyxcclxuICBDQU5ETEVTX1RPUElDLFxyXG4gIFRJQ0tTX1RPUElDLFxyXG4gIFNJR05BTFNfVE9QSUMsXHJcbiAgVFJBREVTX1RPUElDLFxyXG4gIExPR19UT1BJQyxcclxuICBFUlJPUl9UT1BJQ1xyXG5dO1xyXG5leHBvcnQgeyBlbmRwb2ludHMsIHRvcGljcyB9O1xyXG4iLCJpbXBvcnQgeyBBRFZJU0VSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXNcIjtcclxuaW1wb3J0IHsgVEFTS1NfVE9QSUMsIENBTkRMRVNfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULFxyXG4gIFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVCxcclxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9hZHZpc2VyXCI7XHJcbmltcG9ydCB7IENBTkRMRVNfTkVXQ0FORExFX0VWRU5UIH0gZnJvbSBcIi4uL3R5cGVzL2NhbmRsZXMvY2FuZGxlc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIFtBRFZJU0VSX1NFUlZJQ0VdOiBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke0FEVklTRVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXHJcbiAgICAgIHVybDogXCIvYXBpL3Rhc2tFdmVudHNcIixcclxuICAgICAgbG9jYWxQb3J0OiA4MTA0LFxyXG4gICAgICB0eXBlczogW1xyXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RBUlRfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQURWSVNFUl9VUERBVEVfRVZFTlQuZXZlbnRUeXBlXHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke0FEVklTRVJfU0VSVklDRX0tJHtDQU5ETEVTX1RPUElDfWAsXHJcbiAgICAgIHRvcGljOiBDQU5ETEVTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9jYW5kbGVFdmVudHNcIixcclxuICAgICAgbG9jYWxQb3J0OiA4MTA0LFxyXG4gICAgICB0eXBlczogW0NBTkRMRVNfTkVXQ0FORExFX0VWRU5ULmV2ZW50VHlwZV1cclxuICAgIH1cclxuICBdXHJcbn07XHJcbiIsImNvbnN0IFRBU0tTX1RPUElDID0gXCJ0YXNrc1wiO1xyXG5jb25zdCBDQU5ETEVTX1RPUElDID0gXCJjYW5kbGVzXCI7XHJcbmNvbnN0IFRJQ0tTX1RPUElDID0gXCJ0aWNrc1wiO1xyXG5jb25zdCBTSUdOQUxTX1RPUElDID0gXCJzaWduYWxzXCI7XHJcbmNvbnN0IFRSQURFU19UT1BJQyA9IFwidHJhZGVzXCI7XHJcbmNvbnN0IExPR19UT1BJQyA9IFwibG9nXCI7XHJcbmNvbnN0IEVSUk9SX1RPUElDID0gXCJlcnJvclwiO1xyXG5leHBvcnQge1xyXG4gIFRBU0tTX1RPUElDLFxyXG4gIENBTkRMRVNfVE9QSUMsXHJcbiAgVElDS1NfVE9QSUMsXHJcbiAgU0lHTkFMU19UT1BJQyxcclxuICBUUkFERVNfVE9QSUMsXHJcbiAgTE9HX1RPUElDLFxyXG4gIEVSUk9SX1RPUElDXHJcbn07XHJcbiIsImltcG9ydCB7IEJBQ0tURVNURVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBUQVNLU19UT1BJQyB9IGZyb20gXCIuL3RvcGljc1wiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBbQkFDS1RFU1RFUl9TRVJWSUNFXTogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtCQUNLVEVTVEVSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXHJcbiAgICAgIGxvY2FsUG9ydDogODEwOCxcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlXHJcbiAgICAgIF1cclxuICAgIH1cclxuICBdXHJcbn07XHJcbiIsImltcG9ydCB7IENBTkRMRUJBVENIRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBUQVNLU19UT1BJQyB9IGZyb20gXCIuL3RvcGljc1wiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2NhbmRsZWJhdGNoZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBbQ0FORExFQkFUQ0hFUl9TRVJWSUNFXTogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtDQU5ETEVCQVRDSEVSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXHJcbiAgICAgIGxvY2FsUG9ydDogODEwMyxcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZVxyXG4gICAgICBdXHJcbiAgICB9XHJcbiAgXVxyXG59O1xyXG4iLCJpbXBvcnQgeyBDT05UUk9MX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXNcIjtcclxuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9hZHZpc2VyXCI7XHJcbmltcG9ydCB7XHJcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXJcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFRF9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2ltcG9ydGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlRcclxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvbWFya2V0d2F0Y2hlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3RyYWRlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2V4d2F0Y2hlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIFtDT05UUk9MX1NFUlZJQ0VdOiBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke0NPTlRST0xfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXHJcbiAgICAgIHVybDogXCIvYXBpL3Rhc2tFdmVudHNcIixcclxuICAgICAgbG9jYWxQb3J0OiA4MTA3LFxyXG4gICAgICB0eXBlczogW1xyXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9GSU5JU0hFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZVxyXG4gICAgICBdXHJcbiAgICB9XHJcbiAgXVxyXG59O1xyXG4iLCJpbXBvcnQgeyBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXNcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19UT1BJQyxcclxuICBDQU5ETEVTX1RPUElDLFxyXG4gIFNJR05BTFNfVE9QSUMsXHJcbiAgVElDS1NfVE9QSUMsXHJcbiAgVFJBREVTX1RPUElDLFxyXG4gIExPR19UT1BJQyxcclxuICBFUlJPUl9UT1BJQ1xyXG59IGZyb20gXCIuL3RvcGljc1wiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0FEVklTRVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5ULFxyXG4gIFRBU0tTX0FEVklTRVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQsXHJcbiAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2FkdmlzZXJcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULFxyXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RPUF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlRcclxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvYmFja3Rlc3RlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxyXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVCxcclxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BQRURfRVZFTlQsXHJcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2NhbmRsZWJhdGNoZXJcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX0lNUE9SVEVSX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9pbXBvcnRlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlRcclxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvbWFya2V0d2F0Y2hlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfU1RPUF9FVkVOVCxcclxuICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3RyYWRlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQsXHJcbiAgVEFTS1NfQkFDS1RFU1RfU1RPUFBFRF9FVkVOVCxcclxuICBUQVNLU19CQUNLVEVTVF9GSU5JU0hFRF9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdFwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2V4d2F0Y2hlclwiO1xyXG5pbXBvcnQge1xyXG4gIFRBU0tTX1VTRVJST0JPVF9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX1VTRVJST0JPVF9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX1VTRVJST0JPVF9VUERBVEVEX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3VzZXJSb2JvdFwiO1xyXG5pbXBvcnQge1xyXG4gIENBTkRMRVNfTkVXQ0FORExFX0VWRU5ULFxyXG4gIENBTkRMRVNfSEFORExFRF9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy9jYW5kbGVzL2NhbmRsZXNcIjtcclxuaW1wb3J0IHtcclxuICBTSUdOQUxTX05FV1NJR05BTF9FVkVOVCxcclxuICBTSUdOQUxTX0hBTkRMRURfRVZFTlRcclxufSBmcm9tIFwiLi4vdHlwZXMvc2lnbmFscy9zaWduYWxzXCI7XHJcbmltcG9ydCB7IFRJQ0tTX05FV1RJQ0tfRVZFTlQsIFRJQ0tTX0hBTkRMRURfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvdGlja3MvdGlja3NcIjtcclxuaW1wb3J0IHtcclxuICBUUkFERVNfUE9TSVRJT05fRVZFTlQsXHJcbiAgVFJBREVTX09SREVSX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3RyYWRlcy90cmFkZXNcIjtcclxuaW1wb3J0IHtcclxuICBMT0dfQURWSVNFUl9FVkVOVCxcclxuICBMT0dfQkFDS1RFU1RFUl9FVkVOVCxcclxuICBMT0dfQkFDS1RFU1RfRVZFTlQsXHJcbiAgTE9HX0NBTkRMRUJBVENIRVJfRVZFTlQsXHJcbiAgTE9HX0NPTlRST0xfRVZFTlQsXHJcbiAgTE9HX0VYV0FUQ0hFUl9FVkVOVCxcclxuICBMT0dfSU1QT1JURVJfRVZFTlQsXHJcbiAgTE9HX01BUktFVFdBVENIRVJfRVZFTlQsXHJcbiAgTE9HX1RSQURFUl9FVkVOVCxcclxuICBMT0dfVVNFUlJPQk9UX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2xvZy9sb2dcIjtcclxuaW1wb3J0IHtcclxuICBFUlJPUl9BRFZJU0VSX0VWRU5ULFxyXG4gIEVSUk9SX0JBQ0tURVNURVJfRVZFTlQsXHJcbiAgRVJST1JfQkFDS1RFU1RfRVZFTlQsXHJcbiAgRVJST1JfQ0FORExFQkFUQ0hFUl9FVkVOVCxcclxuICBFUlJPUl9DT05UUk9MX0VWRU5ULFxyXG4gIEVSUk9SX0VYV0FUQ0hFUl9FVkVOVCxcclxuICBFUlJPUl9JTVBPUlRFUl9FVkVOVCxcclxuICBFUlJPUl9NQVJLRVRXQVRDSEVSX0VWRU5ULFxyXG4gIEVSUk9SX1RSQURFUl9FVkVOVCxcclxuICBFUlJPUl9VU0VSUk9CT1RfRVZFTlRcclxufSBmcm9tIFwiLi4vdHlwZXMvZXJyb3IvZXJyb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBbRVZFTlRTX0xPR0dFUl9TRVJWSUNFXTogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfRklOSVNIRURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVUJTQ1JJQkVfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19UUkFERVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfVFJBREVSX1VQREFURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0JBQ0tURVNUX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX0JBQ0tURVNUX0ZJTklTSEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfRVhXQVRDSEVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1VTRVJST0JPVF9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19VU0VSUk9CT1RfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfVVNFUlJPQk9UX1VQREFURURfRVZFTlQuZXZlbnRUeXBlXHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke0VWRU5UU19MT0dHRVJfU0VSVklDRX0tJHtDQU5ETEVTX1RPUElDfWAsXHJcbiAgICAgIHRvcGljOiBDQU5ETEVTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBDQU5ETEVTX05FV0NBTkRMRV9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgQ0FORExFU19IQU5ETEVEX0VWRU5ULmV2ZW50VHlwZVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7U0lHTkFMU19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogU0lHTkFMU19UT1BJQyxcclxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXHJcbiAgICAgIHR5cGVzOiBbXHJcbiAgICAgICAgU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFNJR05BTFNfSEFORExFRF9FVkVOVC5ldmVudFR5cGVcclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke1RJQ0tTX1RPUElDfWAsXHJcbiAgICAgIHRvcGljOiBUSUNLU19UT1BJQyxcclxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXHJcbiAgICAgIHR5cGVzOiBbVElDS1NfTkVXVElDS19FVkVOVC5ldmVudFR5cGUsIFRJQ0tTX0hBTkRMRURfRVZFTlQuZXZlbnRUeXBlXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke1RSQURFU19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogVFJBREVTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcclxuICAgICAgdHlwZXM6IFtUUkFERVNfUE9TSVRJT05fRVZFTlQuZXZlbnRUeXBlLCBUUkFERVNfT1JERVJfRVZFTlQuZXZlbnRUeXBlXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke0xPR19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogTE9HX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBMT0dfQURWSVNFUl9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgTE9HX0JBQ0tURVNURVJfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIExPR19CQUNLVEVTVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgTE9HX0NBTkRMRUJBVENIRVJfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIExPR19DT05UUk9MX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBMT0dfRVhXQVRDSEVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBMT0dfSU1QT1JURVJfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIExPR19NQVJLRVRXQVRDSEVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBMT0dfVFJBREVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBMT0dfVVNFUlJPQk9UX0VWRU5ULmV2ZW50VHlwZVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7RVJST1JfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IEVSUk9SX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBFUlJPUl9BRFZJU0VSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBFUlJPUl9CQUNLVEVTVEVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBFUlJPUl9CQUNLVEVTVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgRVJST1JfQ0FORExFQkFUQ0hFUl9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgRVJST1JfQ09OVFJPTF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgRVJST1JfRVhXQVRDSEVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBFUlJPUl9JTVBPUlRFUl9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgRVJST1JfVFJBREVSX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBFUlJPUl9VU0VSUk9CT1RfRVZFTlQuZXZlbnRUeXBlXHJcbiAgICAgIF1cclxuICAgIH1cclxuICBdXHJcbn07XHJcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQge1xyXG4gIENBTkRMRUJBVENIRVJfU0VUVElOR1MsXHJcbiAgQURWSVNFUl9TRVRUSU5HUyxcclxuICBUUkFERVJfU0VUVElOR1NcclxufSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuXHJcbmNvbnN0IFVTRVJfUk9CT1RfU1RBUlRfUEFSQU1TID0ge1xyXG4gIGlkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHVzZXIgcm9ib3QgaWQuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgZW1wdHk6IGZhbHNlXHJcbiAgfSxcclxuICByb2JvdElkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxyXG4gICAgdHlwZTogXCJpbnRcIixcclxuICAgIGVtcHR5OiBmYWxzZVxyXG4gIH0sXHJcbiAgdXNlcklkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVc2VyIHVuaXEgSWQuXCIsXHJcbiAgICB0eXBlOiBcInV1aWRcIixcclxuICAgIGVtcHR5OiBmYWxzZVxyXG4gIH0sXHJcbiAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgY3VycmVuY3k6IHsgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxyXG4gIHRpbWVmcmFtZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICB0eXBlOiBcImludFwiXHJcbiAgfSxcclxuICBzdHJhdGVneU5hbWU6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlN0cmF0ZWd5IGZpbGUgbmFtZS5cIixcclxuICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICBlbXB0eTogZmFsc2VcclxuICB9LFxyXG4gIGNhbmRsZWJhdGNoZXJTZXR0aW5nczoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlYmF0Y2hlciBzZXR0aW5ncy5cIixcclxuICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICBwcm9wczogQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyxcclxuICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgfSxcclxuICBhZHZpc2VyU2V0dGluZ3M6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIkFkdmlzZXIgc2V0dGluZ3MuXCIsXHJcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgcHJvcHM6IEFEVklTRVJfU0VUVElOR1MsXHJcbiAgICBvcHRpb25hbDogdHJ1ZVxyXG4gIH0sXHJcbiAgdHJhZGVyU2V0dGluZ3M6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlciBzZXR0aW5ncy5cIixcclxuICAgIHR5cGU6IFwib2JqZWN0XCIsXHJcbiAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTLFxyXG4gICAgb3B0aW9uYWw6IHRydWVcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBVU0VSX1JPQk9UX1NUT1BfUEFSQU1TID0ge1xyXG4gIGlkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHVzZXIgcm9ib3QgaWQuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgZW1wdHk6IGZhbHNlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgVVNFUl9ST0JPVF9VUERBVEVfUEFSQU1TID0ge1xyXG4gIGlkOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHVzZXIgcm9ib3QgaWQuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgZW1wdHk6IGZhbHNlXHJcbiAgfSxcclxuICB0cmFkZXJTZXR0aW5nczoge1xyXG4gICAgZGVzY3JpcHRpb246IFwiVHJhZGVyIHNldHRpbmdzLlwiLFxyXG4gICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgIHByb3BzOiBUUkFERVJfU0VUVElOR1NcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICog0KHQvtCx0YvRgtC40LUgLSDQoNC+0LHQvtGCINC30LDQv9GD0YnQtdC9XHJcbiAqL1xyXG5jb25zdCBUQVNLU19VU0VSUk9CT1RfU1RBUlRFRF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLlVzZXJSb2JvdC5TdGFydGVkXCIsXHJcblxyXG4gIGRhdGFTY2hlbWE6IHtcclxuICAgIC4uLlVTRVJfUk9CT1RfU1RBUlRfUEFSQU1TLFxyXG4gICAgc3RhdHVzOiB7IGRlc2NyaXB0aW9uOiBcIkN1cnJlbnQgc3RhdHVzLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgIHN0YXJ0ZWRBdDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCBzdGFydCBkYXRlLlwiLFxyXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcclxuICAgIH0sXHJcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiDQodC+0LHRi9GC0LjQtSAtINCg0L7QsdC+0YIg0L7RgdGC0LDQvdC+0LLQu9C10L1cclxuICovXHJcbmNvbnN0IFRBU0tTX1VTRVJST0JPVF9TVE9QUEVEX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVXNlclJvYm90LlN0b3BwZWRcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgLi4uVVNFUl9ST0JPVF9TVE9QX1BBUkFNUyxcclxuICAgIHN0YXR1czogeyBkZXNjcmlwdGlvbjogXCJDdXJyZW50IHN0YXR1cy5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXHJcbiAgICBzdG9wcGVkZEF0OiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJvYm90IHN0b3AgZGF0ZS5cIixcclxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICog0KHQvtCx0YvRgtC40LUgLSDQn9Cw0YDQsNC80LXRgtGA0Ysg0YDQvtCx0L7RgtCwINC+0LHQvdC+0LLQu9C10L3Ri1xyXG4gKi9cclxuY29uc3QgVEFTS1NfVVNFUlJPQk9UX1VQREFURURfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5Vc2VyUm9ib3QuVXBkYXRlZFwiLFxyXG5cclxuICBkYXRhU2NoZW1hOiB7XHJcbiAgICAuLi5VU0VSX1JPQk9UX1VQREFURV9QQVJBTVMsXHJcbiAgICBzdGF0dXM6IHsgZGVzY3JpcHRpb246IFwiQ3VycmVudCBzdGF0dXMuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIFVTRVJfUk9CT1RfU1RBUlRfUEFSQU1TLFxyXG4gIFVTRVJfUk9CT1RfU1RPUF9QQVJBTVMsXHJcbiAgVVNFUl9ST0JPVF9VUERBVEVfUEFSQU1TLFxyXG4gIFRBU0tTX1VTRVJST0JPVF9TVEFSVEVEX0VWRU5ULFxyXG4gIFRBU0tTX1VTRVJST0JPVF9TVE9QUEVEX0VWRU5ULFxyXG4gIFRBU0tTX1VTRVJST0JPVF9VUERBVEVEX0VWRU5UXHJcbn07XHJcbiIsImltcG9ydCB7IFRSQURFUl9TRVRUSU5HUyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQge1xyXG4gIE9SREVSX1RZUEVfTElNSVQsXHJcbiAgT1JERVJfVFlQRV9NQVJLRVQsXHJcbiAgT1JERVJfVFlQRV9TVE9QLFxyXG4gIE9SREVSX0RJUkVDVElPTl9CVVksXHJcbiAgT1JERVJfRElSRUNUSU9OX1NFTEwsXHJcbiAgT1JERVJfUE9TX0RJUl9FTlRSWSxcclxuICBPUkRFUl9QT1NfRElSX0VYSVQsXHJcbiAgVFJBREVfQUNUSU9OX0xPTkcsXHJcbiAgVFJBREVfQUNUSU9OX0NMT1NFX0xPTkcsXHJcbiAgVFJBREVfQUNUSU9OX1NIT1JULFxyXG4gIFRSQURFX0FDVElPTl9DTE9TRV9TSE9SVFxyXG59IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS90eXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gIFBPU19TVEFUVVNfTkVXLFxyXG4gIFBPU19TVEFUVVNfT1BFTixcclxuICBQT1NfU1RBVFVTX0NMT1NFRCxcclxuICBQT1NfU1RBVFVTX0NBTkNFTEVELFxyXG4gIFBPU19TVEFUVVNfRVJST1IsXHJcbiAgT1JERVJfU1RBVFVTX05FVyxcclxuICBPUkRFUl9TVEFUVVNfT1BFTixcclxuICBPUkRFUl9TVEFUVVNfQ0xPU0VELFxyXG4gIE9SREVSX1NUQVRVU19DQU5DRUxFRCxcclxuICBPUkRFUl9TVEFUVVNfRVJST1JcclxufSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvc3RhdHVzXCI7XHJcblxyXG5jb25zdCBUUkFERVNfT1JERVJfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UcmFkZXMuT3JkZXJcIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgbW9kZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTZXJ2aWNlIHJ1biBtb2RlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtcImJhY2t0ZXN0XCIsIFwiZW11bGF0b3JcIiwgXCJyZWFsdGltZVwiXVxyXG4gICAgfSxcclxuICAgIHBvc2l0aW9uSWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSBQb3NpdGlvbiBJZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgdHJhZGVySWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBUcmFkZXIgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgcm9ib3RJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcImludFwiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICB1c2VySWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcInV1aWRcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYWR2aXNlcklkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFkdmlzZXIgdGFzayBJZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgb3JkZXJJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIE9yZGVyIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgIHNpZ25hbElkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgU2luZ2xlIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcclxuICAgIG9yZGVyVHlwZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciB0eXBlLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtPUkRFUl9UWVBFX0xJTUlULCBPUkRFUl9UWVBFX01BUktFVCwgT1JERVJfVFlQRV9TVE9QXSxcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBwcmljZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBpbiBxdW90ZSBjdXJyZW5jeS5cIixcclxuICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgfSxcclxuICAgIHZvbHVtZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciBwbGFubmVkIHZvbHVtZS5cIixcclxuICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgfSxcclxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxyXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXHJcbiAgICB0aW1lZnJhbWU6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXHJcbiAgICAgIHR5cGU6IFwiaW50XCJcclxuICAgIH0sXHJcbiAgICBjcmVhdGVkQXQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiT3JkZXIgY3JlYXRlZCB0aW1lc3RhbXAgaW4gVVRDLlwiLFxyXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcclxuICAgIH0sXHJcbiAgICBzdGF0dXM6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiT3JkZXIgc3RhdHVzLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtcclxuICAgICAgICBPUkRFUl9TVEFUVVNfTkVXLFxyXG4gICAgICAgIE9SREVSX1NUQVRVU19PUEVOLFxyXG4gICAgICAgIE9SREVSX1NUQVRVU19DTE9TRUQsXHJcbiAgICAgICAgT1JERVJfU1RBVFVTX0NBTkNFTEVELFxyXG4gICAgICAgIE9SREVSX1NUQVRVU19FUlJPUlxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAgZGlyZWN0aW9uOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk9yZGVyIGRpcmVjdGlvbi5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgdmFsdWVzOiBbT1JERVJfRElSRUNUSU9OX0JVWSwgT1JERVJfRElSRUNUSU9OX1NFTExdXHJcbiAgICB9LFxyXG4gICAgcG9zaXRpb25EaXJlY3Rpb246IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiT3JkZXIgcG9zaXRpb24gZGlyZWN0aW9uLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICB2YWx1ZXM6IFtPUkRFUl9QT1NfRElSX0VOVFJZLCBPUkRFUl9QT1NfRElSX0VYSVRdXHJcbiAgICB9LFxyXG4gICAgYWN0aW9uOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNpZ25hbCBhY3Rpb24uXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1xyXG4gICAgICAgIFRSQURFX0FDVElPTl9MT05HLFxyXG4gICAgICAgIFRSQURFX0FDVElPTl9DTE9TRV9MT05HLFxyXG4gICAgICAgIFRSQURFX0FDVElPTl9TSE9SVCxcclxuICAgICAgICBUUkFERV9BQ1RJT05fQ0xPU0VfU0hPUlRcclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIGV4SWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2Ugb3JkZXIgaWQuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgIH0sXHJcbiAgICBleFRpbWVzdGFtcDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciBjcmVhdGVkIGluIGV4Y2hhbmdlIHRpbWVzdGFtcCBVVEMuXCIsXHJcbiAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIlxyXG4gICAgfSxcclxuICAgIGV4TGFzdFRyYWRlOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk9yZGVyIGxhc3QgdHJhZGUgaW4gZXhjaGFuZ2UgdGltZXN0YW1wIFVUQy5cIixcclxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXHJcbiAgICB9LFxyXG4gICAgYXZlcmFnZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJBdmVyYWdlIGV4ZWN1dGVkIHByaWNlLlwiLFxyXG4gICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICB9LFxyXG4gICAgcmVtYWluaW5nOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRlbWFpbmluZyBhbW91bnQgdG8gZmlsbC5cIixcclxuICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgfSxcclxuICAgIGV4ZWN1dGVkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkV4ZWN1dGVkIHZvbHVtZS5cIixcclxuICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IF9wb3NpdGlvblN0ZXAgPSB7XHJcbiAgc3RhdHVzOiB7XHJcbiAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBzdGF0dXMuXCIsXHJcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgdmFsdWVzOiBbXHJcbiAgICAgIE9SREVSX1NUQVRVU19ORVcsXHJcbiAgICAgIE9SREVSX1NUQVRVU19PUEVOLFxyXG4gICAgICBPUkRFUl9TVEFUVVNfQ0xPU0VELFxyXG4gICAgICBPUkRFUl9TVEFUVVNfQ0FOQ0VMRUQsXHJcbiAgICAgIE9SREVSX1NUQVRVU19FUlJPUlxyXG4gICAgXVxyXG4gIH0sXHJcbiAgcHJpY2U6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIHByaWNlIGluIHF1b3RlIGN1cnJlbmN5LlwiLFxyXG4gICAgdHlwZTogXCJudW1iZXJcIlxyXG4gIH0sXHJcbiAgZGF0ZToge1xyXG4gICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gdGltZXN0YW1wIGluIFVUQy5cIixcclxuICAgIHR5cGU6IFwiZGF0ZXRpbWVcIlxyXG4gIH0sXHJcbiAgZXhlY3V0ZWQ6IHtcclxuICAgIGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIGV4ZWN1dGVkIHZvbHVtZS5cIixcclxuICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBUUkFERVNfUE9TSVRJT05fRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UcmFkZXMuUG9zaXRpb25cIixcclxuXHJcbiAgZGF0YVNjaGVtYToge1xyXG4gICAgcG9zaXRpb25JZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIFBvc2l0aW9uIElkLlwiLFxyXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBtb2RlOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNlcnZpY2UgcnVuIG1vZGUuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1wiYmFja3Rlc3RcIiwgXCJlbXVsYXRvclwiLCBcInJlYWx0aW1lXCJdXHJcbiAgICB9LFxyXG4gICAgdHJhZGVySWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBUcmFkZXIgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxyXG4gICAgcm9ib3RJZDoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcImludFwiLFxyXG4gICAgICBlbXB0eTogZmFsc2VcclxuICAgIH0sXHJcbiAgICB1c2VySWQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxyXG4gICAgICB0eXBlOiBcInV1aWRcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYWR2aXNlcklkOiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFkdmlzZXIgdGFzayBJZC5cIixcclxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgZW1wdHk6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXHJcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcclxuICAgIHRpbWVmcmFtZToge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcclxuICAgICAgdHlwZTogXCJpbnRcIlxyXG4gICAgfSxcclxuICAgIHN0YXR1czoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBzdGF0dXMuXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW1xyXG4gICAgICAgIFBPU19TVEFUVVNfTkVXLFxyXG4gICAgICAgIFBPU19TVEFUVVNfT1BFTixcclxuICAgICAgICBQT1NfU1RBVFVTX0NMT1NFRCxcclxuICAgICAgICBQT1NfU1RBVFVTX0NBTkNFTEVELFxyXG4gICAgICAgIFBPU19TVEFUVVNfRVJST1JcclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIGRpcmVjdGlvbjoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBkaXJlY3Rpb24uXCIsXHJcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgIHZhbHVlczogW09SREVSX0RJUkVDVElPTl9CVVksIE9SREVSX0RJUkVDVElPTl9TRUxMXVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gb3B0aW9ucy5cIixcclxuICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBzZXR0aW5ncy5cIixcclxuICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgcHJvcHM6IFRSQURFUl9TRVRUSU5HU1xyXG4gICAgfSxcclxuICAgIGVudHJ5OiB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIGVudHJ5LlwiLFxyXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxyXG4gICAgICBwcm9wczogX3Bvc2l0aW9uU3RlcFxyXG4gICAgfSxcclxuICAgIGV4aXQ6IHtcclxuICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gZXhpdC5cIixcclxuICAgICAgdHlwZTogXCJvYmplY3RcIixcclxuICAgICAgcHJvcHM6IF9wb3NpdGlvblN0ZXBcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBUUkFERVNfT1JERVJfRVZFTlQsIFRSQURFU19QT1NJVElPTl9FVkVOVCB9O1xyXG4iLCJjb25zdCBMT0dfTUFSS0VUV0FUQ0hFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLk1hcmtldHdhdGNoZXIuTG9nXCJcclxufTtcclxuXHJcbmNvbnN0IExPR19DQU5ETEVCQVRDSEVSX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouQ2FuZGxlYmF0Y2hlci5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX0lNUE9SVEVSX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouSW1wb3J0ZXIuTG9nXCJcclxufTtcclxuXHJcbmNvbnN0IExPR19BRFZJU0VSX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouQWR2aXNlci5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX1RSQURFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlRyYWRlci5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX0JBQ0tURVNURVJfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5CYWNrdGVzdGVyLkxvZ1wiXHJcbn07XHJcblxyXG5jb25zdCBMT0dfQkFDS1RFU1RfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5CYWNrdGVzdC5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX0VYV0FUQ0hFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLkV4d2F0Y2hlci5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX1VTRVJST0JPVF9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLlVzZXJSb2JvdC5Mb2dcIlxyXG59O1xyXG5cclxuY29uc3QgTE9HX0NPTlRST0xfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5Db250cm9sLkxvZ1wiXHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIExPR19BRFZJU0VSX0VWRU5ULFxyXG4gIExPR19DQU5ETEVCQVRDSEVSX0VWRU5ULFxyXG4gIExPR19JTVBPUlRFUl9FVkVOVCxcclxuICBMT0dfTUFSS0VUV0FUQ0hFUl9FVkVOVCxcclxuICBMT0dfVFJBREVSX0VWRU5ULFxyXG4gIExPR19CQUNLVEVTVEVSX0VWRU5ULFxyXG4gIExPR19CQUNLVEVTVF9FVkVOVCxcclxuICBMT0dfRVhXQVRDSEVSX0VWRU5ULFxyXG4gIExPR19VU0VSUk9CT1RfRVZFTlQsXHJcbiAgTE9HX0NPTlRST0xfRVZFTlRcclxufTtcclxuIiwiY29uc3QgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLk1hcmtldHdhdGNoZXIuRXJyb3JcIlxyXG59O1xyXG5cclxuY29uc3QgRVJST1JfQ0FORExFQkFUQ0hFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLkNhbmRsZWJhdGNoZXIuRXJyb3JcIlxyXG59O1xyXG5cclxuY29uc3QgRVJST1JfSU1QT1JURVJfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5JbXBvcnRlci5FcnJvclwiXHJcbn07XHJcblxyXG5jb25zdCBFUlJPUl9BRFZJU0VSX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouQWR2aXNlci5FcnJvclwiXHJcbn07XHJcblxyXG5jb25zdCBFUlJPUl9UUkFERVJfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5UcmFkZXIuRXJyb3JcIlxyXG59O1xyXG5cclxuY29uc3QgRVJST1JfQkFDS1RFU1RFUl9FVkVOVCA9IHtcclxuICBldmVudFR5cGU6IFwiQ1BaLkJhY2t0ZXN0ZXIuRXJyb3JcIlxyXG59O1xyXG5cclxuY29uc3QgRVJST1JfQkFDS1RFU1RfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5CYWNrdGVzdC5FcnJvclwiXHJcbn07XHJcblxyXG5jb25zdCBFUlJPUl9FWFdBVENIRVJfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5FeHdhdGNoZXIuRXJyb3JcIlxyXG59O1xyXG5cclxuY29uc3QgRVJST1JfVVNFUlJPQk9UX0VWRU5UID0ge1xyXG4gIGV2ZW50VHlwZTogXCJDUFouVXNlclJvYm90LkVycm9yXCJcclxufTtcclxuXHJcbmNvbnN0IEVSUk9SX0NPTlRST0xfRVZFTlQgPSB7XHJcbiAgZXZlbnRUeXBlOiBcIkNQWi5Db250cm9sLkVycm9yXCJcclxufTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgRVJST1JfQURWSVNFUl9FVkVOVCxcclxuICBFUlJPUl9DQU5ETEVCQVRDSEVSX0VWRU5ULFxyXG4gIEVSUk9SX0lNUE9SVEVSX0VWRU5ULFxyXG4gIEVSUk9SX01BUktFVFdBVENIRVJfRVZFTlQsXHJcbiAgRVJST1JfVFJBREVSX0VWRU5ULFxyXG4gIEVSUk9SX0JBQ0tURVNURVJfRVZFTlQsXHJcbiAgRVJST1JfQkFDS1RFU1RfRVZFTlQsXHJcbiAgRVJST1JfRVhXQVRDSEVSX0VWRU5ULFxyXG4gIEVSUk9SX1VTRVJST0JPVF9FVkVOVCxcclxuICBFUlJPUl9DT05UUk9MX0VWRU5UXHJcbn07XHJcbiIsImltcG9ydCB7IElNUE9SVEVSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXNcIjtcclxuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5UXHJcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2ltcG9ydGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgW0lNUE9SVEVSX1NFUlZJQ0VdOiBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke0lNUE9SVEVSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXHJcbiAgICAgIGxvY2FsUG9ydDogODEwNSxcclxuICAgICAgdHlwZXM6IFtcclxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVC5ldmVudFR5cGVcclxuICAgICAgXVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuIiwiaW1wb3J0IHsgTUFSS0VUV0FUQ0hFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzXCI7XHJcbmltcG9ydCB7IFRBU0tTX1RPUElDIH0gZnJvbSBcIi4vdG9waWNzXCI7XHJcbmltcG9ydCB7XHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVCxcclxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVUJTQ1JJQkVfRVZFTlQsXHJcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9tYXJrZXR3YXRjaGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgW01BUktFVFdBVENIRVJfU0VSVklDRV06IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogYCR7TUFSS0VUV0FUQ0hFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXHJcbiAgICAgIHRvcGljOiBUQVNLU19UT1BJQyxcclxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxyXG4gICAgICBsb2NhbFBvcnQ6IDgxMDIsXHJcbiAgICAgIHR5cGVzOiBbXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QX0VWRU5ULmV2ZW50VHlwZSxcclxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVC5ldmVudFR5cGVcclxuICAgICAgXVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuIiwiaW1wb3J0IHsgVFJBREVSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXNcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19UT1BJQyxcclxuICBDQU5ETEVTX1RPUElDLFxyXG4gIFNJR05BTFNfVE9QSUMsXHJcbiAgVElDS1NfVE9QSUNcclxufSBmcm9tIFwiLi90b3BpY3NcIjtcclxuaW1wb3J0IHtcclxuICBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQsXHJcbiAgVEFTS1NfVFJBREVSX1NUT1BfRVZFTlQsXHJcbiAgVEFTS1NfVFJBREVSX1VQREFURV9FVkVOVFxyXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy90cmFkZXJcIjtcclxuaW1wb3J0IHsgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvY2FuZGxlcy9jYW5kbGVzXCI7XHJcbmltcG9ydCB7IFRJQ0tTX05FV1RJQ0tfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvdGlja3MvdGlja3NcIjtcclxuaW1wb3J0IHsgU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvc2lnbmFscy9zaWduYWxzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgW1RSQURFUl9TRVJWSUNFXTogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBgJHtUUkFERVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxyXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXHJcbiAgICAgIHVybDogXCIvYXBpL3Rhc2tFdmVudHNcIixcclxuICAgICAgbG9jYWxQb3J0OiA4MTA2LFxyXG4gICAgICB0eXBlczogW1xyXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXHJcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxyXG4gICAgICAgIFRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQuZXZlbnRUeXBlXHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke0NBTkRMRVNfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IENBTkRMRVNfVE9QSUMsXHJcbiAgICAgIHVybDogXCIvYXBpL2NhbmRsZUV2ZW50c1wiLFxyXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXHJcbiAgICAgIHR5cGVzOiBbQ0FORExFU19ORVdDQU5ETEVfRVZFTlQuZXZlbnRUeXBlXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogYCR7VFJBREVSX1NFUlZJQ0V9LSR7VElDS1NfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFRJQ0tTX1RPUElDLFxyXG4gICAgICB1cmw6IFwiL2FwaS90aWNrRXZlbnRzXCIsXHJcbiAgICAgIGxvY2FsUG9ydDogODEwNixcclxuICAgICAgdHlwZXM6IFtUSUNLU19ORVdUSUNLX0VWRU5ULmV2ZW50VHlwZV1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke1NJR05BTFNfVE9QSUN9YCxcclxuICAgICAgdG9waWM6IFNJR05BTFNfVE9QSUMsXHJcbiAgICAgIHVybDogXCIvYXBpL3NpZ25hbEV2ZW50c1wiLFxyXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXHJcbiAgICAgIHR5cGVzOiBbU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQuZXZlbnRUeXBlXVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuIiwiaW1wb3J0ICogYXMgbXNSZXN0QXp1cmUgZnJvbSBcIkBhenVyZS9tcy1yZXN0LW5vZGVhdXRoXCI7XHJcbmltcG9ydCB7IEV2ZW50R3JpZE1hbmFnZW1lbnRDbGllbnQgfSBmcm9tIFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIjtcclxuaW1wb3J0IHsgY2hlY2tFbnZWYXJzIH0gZnJvbSBcImNwelV0aWxzL2Vudmlyb25tZW50XCI7XHJcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XHJcbmltcG9ydCB7XHJcbiAgZW5kcG9pbnRzIGFzIGV2ZW50RW5kcG9pbnRzLFxyXG4gIHRvcGljc1xyXG59IGZyb20gXCJjcHpDb25maWcvZXZlbnRzL2VuZHBvaW50c1wiO1xyXG5pbXBvcnQgeyBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UgfSBmcm9tIFwiY3B6U2VydmljZXNcIjtcclxuXHJcbmRvdGVudi5jb25maWcoKTtcclxuY2hlY2tFbnZWYXJzKFtcclxuICBcIk1BTkFHRV9BUFBfSURcIixcclxuICBcIk1BTkFHRV9BUFBfS0VZXCIsXHJcbiAgXCJBRF9ESVJFQ1RPUllfSURcIixcclxuICBcIlNVQlNSSVBUSU9OX0lEXCIsXHJcbiAgXCJSRVNPVVJTRV9HUk9VUFwiLFxyXG4gIFwiU1RPUkFHRVwiXHJcbl0pO1xyXG5jb25zdCB7XHJcbiAgTUFOQUdFX0FQUF9JRCxcclxuICBNQU5BR0VfQVBQX0tFWSxcclxuICBBRF9ESVJFQ1RPUllfSUQsXHJcbiAgU1VCU1JJUFRJT05fSUQsXHJcbiAgUkVTT1VSU0VfR1JPVVAsXHJcbiAgU1RPUkFHRVxyXG59ID0gcHJvY2Vzcy5lbnY7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRDbGllbnQoKSB7XHJcbiAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCBtc1Jlc3RBenVyZS5sb2dpbldpdGhTZXJ2aWNlUHJpbmNpcGFsU2VjcmV0KFxyXG4gICAgTUFOQUdFX0FQUF9JRCxcclxuICAgIE1BTkFHRV9BUFBfS0VZLFxyXG4gICAgQURfRElSRUNUT1JZX0lEXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgRUdNQ2xpZW50ID0gbmV3IEV2ZW50R3JpZE1hbmFnZW1lbnRDbGllbnQoY3JlZGVudGlhbHMsIFNVQlNSSVBUSU9OX0lEKTtcclxuICByZXR1cm4gRUdNQ2xpZW50O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZVN1YihcclxuICBFR01DbGllbnQsXHJcbiAgeyB0b3BpYywgdG9waWNOYW1lLCBzZXJ2aWNlTmFtZSwgc3ViTmFtZSwgZW5kcG9pbnRVcmwsIGV2ZW50VHlwZXMgfVxyXG4pIHtcclxuICBjb25zdCBzY29wZSA9IGAvc3Vic2NyaXB0aW9ucy8ke1NVQlNSSVBUSU9OX0lEfS9yZXNvdXJjZUdyb3Vwcy8ke1JFU09VUlNFX0dST1VQfS9wcm92aWRlcnMvTWljcm9zb2Z0LkV2ZW50R3JpZC90b3BpY3MvJHt0b3BpY05hbWV9YDtcclxuICBjb25zdCBwcm9wZXJ0aWVzID0ge1xyXG4gICAgZGVhZExldHRlckRlc3RpbmF0aW9uOiB7XHJcbiAgICAgIGVuZHBvaW50VHlwZTogXCJTdG9yYWdlQmxvYlwiLFxyXG4gICAgICBibG9iQ29udGFpbmVyTmFtZTogYGVnLSR7dG9waWN9LWRlYWRgLFxyXG4gICAgICByZXNvdXJjZUlkOiBgL3N1YnNjcmlwdGlvbnMvJHtTVUJTUklQVElPTl9JRH0vcmVzb3VyY2VHcm91cHMvJHtSRVNPVVJTRV9HUk9VUH0vcHJvdmlkZXJzL21pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy8ke1NUT1JBR0V9YFxyXG4gICAgfSxcclxuICAgIGRlc3RpbmF0aW9uOiB7XHJcbiAgICAgIGVuZHBvaW50VHlwZTogXCJXZWJIb29rXCIsXHJcbiAgICAgIGVuZHBvaW50VXJsXHJcbiAgICB9LFxyXG4gICAgZmlsdGVyOiB7XHJcbiAgICAgIGluY2x1ZGVkRXZlbnRUeXBlczpcclxuICAgICAgICBzZXJ2aWNlTmFtZSA9PT0gRVZFTlRTX0xPR0dFUl9TRVJWSUNFID8gbnVsbCA6IGV2ZW50VHlwZXNcclxuICAgIH0sXHJcbiAgICByZXRyeVBvbGljeToge1xyXG4gICAgICBldmVudFRpbWVUb0xpdmVJbk1pbnV0ZXM6IDYwLFxyXG4gICAgICBtYXhEZWxpdmVyeUF0dGVtcHRzOiAxMFxyXG4gICAgfSxcclxuICAgIGV2ZW50RGVsaXZlcnlTY2hlbWE6IFwiRXZlbnRHcmlkU2NoZW1hXCJcclxuICB9O1xyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEVHTUNsaWVudC5ldmVudFN1YnNjcmlwdGlvbnMuY3JlYXRlT3JVcGRhdGUoXHJcbiAgICBzY29wZSxcclxuICAgIHN1Yk5hbWUsXHJcbiAgICBwcm9wZXJ0aWVzXHJcbiAgKTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVTdWIoRUdNQ2xpZW50LCB0b3BpY05hbWUsIHN1Yk5hbWUpIHtcclxuICBjb25zdCBzY29wZSA9IGAvc3Vic2NyaXB0aW9ucy8ke1NVQlNSSVBUSU9OX0lEfS9yZXNvdXJjZUdyb3Vwcy8ke1JFU09VUlNFX0dST1VQfS9wcm92aWRlcnMvTWljcm9zb2Z0LkV2ZW50R3JpZC90b3BpY3MvJHt0b3BpY05hbWV9YDtcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBFR01DbGllbnQuZXZlbnRTdWJzY3JpcHRpb25zLmRlbGV0ZU1ldGhvZChcclxuICAgIHNjb3BlLFxyXG4gICAgc3ViTmFtZVxyXG4gICk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gbGlzdFN1YnMoRUdNQ2xpZW50LCB0b3BpY05hbWUpIHtcclxuICBjb25zdCBsaXN0ID0gYXdhaXQgRUdNQ2xpZW50LmV2ZW50U3Vic2NyaXB0aW9ucy5saXN0QnlSZXNvdXJjZShcclxuICAgIFJFU09VUlNFX0dST1VQLFxyXG4gICAgXCJNaWNyb3NvZnQuRXZlbnRHcmlkXCIsXHJcbiAgICBcInRvcGljc1wiLFxyXG4gICAgdG9waWNOYW1lXHJcbiAgKTtcclxuICBjb25zdCBzdWJzID0gW107XHJcbiAgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICBsaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIHN1YnMucHVzaCh7XHJcbiAgICAgICAgbmFtZTogZWxlbWVudC5uYW1lLFxyXG4gICAgICAgIHVybDogZWxlbWVudC5kZXN0aW5hdGlvbi5lbmRwb2ludEJhc2VVcmwsXHJcbiAgICAgICAgZmlsdGVyOiBlbGVtZW50LmZpbHRlcixcclxuICAgICAgICBzdGF0dXM6IGVsZW1lbnQucHJvdmlzaW9uaW5nU3RhdGVcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIHN1YnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgU3Vic2NyaXB0aW9uIEVuZHBvaW50IFVybFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZU5hbWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3N0Zml4XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGlrZXlcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmNvbnN0IGNyZWF0ZUVuZHBvaW50VXJsID0gKHNlcnZpY2VOYW1lLCBlbnZpcm9ubWVudCwgcG9zdGZpeCwgYXBpa2V5KSA9PlxyXG4gIGBodHRwczovL2Nwei0ke3NlcnZpY2VOYW1lfS0ke2Vudmlyb25tZW50fS5henVyZXdlYnNpdGVzLm5ldCR7cG9zdGZpeH0/YXBpLWtleT0ke2FwaWtleX1gO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBFdmVudCBHcmlkIFRvcGljIE5hbWVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHRvcGljTmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52aXJvbm1lbnRcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmNvbnN0IGNyZWF0ZVRvcGljTmFtZSA9ICh0b3BpY05hbWUsIGVudmlyb25tZW50KSA9PlxyXG4gIGBjcHotJHt0b3BpY05hbWV9LSR7ZW52aXJvbm1lbnR9YDtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgU3Vic2NyaXB0aW9ucyBMaXN0IGZyb20gZ2xvYmFsIGNvbmZpZ3VyYXRpb25cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIHsgZXJyb3I6IFt7IG5hbWU6ICdldmVudHNsb2dnZXItZXJyb3InLFxyXG4gKiAgICAgICAgICAgICB0b3BpYzogJ2Vycm9yJyxcclxuICogICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9jcHotZXZlbnRzbG9nZ2VyLXByb2QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2V2ZW50cycsXHJcbiAqICAgICAgICAgICAgIHR5cGVzOiBbXCJDUFouQWR2aXNlci5FcnJvclwiLFwiQ1BaLkJhY2t0ZXN0ZXIuRXJyb3JcIl0sXHJcbiAqICAgICAgICAgICAgIHRvcGljTmFtZTogJ2Nwei1lcnJvci1wcm9kJyB9XX1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbnNMaXN0KGVudmlyb25tZW50LCBhcGlrZXkpIHtcclxuICBsZXQgYWxsRW5kcG9pbnRzID0gW107XHJcbiAgT2JqZWN0LmtleXMoZXZlbnRFbmRwb2ludHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGFsbEVuZHBvaW50cyA9IFtcclxuICAgICAgLi4ubmV3IFNldChbXHJcbiAgICAgICAgLi4uZXZlbnRFbmRwb2ludHNba2V5XS5tYXAoZW5kcG9pbnQgPT4gKHtcclxuICAgICAgICAgIC4uLmVuZHBvaW50LFxyXG4gICAgICAgICAgdG9waWNOYW1lOiBjcmVhdGVUb3BpY05hbWUoZW5kcG9pbnQudG9waWMsIGVudmlyb25tZW50KSxcclxuICAgICAgICAgIHVybDogY3JlYXRlRW5kcG9pbnRVcmwoa2V5LCBlbnZpcm9ubWVudCwgZW5kcG9pbnQudXJsLCBhcGlrZXkpLFxyXG4gICAgICAgICAgc2VydmljZU5hbWU6IGtleVxyXG4gICAgICAgIH0pKSxcclxuICAgICAgICAuLi5hbGxFbmRwb2ludHNcclxuICAgICAgXSlcclxuICAgIF07XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGVuZHBvaW50cyA9IHt9O1xyXG4gIHRvcGljcy5mb3JFYWNoKHRvcGljID0+IHtcclxuICAgIGVuZHBvaW50c1t0b3BpY10gPSBhbGxFbmRwb2ludHMuZmlsdGVyKFxyXG4gICAgICBlbmRwb2ludCA9PiBlbmRwb2ludC50b3BpYyA9PT0gdG9waWNcclxuICAgICk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGVuZHBvaW50cztcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9ucyhjbGllbnQsIHN1YnNjcmlwdGlvbnMpIHtcclxuICB0cnkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cclxuICAgIGZvciAoY29uc3Qgc3Vic2NyaXB0aW9uIG9mIHN1YnNjcmlwdGlvbnMpIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYENyZWF0aW5nICR7c3Vic2NyaXB0aW9uLnRvcGljTmFtZX0gLSAke3N1YnNjcmlwdGlvbi5uYW1lfSBzdWIgdG8gJHtcclxuICAgICAgICAgIHN1YnNjcmlwdGlvbi51cmxcclxuICAgICAgICB9YFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBjcmVhdGVPclVwZGF0ZVN1YihjbGllbnQsIHtcclxuICAgICAgICAgIHRvcGljOiBzdWJzY3JpcHRpb24udG9waWMsXHJcbiAgICAgICAgICB0b3BpY05hbWU6IHN1YnNjcmlwdGlvbi50b3BpY05hbWUsXHJcbiAgICAgICAgICBzZXJ2aWNlTmFtZTogc3Vic2NyaXB0aW9uLnNlcnZpY2VOYW1lLFxyXG4gICAgICAgICAgc3ViTmFtZTogc3Vic2NyaXB0aW9uLm5hbWUsXHJcbiAgICAgICAgICBlbmRwb2ludFVybDogc3Vic2NyaXB0aW9uLnVybCxcclxuICAgICAgICAgIGV2ZW50VHlwZXM6IHN1YnNjcmlwdGlvbi50eXBlc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbi5uYW1lLCBcIm9rXCIpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tYXdhaXQtaW4tbG9vcCAgKi9cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIGdldENsaWVudCxcclxuICBjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCxcclxuICBjcmVhdGVTdWJzY3JpcHRpb25zLFxyXG4gIGRlbGV0ZVN1YixcclxuICBsaXN0U3Vic1xyXG59O1xyXG4iLCIvKipcclxuICogQ2hlY2tzIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1tzdHJpbmddfSBsaXN0XHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja0VudlZhcnMobGlzdCkge1xyXG4gIGlmICghbGlzdCB8fCAhQXJyYXkuaXNBcnJheShsaXN0KSB8fCBsaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gIGNvbnN0IG1pc3NpbmdWYXJzID0gbGlzdC5maWx0ZXIodmFyaWFibGUgPT4gIXByb2Nlc3MuZW52W3ZhcmlhYmxlXSk7XHJcbiAgaWYgKG1pc3NpbmdWYXJzLmxlbmd0aCA+IDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgYEVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nVmFycy5qb2luKFwiLCBcIil9IHJlcXVpcmVkIWBcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBjaGVja0VudlZhcnMgfTtcclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhcmlhYmxlczogW1xyXG4gICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcclxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxyXG4gICAgXCJBWl9TVE9SQUdFX1RSQURFX0NTXCIsXHJcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXHJcbiAgICBcIkFQSV9LRVlcIixcclxuICAgIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfVEFTS1NfS0VZXCIsXHJcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19MT0dfS0VZXCIsXHJcbiAgICBcIkVHX1NJR05BTFNfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfU0lHTkFMU19LRVlcIixcclxuICAgIFwiREVCVUdcIlxyXG4gIF1cclxufTtcclxuIiwiaW1wb3J0IGFkdmlzZXIgZnJvbSBcIi4vYWR2aXNlclwiO1xyXG5pbXBvcnQgYmFja3Rlc3RlciBmcm9tIFwiLi9iYWNrdGVzdGVyXCI7XHJcbmltcG9ydCBjYW5kbGViYXRjaGVyIGZyb20gXCIuL2NhbmRsZWJhdGNoZXJcIjtcclxuaW1wb3J0IGNvbm5lY3RvciBmcm9tIFwiLi9jb25uZWN0b3JcIjtcclxuaW1wb3J0IGNvbnRyb2wgZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgZXZlbnRzbG9nZ2VyIGZyb20gXCIuL2V2ZW50c2xvZ2dlclwiO1xyXG5pbXBvcnQgaW1wb3J0ZXIgZnJvbSBcIi4vaW1wb3J0ZXJcIjtcclxuaW1wb3J0IG1hcmtldHdhdGNoZXIgZnJvbSBcIi4vbWFya2V0d2F0Y2hlclwiO1xyXG5pbXBvcnQgdHJhZGVyIGZyb20gXCIuL3RyYWRlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGFkdmlzZXIsXHJcbiAgYmFja3Rlc3RlcixcclxuICBjYW5kbGViYXRjaGVyLFxyXG4gIGNvbm5lY3RvcixcclxuICBjb250cm9sLFxyXG4gIGV2ZW50c2xvZ2dlcixcclxuICBpbXBvcnRlcixcclxuICBtYXJrZXR3YXRjaGVyLFxyXG4gIHRyYWRlclxyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgdmFyaWFibGVzOiBbXHJcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcclxuICAgIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcclxuICAgIFwiQVpfU1RPUkFHRV9UUkFERV9DU1wiLFxyXG4gICAgXCJBWl9TVE9SQUdFX0JBQ0tURVNURVJfQ1NcIixcclxuICAgIFwiQVBJX0tFWVwiLFxyXG4gICAgXCJFR19UQVNLU19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19UQVNLU19LRVlcIixcclxuICAgIFwiRUdfTE9HX0VORFBPSU5UXCIsXHJcbiAgICBcIkVHX0xPR19LRVlcIixcclxuICAgIFwiREJfQVBJX0VORFBPSU5UXCIsXHJcbiAgICBcIkRCX0FQSV9BQ0NFU1NfS0VZXCIsXHJcbiAgICBcIkRFQlVHXCJcclxuICBdXHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICB2YXJpYWJsZXM6IFtcclxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXHJcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcclxuICAgIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcclxuICAgIFwiQVBJX0tFWVwiLFxyXG4gICAgXCJFR19UQVNLU19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19UQVNLU19LRVlcIixcclxuICAgIFwiRUdfTE9HX0VORFBPSU5UXCIsXHJcbiAgICBcIkVHX0xPR19LRVlcIixcclxuICAgIFwiRUdfQ0FORExFU19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19DQU5ETEVTX0tFWVwiLFxyXG4gICAgXCJEQl9BUElfRU5EUE9JTlRcIixcclxuICAgIFwiREJfQVBJX0FDQ0VTU19LRVlcIixcclxuICAgIFwiQ09OTkVDVE9SX0FQSV9FTkRQT0lOVFwiLFxyXG4gICAgXCJDT05ORUNUT1JfQVBJX0tFWVwiXHJcbiAgXVxyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgdmFyaWFibGVzOiBbXHJcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxyXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXHJcbiAgICBcIkFQSV9LRVlcIixcclxuICAgIFwiUFJPWFlfRU5EUE9JTlRcIixcclxuICAgIFwiS0VZX1ZBVUxUX1VSTFwiLFxyXG4gICAgXCJLRVlfVkFVTFRfUkVBRF9DTElFTlRfSURcIixcclxuICAgIFwiS0VZX1ZBVUxUX1JFQURfQVBQX1NFQ1JFVFwiLFxyXG4gICAgXCJLRVlfVkFVTFRfREVDUl9DTElFTlRfSURcIixcclxuICAgIFwiS0VZX1ZBVUxUX0RFQ1JfQVBQX1NFQ1JFVFwiXHJcbiAgXVxyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgdmFyaWFibGVzOiBbXHJcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxyXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXHJcbiAgICBcIkFaX1NUT1JBR0VfQ09OVFJPTF9DU1wiLFxyXG4gICAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxyXG4gICAgXCJBWl9TVE9SQUdFX1RSQURFX0NTXCIsXHJcbiAgICBcIkFaX1NUT1JBR0VfQkFDS1RFU1RFUl9DU1wiLFxyXG4gICAgXCJBUElfS0VZXCIsXHJcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXHJcbiAgICBcIkVHX1RBU0tTX0tFWVwiLFxyXG4gICAgXCJFR19MT0dfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfTE9HX0tFWVwiLFxyXG4gICAgXCJEQl9BUElfRU5EUE9JTlRcIixcclxuICAgIFwiREJfQVBJX0FDQ0VTU19LRVlcIlxyXG4gIF1cclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhcmlhYmxlczogW1xyXG4gICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcclxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxyXG4gICAgXCJBWl9TVE9SQUdFX0VWRU5UX0NTXCIsXHJcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXHJcbiAgICBcIkVHX0VNVUxBVE9SX01PREVcIixcclxuICAgIFwiTE9HX1RBQkxFX1NUT1JBR0VcIixcclxuICAgIFwiTE9HX1BPU1RHUkVcIixcclxuICAgIFwiREJfQVBJX0VORFBPSU5UXCIsXHJcbiAgICBcIkRCX0FQSV9BQ0NFU1NfS0VZXCIsXHJcbiAgICBcIkFQSV9LRVlcIlxyXG4gIF1cclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhcmlhYmxlczogW1xyXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXHJcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXHJcbiAgICBcIkFQSV9LRVlcIixcclxuICAgIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfVEFTS1NfS0VZXCIsXHJcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19MT0dfS0VZXCIsXHJcbiAgICBcIkRCX0FQSV9FTkRQT0lOVFwiLFxyXG4gICAgXCJEQl9BUElfQUNDRVNTX0tFWVwiLFxyXG4gICAgXCJDT05ORUNUT1JfQVBJX0VORFBPSU5UXCIsXHJcbiAgICBcIkNPTk5FQ1RPUl9BUElfS0VZXCIsXHJcbiAgICBcIkRFQlVHXCJcclxuICBdXHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICB2YXJpYWJsZXM6IFtcclxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxyXG4gICAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxyXG4gICAgXCJBUElfS0VZXCIsXHJcbiAgICBcIlBST1hZX0VORFBPSU5UXCIsXHJcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXHJcbiAgICBcIkVHX1RBU0tTX0tFWVwiLFxyXG4gICAgXCJFR19MT0dfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfTE9HX0tFWVwiLFxyXG4gICAgXCJFR19USUNLU19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19USUNLU19LRVlcIixcclxuICAgIFwiREVCVUdcIlxyXG4gIF1cclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhcmlhYmxlczogW1xyXG4gICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcclxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxyXG4gICAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxyXG4gICAgXCJBWl9TVE9SQUdFX1RSQURFX0NTXCIsXHJcbiAgICBcIkFQSV9LRVlcIixcclxuICAgIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfVEFTS1NfS0VZXCIsXHJcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19MT0dfS0VZXCIsXHJcbiAgICBcIkVHX1RSQURFU19FTkRQT0lOVFwiLFxyXG4gICAgXCJFR19UUkFERVNfS0VZXCIsXHJcbiAgICBcIkVHX1NJR05BTFNfRU5EUE9JTlRcIixcclxuICAgIFwiRUdfU0lHTkFMU19LRVlcIixcclxuICAgIFwiQ09OTkVDVE9SX0FQSV9FTkRQT0lOVFwiLFxyXG4gICAgXCJDT05ORUNUT1JfQVBJX0tFWVwiXHJcbiAgXVxyXG59O1xyXG4iLCJpbXBvcnQgZW52VmFycyBmcm9tIFwiY3B6RW52XCI7XHJcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XHJcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHsgc2V0U2VjcmV0IH0gZnJvbSBcImNwektleVZhdWx0XCI7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcbmNvbnN0IHtcclxuICBLRVlfVkFVTFRfVVJMLFxyXG4gIEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXHJcbiAgS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVRcclxufSA9IHByb2Nlc3MuZW52O1xyXG5cclxuZnVuY3Rpb24gbG9hZEVudkZpbGUoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGVudkZpbGUgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhcImVudmxpc3QuanNvblwiKSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIkZvdW5kIGVudmxpc3QuanNvblwiKTtcclxuICAgIHJldHVybiBlbnZGaWxlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk5vIGN1cnJlbnQgZW52IGxpc3QgZmlsZVwiKTtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZWYXJzTGlzdCgpIHtcclxuICBsZXQgZW52RmlsZSA9IGxvYWRFbnZGaWxlKCk7XHJcblxyXG4gIGlmICghZW52RmlsZSkgZW52RmlsZSA9IHt9O1xyXG5cclxuICBPYmplY3Qua2V5cyhlbnZWYXJzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBpZiAoIWVudkZpbGVba2V5XSkgZW52RmlsZVtrZXldID0ge307XHJcbiAgICBlbnZWYXJzW2tleV0udmFyaWFibGVzLmZvckVhY2godmFyaWFibGUgPT4ge1xyXG4gICAgICBpZiAoIWVudkZpbGVba2V5XVt2YXJpYWJsZV0pIGVudkZpbGVba2V5XVt2YXJpYWJsZV0gPSBcIlwiO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCByZWR1bmRhbnRWYXJzID0gT2JqZWN0LmtleXMoZW52RmlsZVtrZXldKS5maWx0ZXIoXHJcbiAgICAgIHZhcmlhYmxlID0+ICFlbnZWYXJzW2tleV0udmFyaWFibGVzLmluY2x1ZGVzKHZhcmlhYmxlKVxyXG4gICAgKTtcclxuICAgIHJlZHVuZGFudFZhcnMuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XHJcbiAgICAgIGRlbGV0ZSBlbnZGaWxlW2tleV1bdmFyaWFibGVdO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGZzLndyaXRlRmlsZVN5bmMoXCJlbnZsaXN0Lmpzb25cIiwgSlNPTi5zdHJpbmdpZnkoZW52RmlsZSkpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzZXRTZWNyZXRFbnZWYXJzKGVudmlyb25tZW50KSB7XHJcbiAgY29uc3QgZW52RmlsZSA9IGxvYWRFbnZGaWxlKCk7XHJcbiAgaWYgKCFlbnZGaWxlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkNyZWF0ZSBlbnZsaXN0Lmpzb24gZmlyc3RcIiwgXCJlbnYgY3JlYXRlIGxpc3RcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IGVudlNldFJlc3VsdCA9IHsgLi4uZW52RmlsZSB9O1xyXG4gIGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgT2JqZWN0LmtleXMoZW52RmlsZSkubWFwKGFzeW5jIGtleSA9PiB7XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICAgIE9iamVjdC5rZXlzKGVudkZpbGVba2V5XSkubWFwKGFzeW5jIHZhcmlhYmxlID0+IHtcclxuICAgICAgICAgIGNvbnN0IHNlY3JldE5hbWUgPSBgJHtrZXl9LSR7dmFyaWFibGV9LSR7ZW52aXJvbm1lbnR9YC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAvXy9nLFxyXG4gICAgICAgICAgICBcIi1cIlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHNlY3JldE5hbWUpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZW52RmlsZVtrZXldW3ZhcmlhYmxlXSk7XHJcbiAgICAgICAgICBhd2FpdCBzZXRTZWNyZXQoe1xyXG4gICAgICAgICAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXHJcbiAgICAgICAgICAgIGNsaWVudElkOiBLRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lELFxyXG4gICAgICAgICAgICBhcHBTZWNyZXQ6IEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVULFxyXG4gICAgICAgICAgICBzZWNyZXRWYWx1ZTogZW52RmlsZVtrZXldW3ZhcmlhYmxlXSxcclxuICAgICAgICAgICAgc2VjcmV0TmFtZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBlbnZTZXRSZXN1bHRba2V5XVt2YXJpYWJsZV0gPSBzZWNyZXROYW1lO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIGZzLndyaXRlRmlsZVN5bmMoXCJlbnZzZXRyZXN1bHQuanNvblwiLCBKU09OLnN0cmluZ2lmeShlbnZTZXRSZXN1bHQpKTtcclxufVxyXG5cclxuZXhwb3J0IHsgZ2VuZXJhdGVFbnZWYXJzTGlzdCwgc2V0U2VjcmV0RW52VmFycyB9O1xyXG4iLCJpbXBvcnQgVm9ycGFsIGZyb20gXCJ2b3JwYWxcIjtcclxuXHJcbmltcG9ydCB7IHNhdmVBUElLZXlzIH0gZnJvbSBcIi4va2V5VmF1bHRcIjtcclxuaW1wb3J0IHsgY3JlYXRlU3VicyB9IGZyb20gXCIuL2V2ZW50R3JpZFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVFbnZMaXN0LCB1cGRhdGVFbnZWYXJzIH0gZnJvbSBcIi4vZW52dmFyc1wiO1xyXG5cclxuY29uc3Qgdm9ycGFsID0gbmV3IFZvcnBhbCgpO1xyXG52b3JwYWxcclxuICAuY29tbWFuZChcclxuICAgIFwia3Ygc2F2ZSBhcGkta2V5cyA8QVBJS2V5PiA8QVBJU2VjcmV0PlwiLFxyXG4gICAgXCJFbmNyeXB0IGFuZCBzYXZlIEV4Y2hhbmdlIEFQSSBLZXlzIHRvIEtleSBWYXVsdC5cIlxyXG4gIClcclxuICAub3B0aW9uKFwiLXUsIC0tdXNlciA8dXNlcklkPlwiLCBcIlVzZSB1c2VySWQgYXMgbmFtZVwiKVxyXG4gIC5vcHRpb24oXCItcywgLS1zcGFyZVwiLCBcIlNhdmUgc3BhcmUga2V5cy5cIilcclxuICAub3B0aW9uKFxyXG4gICAgXCItLUFQSUtleUVuY3JLZXlOYW1lIDxBUElLZXlFbmNyS2V5TmFtZT5cIixcclxuICAgIFwiRW5jcnlwdGlvbiBrZXkgbmFtZSBmb3IgQVBJIEtleS5cIlxyXG4gIClcclxuICAub3B0aW9uKFxyXG4gICAgXCItLUFQSVNlY3JldEVuY3JLZXlOYW1lIDxBUElTZWNyZXRFbmNyS2V5TmFtZT5cIixcclxuICAgIFwiRW5jcnlwdGlvbiBrZXkgbmFtZSBmb3IgQVBJIFNlY3JldC5cIlxyXG4gIClcclxuICAub3B0aW9uKFxyXG4gICAgXCItLUFQSUtleVNlY3JldE5hbWUgPEFQSUtleVNlY3JldE5hbWU+XCIsXHJcbiAgICBcIk5hbWUgb2Ygc2VjcmV0IGZvciBBUEkgS2V5LlwiXHJcbiAgKVxyXG4gIC5vcHRpb24oXHJcbiAgICBcIi0tQVBJU2VjcmV0U2VjcmV0TmFtZSA8QVBJU2VjcmV0U2VjcmV0TmFtZT5cIixcclxuICAgIFwiTmFtZSBvZiBzZWNyZXQgZm9yIEFQSSBTZWNyZXQuXCJcclxuICApXHJcbiAgLmFjdGlvbihzYXZlQVBJS2V5cyk7XHJcblxyXG52b3JwYWwuY29tbWFuZChcImVnIGNyZWF0ZSBzdWJzIDxFbnY+IDxBUElLZXk+XCIpLmFjdGlvbihjcmVhdGVTdWJzKTtcclxudm9ycGFsLmNvbW1hbmQoXCJlbnYgY3JlYXRlIGxpc3RcIikuYWN0aW9uKGNyZWF0ZUVudkxpc3QpO1xyXG52b3JwYWwuY29tbWFuZChcImVudiB1cGRhdGUgPEVudj5cIikuYWN0aW9uKHVwZGF0ZUVudlZhcnMpO1xyXG52b3JwYWwuZGVsaW1pdGVyKFwiY3B6JFwiKS5zaG93KCk7XHJcbiIsImltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tIFwidXVpZFwiO1xyXG5pbXBvcnQgeyBlbmNyeXB0QW5kU2F2ZSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzYXZlQVBJS2V5cyhhcmdzKSB7XHJcbiAgdGhpcy5sb2coYXJncyk7XHJcbiAgY29uc3QgeyBBUElLZXksIEFQSVNlY3JldCB9ID0gYXJncztcclxuICBjb25zdCB7XHJcbiAgICB1c2VyLFxyXG4gICAgc3BhcmUsXHJcbiAgICBBUElLZXlFbmNyS2V5TmFtZSxcclxuICAgIEFQSVNlY3JldEVuY3JLZXlOYW1lLFxyXG4gICAgQVBJS2V5U2VjcmV0TmFtZSxcclxuICAgIEFQSVNlY3JldFNlY3JldE5hbWVcclxuICB9ID0gYXJncy5vcHRpb25zO1xyXG5cclxuICBjb25zdCBpbmZvID0ge1xyXG4gICAgQVBJS2V5OiB7fSxcclxuICAgIEFQSVNlY3JldDoge31cclxuICB9O1xyXG4gIGlmICh1c2VyKSB7XHJcbiAgICBpbmZvLkFQSUtleS5lbmNyeXB0aW9uS2V5TmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcclxuICAgIGluZm8uQVBJU2VjcmV0LmVuY3J5cHRpb25LZXlOYW1lID0gdXNlci50b1N0cmluZygpO1xyXG4gICAgaW5mby5BUElLZXkubmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcclxuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUgPSB1c2VyLnRvU3RyaW5nKCk7XHJcbiAgfVxyXG4gIGluZm8uQVBJS2V5LmVuY3J5cHRpb25LZXlOYW1lID1cclxuICAgIEFQSUtleUVuY3JLZXlOYW1lIHx8IGluZm8uQVBJS2V5LmVuY3J5cHRpb25LZXlOYW1lIHx8IHV1aWQoKTtcclxuICBpbmZvLkFQSVNlY3JldC5lbmNyeXB0aW9uS2V5TmFtZSA9XHJcbiAgICBBUElTZWNyZXRFbmNyS2V5TmFtZSB8fCBpbmZvLkFQSVNlY3JldC5lbmNyeXB0aW9uS2V5TmFtZSB8fCB1dWlkKCk7XHJcbiAgaW5mby5BUElLZXkubmFtZSA9IEFQSUtleVNlY3JldE5hbWUgfHwgaW5mby5BUElLZXkubmFtZSB8fCB1dWlkKCk7XHJcbiAgaW5mby5BUElTZWNyZXQubmFtZSA9IEFQSVNlY3JldFNlY3JldE5hbWUgfHwgaW5mby5BUElTZWNyZXQubmFtZSB8fCB1dWlkKCk7XHJcbiAgaW5mby5BUElLZXkudmVyc2lvbiA9IGF3YWl0IGVuY3J5cHRBbmRTYXZlKFxyXG4gICAgaW5mby5BUElLZXkuZW5jcnlwdGlvbktleU5hbWUsXHJcbiAgICBpbmZvLkFQSUtleS5uYW1lLFxyXG4gICAgQVBJS2V5XHJcbiAgKTtcclxuICBpbmZvLkFQSVNlY3JldC52ZXJzaW9uID0gYXdhaXQgZW5jcnlwdEFuZFNhdmUoXHJcbiAgICBpbmZvLkFQSVNlY3JldC5lbmNyeXB0aW9uS2V5TmFtZSxcclxuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUsXHJcbiAgICBBUElTZWNyZXRcclxuICApO1xyXG5cclxuICBjb25zdCBrZXlzID0ge307XHJcbiAgaWYgKHNwYXJlKSB7XHJcbiAgICBrZXlzLnNwYXJlID0gaW5mbztcclxuICB9IGVsc2Uge1xyXG4gICAga2V5cy5tYWluID0gaW5mbztcclxuICB9XHJcblxyXG4gIHRoaXMubG9nKEpTT04uc3RyaW5naWZ5KGtleXMpKTtcclxufVxyXG5cclxuZXhwb3J0IHsgc2F2ZUFQSUtleXMgfTtcclxuIiwiaW1wb3J0IHtcclxuICBnZXRDbGllbnQsXHJcbiAgY3JlYXRlU3Vic2NyaXB0aW9uc0xpc3QsXHJcbiAgY3JlYXRlU3Vic2NyaXB0aW9uc1xyXG59IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTdWJzKGFyZ3MpIHtcclxuICB0aGlzLmxvZyhcImNyZWF0ZVN1YnNcIiwgYXJncyk7XHJcbiAgdGhpcy5sb2coXCJDcmVhdGluZyBFdmVudCBHcmlkIHN1YnNjcmlwdGlvbnMgZm9yIGVudmlyb25tZW50XCIsIGFyZ3MuRW52KTtcclxuICBjb25zdCBFR01DbGllbnQgPSBhd2FpdCBnZXRDbGllbnQoKTtcclxuICB0aGlzLmxvZyhcIkNvbm5lY3RlZCB0byBBenVyZSFcIik7XHJcbiAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGNyZWF0ZVN1YnNjcmlwdGlvbnNMaXN0KGFyZ3MuRW52LCBhcmdzLkFQSUtleSk7XHJcbiAgLyogdGhpcy5sb2coXHJcbiAgICBcIlN1YnNjcmlwdGlvbnMgbGlzdFwiLFxyXG5cclxuICAgIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpLm1hcChcclxuICAgICAga2V5ID0+IGAke2tleX06ICR7c3Vic2NyaXB0aW9uc1trZXldLm1hcChzdWIgPT4gc3ViLm5hbWUpLmpvaW4oXCIsIFwiKX1gXHJcbiAgICApXHJcbiAgKTsgKi9cclxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tYXdhaXQtaW4tbG9vcCAqL1xyXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpKSB7XHJcbiAgICBjb25zdCB0b3BpY1N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zW2tleV07XHJcbiAgICB0aGlzLmxvZyhcclxuICAgICAgYENyZWF0aW5nIFwiJHtrZXl9XCIgc3Vic2NyaXB0aW9uc2AsXHJcbiAgICAgIHRvcGljU3Vic2NyaXB0aW9ucy5tYXAoc3ViID0+IHN1Yi5uYW1lKS5qb2luKFwiLCBcIilcclxuICAgICk7XHJcbiAgICBhd2FpdCBjcmVhdGVTdWJzY3JpcHRpb25zKEVHTUNsaWVudCwgdG9waWNTdWJzY3JpcHRpb25zKTtcclxuICB9XHJcbiAgLyogbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cclxufVxyXG5leHBvcnQgeyBjcmVhdGVTdWJzIH07XHJcbiIsImltcG9ydCB7IGdlbmVyYXRlRW52VmFyc0xpc3QsIHNldFNlY3JldEVudlZhcnMgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW52TGlzdChhcmdzKSB7XHJcbiAgdGhpcy5sb2coXCJjcmVhdGVFbnZMaXN0XCIsIGFyZ3MpO1xyXG4gIGdlbmVyYXRlRW52VmFyc0xpc3QoKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRW52VmFycyhhcmdzKSB7XHJcbiAgdGhpcy5sb2coXCJ1cGRhdGVFbnZWYXJzXCIsIGFyZ3MpO1xyXG4gIGF3YWl0IHNldFNlY3JldEVudlZhcnMoYXJncy5FbnYpO1xyXG59XHJcblxyXG5leHBvcnQgeyBjcmVhdGVFbnZMaXN0LCB1cGRhdGVFbnZWYXJzIH07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBhenVyZS9hcm0tZXZlbnRncmlkXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBhenVyZS9tcy1yZXN0LW5vZGVhdXRoXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFkYWwtbm9kZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhenVyZS1rZXl2YXVsdFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkb3RlbnYtc2FmZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dWlkXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInZlcnJvclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ2b3JwYWxcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==