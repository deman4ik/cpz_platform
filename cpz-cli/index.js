require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),n=r.n(a),s=r("uuid"),o=r("verror"),i=r.n(o),c=r("azure-keyvault"),p=r.n(c),d=r("adal-node");var l=function(e,t){try{const r=(r,a)=>new d.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new p.a.KeyVaultClient(new p.a.KeyVaultCredentials(r))}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var u=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const n=l(t,r),s={keySize:4096,keyOps:["encrypt","decrypt"]},o=await n.createKey(e,a,"RSA",s);return p.a.parseKeyIdentifier(o.key.kid)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var y=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:n,keyVersion:s=""}){try{const o=l(t,r),c=await o.encrypt(e,n,s,"RSA-OAEP",Buffer.from(a));return JSON.stringify(c.result)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var P=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:n}){try{const s=l(t,r),o=await s.setSecret(e,n,a);return p.a.parseSecretIdentifier(o.id)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},m=r("dotenv-safe"),k=r.n(m);k.a.config();const{KEY_VAULT_URL:S,KEY_VAULT_WRITE_CLIENT_ID:v,KEY_VAULT_WRITE_APP_SECRET:g}=process.env;async function C(e,t,r){await u({uri:S,clientId:v,appSecret:g,keyName:e});const a=await y({uri:S,clientId:v,appSecret:g,value:r,keyName:e});return(await P({uri:S,clientId:v,appSecret:g,secretValue:a,secretName:t})).version}var I=r("ms-rest-azure"),f=r.n(I),A=r("azure-arm-eventgrid"),E=r.n(A);const b={type:"object",description:"Error object if something goes wrong.",optional:!0,props:{name:{description:"Error name.",type:"string",empty:!1},message:{description:"Error message.",type:"string",empty:!1},info:{description:"Error details.",type:"object",optional:!0}}},h={debug:{description:"Debug mode.",type:"boolean",optional:!0},proxy:{description:"Proxy endpoint.",type:"string",optional:!0,empty:!1},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"number",integer:!0,optional:!0}},T={debug:{description:"Debug mode.",type:"boolean",optional:!0},strategyParameters:{description:"Strategy parameters.",type:"object",optional:!0},requiredHistoryCache:{description:"Load history data from cache.",type:"boolean",optional:!0,default:!0},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"number",integer:!0,optional:!0}},Z={encryptionKeyName:{description:"Name of encryption key",type:"string"},name:{description:"Secret name",type:"string"},version:{description:"Secret version",type:"string"}},K={mode:{description:"Service run mode.",type:"string",values:["emulator","realtime"],optional:!0},debug:{description:"Debug mode.",type:"boolean",optional:!0},slippageStep:{description:"Price Slippage Step.",type:"number",optional:!0},deviation:{description:"Price deviation",type:"number",optional:!0},volume:{description:"User trade volume",type:"number",optional:!0},multiPosition:{description:"Multiple active positions available.",type:"boolean",optional:!0},keys:{description:"Exchange API Keys Info",type:"object",props:{main:{description:"Main Exchange API Keys Info",type:"object",props:{APIKey:{description:"Main Exchange API Key",type:"object",props:Z},APISecret:{description:"Main Exchange API Secret",type:"object",props:Z}}},spare:{description:"Spare Exchange API Keys Info",type:"object",props:{APIKey:{description:"Spare Exchange API Key",type:"object",props:Z},APISecret:{description:"Spare Exchange API Secret",type:"object",props:Z}},optional:!0}},optional:!0}},w="CPZ.Tasks.Adviser.Start",N="CPZ.Tasks.Adviser.Stop",x="CPZ.Tasks.Adviser.Update",_="CPZ.Tasks.Adviser.Started",j="CPZ.Tasks.Adviser.Stopped",O="CPZ.Tasks.Adviser.Updated",U="CPZ.Candles.NewCandle";const M="CPZ.Tasks.Backtester.Start",R="CPZ.Tasks.Backtester.Stop",L="CPZ.Tasks.Backtester.Started",B="CPZ.Tasks.Backtester.Stopped",z="CPZ.Tasks.Backtester.Finished";const D="CPZ.Tasks.Candlebatcher.Start",$="CPZ.Tasks.Candlebatcher.Stop",q="CPZ.Tasks.Candlebatcher.Update",V="CPZ.Tasks.Candlebatcher.Started",G="CPZ.Tasks.Candlebatcher.Stopped",F="CPZ.Tasks.Candlebatcher.Updated";const H="CPZ.Tasks.Marketwatcher.Start",Y="CPZ.Tasks.Marketwatcher.Stop",W="CPZ.Tasks.Marketwatcher.Subscribe",J="CPZ.Tasks.Marketwatcher.Unsubscribe",Q="CPZ.Tasks.Marketwatcher.Started",X="CPZ.Tasks.Marketwatcher.Updated",ee="CPZ.Tasks.Importer.Start",te="CPZ.Tasks.Importer.Stop",re="CPZ.Tasks.Importer.Started",ae="CPZ.Tasks.Importer.Stoppped",ne="CPZ.Tasks.Importer.Finished",se="CPZ.Tasks.Exwatcher.Started",oe="CPZ.Tasks.Exwatcher.Stopped";const ie="CPZ.Tasks.Trader.Start",ce="CPZ.Tasks.Trader.Stop",pe="CPZ.Tasks.Trader.Update",de="CPZ.Signals.NewSignal",le="CPZ.Ticks.NewTick";const ue={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",types:[w,N,x]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",types:[U]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",types:[M,R]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",types:[D,$,q]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/taskEvents",types:[Q,H,X,V,G,F,re,ae,ne,_,j,O,L,B,z,se,oe]}]},...{eventslogger:[{name:"eventslogger-tasks",topic:"tasks",url:"/api/events",types:[w,N,x,_,j,O,M,R,L,B,z,D,$,q,V,G,F,ee,te,re,ae,ne,H,Y,W,J,Q,"CPZ.Tasks.Marketwatcher.Stopped",X,ie,ce,pe,"CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished",se,oe,"CPZ.Tasks.UserRobot.Started","CPZ.Tasks.UserRobot.Stopped","CPZ.Tasks.UserRobot.Updated"]},{name:"eventslogger-candles",topic:"candles",url:"/api/events",types:[U,"CPZ.Candles.Handled"]},{name:"eventslogger-signals",topic:"signals",url:"/api/events",types:[de,"CPZ.Signals.Handled"]},{name:"eventslogger-ticks",topic:"ticks",url:"/api/events",types:[le,"CPZ.Ticks.Handled"]},{name:"eventslogger-trades",topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:"eventslogger-log",topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:"eventslogger-error",topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",types:[ee,te]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",types:[H,Y,W,J]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",types:[ie,ce,pe]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",types:[U]},{name:"trader-ticks",topic:"ticks",url:"/api/candleEvents",types:[le]},{name:"trader-signals",topic:"signals",url:"/api/candleEvents",types:[de]}]}},ye=["tasks","candles","ticks","signals","trades","log","error"];k.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP"]);const{MANAGE_APP_ID:Pe,MANAGE_APP_KEY:me,AD_DIRECTORY_ID:ke,SUBSRIPTION_ID:Se,RESOURSE_GROUP:ve}=process.env;const ge=(e,t,r)=>`https://cpz-${e}-${t}.azurewebsites.net${r}`,Ce=(e,t)=>`cpz-${e}-${t}`;async function Ie(e,t){try{return await Promise.all(t.map(async t=>(async function(e,t,r,a,n){const s=`/subscriptions/${Se}/resourceGroups/${ve}/providers/Microsoft.EventGrid/topics/${t}`,o={destination:{endpointType:"WebHook",endpointUrl:a},filter:{includedEventTypes:n},eventDeliverySchema:"EventGridSchema"};return await e.eventSubscriptions.createOrUpdate(s,r,o)})(e,t.topicName,t.name,t.url)))}catch(e){throw e}}const fe=new n.a;fe.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:n,APIKeyEncrKeyName:o,APISecretEncrKeyName:i,APIKeySecretName:c,APISecretSecretName:p}=e.options,d={APIKey:{},APISecret:{}};a&&(d.APIKey.encryptionKeyName=a.toString(),d.APISecret.encryptionKeyName=a.toString(),d.APIKey.name=a.toString(),d.APISecret.name=a.toString()),d.APIKey.encryptionKeyName=o||d.APIKey.encryptionKeyName||Object(s.v4)(),d.APISecret.encryptionKeyName=i||d.APISecret.encryptionKeyName||Object(s.v4)(),d.APIKey.name=c||d.APIKey.name||Object(s.v4)(),d.APISecret.name=p||d.APISecret.name||Object(s.v4)(),d.APIKey.version=await C(d.APIKey.encryptionKeyName,d.APIKey.name,t),d.APISecret.version=await C(d.APISecret.encryptionKeyName,d.APISecret.name,r);const l={};n?l.spare=d:l.main=d,this.log(JSON.stringify(l))}),fe.command("eg create subs <Env>").action(async function(e){this.log("createSubs",e);const t=e.environment;this.log("Creating Event Grid subscriptions for environment",t);const r=await async function(){const e=await f.a.loginWithServicePrincipalSecret(Pe,me,ke);return new E.a(e,Se)}();this.log("Connected to Azure!");const a=function(e){let t=[];Object.keys(ue).forEach(r=>{t=[...new Set([...ue[r].map(t=>({...t,topicName:Ce(t.topic,e),url:ge(r,e,t.url)})),...t])]});const r={};return ye.forEach(e=>{r[e]=t.filter(t=>t.topic===e)}),r}(t);this.log("Subscriptions list",Object.keys(a).map(e=>`${e}: ${a[e].map(e=>e.name).join(", ")}`));for(const e of Object.keys(a)){const t=a[e];this.log(`Creating "${e}" subscriptions...`);const n=await Ie(r,t);this.log(n)}}),fe.delimiter("cpz$").show()},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-arm-eventgrid":function(e,t){e.exports=require("azure-arm-eventgrid")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},"ms-rest-azure":function(e,t){e.exports=require("ms-rest-azure")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,