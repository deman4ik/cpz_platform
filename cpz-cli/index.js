require("source-map-support").install(),module.exports=function(r){var e={};function t(n){if(e[n])return e[n].exports;var E=e[n]={i:n,l:!1,exports:{}};return r[n].call(E.exports,E,E.exports,t),E.l=!0,E.exports}return t.m=r,t.c=e,t.d=function(r,e,n){t.o(r,e)||Object.defineProperty(r,e,{enumerable:!0,get:n})},t.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},t.t=function(r,e){if(1&e&&(r=t(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var E in r)t.d(n,E,function(e){return r[e]}.bind(null,E));return n},t.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(e,"a",e),e},t.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},t.p="",t(t.s="./src/index.js")}({"./src/index.js":function(r,e,t){"use strict";t.r(e);var n={};t.r(n),t.d(n,"KEY_VAULT_ERROR",function(){return Mt}),t.d(n,"NOT_IMPLEMENTED_ERROR",function(){return wt}),t.d(n,"UNKNOWN_ERROR",function(){return Yt}),t.d(n,"RETRY_ERROR",function(){return Ft}),t.d(n,"DB_ERROR",function(){return xt}),t.d(n,"VALIDATION_ERROR",function(){return Wt}),t.d(n,"LOG_ERROR",function(){return $t}),t.d(n,"MAILER_ERROR",function(){return jt}),t.d(n,"ADVISER_ERROR",function(){return i}),t.d(n,"ADVISER_NOT_FOUND_ERROR",function(){return u}),t.d(n,"ADVISER_TASKS_EVENTS_ERROR",function(){return T}),t.d(n,"ADVISER_CANDLES_EVENTS_ERROR",function(){return d}),t.d(n,"ADVISER_TICKS_EVENTS_ERROR",function(){return A}),t.d(n,"ADVISER_TIMER_ERROR",function(){return O}),t.d(n,"ADVISER_HANDLE_RUN_ERROR",function(){return C}),t.d(n,"ADVISER_HANDLE_CANDLE_ERROR",function(){return S}),t.d(n,"ADVISER_HANDLE_TICK_ERROR",function(){return N}),t.d(n,"ADVISER_START_ERROR",function(){return l}),t.d(n,"ADVISER_STOP_ERROR",function(){return P}),t.d(n,"ADVISER_UPDATE_ERROR",function(){return I}),t.d(n,"ADVISER_PAUSE_ERROR",function(){return f}),t.d(n,"ADVISER_RESUME_ERROR",function(){return p}),t.d(n,"ADVISER_ACTION_TIMER_ERROR",function(){return D}),t.d(n,"ADVISER_LOAD_ACTIONS_ERROR",function(){return L}),t.d(n,"ADVISER_EVENTS_PUBLISH_ERROR",function(){return k}),t.d(n,"ADVISER_EVENT_PUBLISH_ERROR",function(){return v}),t.d(n,"ADVISER_EXECUTE_EXCEPTION",function(){return m}),t.d(n,"ADVISER_EXECUTE_ERROR",function(){return K}),t.d(n,"ADVISER_INDICATOR_ERROR",function(){return h}),t.d(n,"ADVISER_STRATEGY_ERROR",function(){return B}),t.d(n,"ADVISER_ACTIONS_ERROR",function(){return b}),t.d(n,"ADVISER_SET_ERROR_ERROR",function(){return y}),t.d(n,"ADVISER_SAVE_STATE_ERROR",function(){return G}),t.d(n,"ADVISER_SAVE_STRATEGY_STATE_ERROR",function(){return g}),t.d(n,"ADVISER_SAVE_INDICATORS_STATE_ERROR",function(){return U}),t.d(n,"ADVISER_LOAD_CANDLES_ERROR",function(){return Z}),t.d(n,"ADVISER_LOAD_STRATEGY_ERROR",function(){return V}),t.d(n,"ADVISER_LOAD_STRATEGY_STATE_ERROR",function(){return H}),t.d(n,"ADVISER_LOAD_INDICATOR_ERROR",function(){return w}),t.d(n,"ADVISER_LOAD_INDICATORS_ERROR",function(){return M}),t.d(n,"ADVISER_LOAD_INDICATORS_STATE_ERROR",function(){return Y}),t.d(n,"ADVISER_CREATE_LOCKFILE_ERROR",function(){return F}),t.d(n,"ADVISER_DEL_LOCKFILE_ERROR",function(){return x}),t.d(n,"ADVISER_LOCK_ERROR",function(){return W}),t.d(n,"ADVISER_UNLOCK_ERROR",function(){return $}),t.d(n,"ADVISER_RENEW_LOCK_ERROR",function(){return j}),t.d(n,"ADVISER_GET_UNLOCKED_ERROR",function(){return z}),t.d(n,"ADVISER_CHECK_LOCKED_ERROR",function(){return X}),t.d(n,"API_ERROR",function(){return J}),t.d(n,"AUTH_JWT_ERROR",function(){return q}),t.d(n,"AUTH_ERROR",function(){return Q}),t.d(n,"UNAUTHENTICATED",function(){return rr}),t.d(n,"BACKTESTER_NOT_FOUND_ERROR",function(){return tr}),t.d(n,"BACKTESTER_ALREADY_STARTED",function(){return er}),t.d(n,"BACKTESTER_ERROR",function(){return nr}),t.d(n,"BACKTEST_HISTORY_RANGE_ERROR",function(){return Er}),t.d(n,"CANDLEBATCHER_NOT_FOUND_ERROR",function(){return Rr}),t.d(n,"CANDLEBATCHER_ERROR",function(){return or}),t.d(n,"CANDLEBATCHER_TASKS_EVENTS_ERROR",function(){return ar}),t.d(n,"CANDLEBATCHER_TIMER_ERROR",function(){return _r}),t.d(n,"CANDLEBATCHER_HANDLE_RUN_ERROR",function(){return sr}),t.d(n,"CANDLEBATCHER_START_ERROR",function(){return cr}),t.d(n,"CANDLEBATCHER_STOP_ERROR",function(){return ir}),t.d(n,"CANDLEBATCHER_UPDATE_ERROR",function(){return ur}),t.d(n,"CANDLEBATCHER_PAUSE_ERROR",function(){return Tr}),t.d(n,"CANDLEBATCHER_RESUME_ERROR",function(){return dr}),t.d(n,"CANDLEBATCHER_ACTION_TIMER_ERROR",function(){return Ar}),t.d(n,"CANDLEBATCHER_LOAD_ACTIONS_ERROR",function(){return Or}),t.d(n,"CANDLEBATCHER_EVENTS_PUBLISH_ERROR",function(){return Cr}),t.d(n,"CANDLEBATCHER_EVENT_PUBLISH_ERROR",function(){return Sr}),t.d(n,"CANDLEBATCHER_EXECUTE_EXCEPTION",function(){return Nr}),t.d(n,"CANDLEBATCHER_EXECUTE_ERROR",function(){return lr}),t.d(n,"CANDLEBATCHER_LOAD_CANDLE_ERROR",function(){return Pr}),t.d(n,"CANDLEBATCHER_LOAD_CANDLES_ERROR",function(){return Ir}),t.d(n,"CANDLEBATCHER_CREATE_CANDLE_ERROR",function(){return fr}),t.d(n,"CANDLEBATCHER_SAVE_CANDLES_ERROR",function(){return pr}),t.d(n,"CANDLEBATCHER_SAVE_CANDLE_ERROR",function(){return Dr}),t.d(n,"CANDLEBATCHER_CLEAR_TICKS_ERROR",function(){return Lr}),t.d(n,"CANDLEBATCHER_CLEAN_CACHED_CANDLES_ERROR",function(){return kr}),t.d(n,"CANDLEBATCHER_SET_ERROR_ERROR",function(){return vr}),t.d(n,"CANDLEBATCHER_SAVE_STATE_ERROR",function(){return mr}),t.d(n,"CANDLEBATCHER_CREATE_LOCKFILE_ERROR",function(){return Kr}),t.d(n,"CANDLEBATCHER_DEL_LOCKFILE_ERROR",function(){return hr}),t.d(n,"CANDLEBATCHER_LOCK_ERROR",function(){return Br}),t.d(n,"CANDLEBATCHER_UNLOCK_ERROR",function(){return br}),t.d(n,"CANDLEBATCHER_RENEW_LOCK_ERROR",function(){return yr}),t.d(n,"CANDLEBATCHER_GET_UNLOCKED_ERROR",function(){return Gr}),t.d(n,"CANDLEBATCHER_CHECK_LOCKED_ERROR",function(){return gr}),t.d(n,"CONNECTOR_ERROR",function(){return Ur}),t.d(n,"CONNECTOR_CLIENT_ERROR",function(){return Zr}),t.d(n,"CONNECTOR_API_ERROR",function(){return Vr}),t.d(n,"CONNECTOR_LOAD_API_KEYS_ERROR",function(){return Hr}),t.d(n,"CONNECTOR_LOAD_DECR_SECR_ERROR",function(){return wr}),t.d(n,"CONNECTOR_INIT_PR_PROVIDER_ERROR",function(){return Mr}),t.d(n,"CONNECTOR_INIT_PUBLIC_PROVIDER_ERROR",function(){return Yr}),t.d(n,"CONNECTOR_EXCHANGE_ERROR",function(){return Fr}),t.d(n,"ADVISER_RUNNER_ERROR",function(){return xr}),t.d(n,"BACKTESTER_RUNNER_ERROR",function(){return jr}),t.d(n,"BACKTEST_RUNNER_ERROR",function(){return zr}),t.d(n,"TRADER_RUNNER_ERROR",function(){return Wr}),t.d(n,"USER_ROBOT_RUNNER_ERROR",function(){return $r}),t.d(n,"IMPORTER_RUNNER_ERROR",function(){return Xr}),t.d(n,"MARKETWATCHER_RUNNER_ERROR",function(){return Jr}),t.d(n,"CANDLEBATCHER_RUNNER_ERROR",function(){return qr}),t.d(n,"CONTROL_API_ERROR",function(){return Ee}),t.d(n,"CONTROL_ERROR",function(){return Re}),t.d(n,"CONTROL_EVENT_PUBLISH_ERROR",function(){return oe}),t.d(n,"CONTROL_EVENTS_PUBLISH_ERROR",function(){return ae}),t.d(n,"EX_WATCHER_RUNNER_ERROR",function(){return Qr}),t.d(n,"CONTROL_TASK_RUNNER_ERROR",function(){return _e}),t.d(n,"CONTROL_HANDLE_EVENT_ERROR",function(){return se}),t.d(n,"CONTROL_DELETE_STATE_ERROR",function(){return ce}),t.d(n,"EX_WATCHER_NOT_FOUND_ERROR",function(){return re}),t.d(n,"EX_WATCHER_ERROR",function(){return ee}),t.d(n,"USER_ROBOT_NOT_FOUND_ERROR",function(){return te}),t.d(n,"BACKTEST_NOT_FOUND_ERROR",function(){return ne}),t.d(n,"EVENTGRID_CONFIG_ERROR",function(){return ue}),t.d(n,"EVENTGRID_PUBLISH_ERROR",function(){return ie}),t.d(n,"EVENTSLOGGER_HANDLE_EVENT_ERROR",function(){return Te}),t.d(n,"EVENTSLOGGER_LOG_EVENT_ERROR",function(){return de}),t.d(n,"IMPORTER_ERROR",function(){return Ae}),t.d(n,"IMPORTER_TASKS_EVENTS_ERROR",function(){return Oe}),t.d(n,"IMPORTER_HANDLE_GAPS_ERROR",function(){return Ce}),t.d(n,"IMPORTER_BATCH_CANDLES_ERROR",function(){return Se}),t.d(n,"IMPORTER_SAVE_CANDLES_ERROR",function(){return Ne}),t.d(n,"IMPORTER_CLEAR_TEMP_ERROR",function(){return le}),t.d(n,"IMPORTER_SAVE_STATE_ERROR",function(){return Pe}),t.d(n,"IMPORTER_LOAD_CANDLES_ERROR",function(){return Ie}),t.d(n,"MARKETWATCHER_NOT_FOUND_ERROR",function(){return fe}),t.d(n,"MARKETWATCHER_ERROR",function(){return pe}),t.d(n,"MARKETWATCHER_SOCKET_ERROR",function(){return me}),t.d(n,"MARKETWATCHER_TASKS_EVENTS_ERROR",function(){return De}),t.d(n,"MARKETWATCHER_PUBLISH_TICK_ERROR",function(){return Le}),t.d(n,"MARKETWATCHER_SAVE_CANDLE_ERROR",function(){return ve}),t.d(n,"MARKETWATCHER_SAVE_TICK_ERROR",function(){return ke}),t.d(n,"ROBOT_ERROR",function(){return Be}),t.d(n,"ROBOT_RUNNER_ERROR",function(){return Ke}),t.d(n,"ROBOT_NOT_FOUND_ERROR",function(){return he}),t.d(n,"TABLE_STORAGE_ENTITY_MUTATION_ERROR",function(){return be}),t.d(n,"TABLE_STORAGE_CONFIG_ERROR",function(){return Ge}),t.d(n,"TABLE_STORAGE_ERROR",function(){return ye}),t.d(n,"TASK_ERROR",function(){return Ue}),t.d(n,"TASK_RUNNER_ERROR",function(){return ge}),t.d(n,"TRADER_HANDLE_SIGNAL_ERROR",function(){return Me}),t.d(n,"TRADER_HANDLE_ORDERS_ERROR",function(){return we}),t.d(n,"TRADER_NOT_FOUND_ERROR",function(){return xe}),t.d(n,"TRADER_EXECUTE_ORDER_ERROR",function(){return He}),t.d(n,"TRADER_CHECK_PRICE_ERROR",function(){return Fe}),t.d(n,"TRADER_START_ERROR",function(){return We}),t.d(n,"TRADER_UPDATE_ERROR",function(){return $e}),t.d(n,"TRADER_PAUSE_ERROR",function(){return ze}),t.d(n,"TRADER_RESUME_ERROR",function(){return Xe}),t.d(n,"TRADER_STOP_ERROR",function(){return je}),t.d(n,"TRADER_SET_ERROR_ERROR",function(){return Je}),t.d(n,"TRADER_ERROR",function(){return Ze}),t.d(n,"TRADER_TICKS_EVENTS_ERROR",function(){return qe}),t.d(n,"TRADER_CANDLES_EVENTS_ERROR",function(){return Qe}),t.d(n,"TRADER_SIGNALS_EVENTS_ERROR",function(){return et}),t.d(n,"TRADER_TASKS_EVENTS_ERROR",function(){return tt}),t.d(n,"TRADER_IDLE_TIMER_ERROR",function(){return nt}),t.d(n,"TRADER_ACTION_TIMER_ERROR",function(){return Et}),t.d(n,"TRADER_PRICES_EVENTS_ERROR",function(){return rt}),t.d(n,"TRADER_CLOSE_ACTIVE_POSITIONS_ERROR",function(){return Rt}),t.d(n,"TRADER_CREATE_POSITION_ERROR",function(){return ot}),t.d(n,"TRADER_CLOSE_POSITION_ERROR",function(){return at}),t.d(n,"TRADER_SAVE_STATE_ERROR",function(){return _t}),t.d(n,"TRADER_EVENTS_PUBLISH_ERROR",function(){return st}),t.d(n,"TRADER_EVENT_PUBLISH_ERROR",function(){return ct}),t.d(n,"TRADER_LOAD_ACTIONS_ERROR",function(){return it}),t.d(n,"TRADER_EXECUTE_EXCEPTION",function(){return ut}),t.d(n,"TRADER_EXECUTE_ERROR",function(){return Ve}),t.d(n,"TRADER_HANDLE_RUN_ERROR",function(){return Ye}),t.d(n,"TRADER_CREATE_LOCKFILE_ERROR",function(){return Tt}),t.d(n,"TRADER_DEL_LOCKFILE_ERROR",function(){return dt}),t.d(n,"TRADER_LOCK_ERROR",function(){return At}),t.d(n,"TRADER_UNLOCK_ERROR",function(){return Ot}),t.d(n,"TRADER_RENEW_LOCK_ERROR",function(){return Ct}),t.d(n,"TRADER_GET_UNLOCKED_ERROR",function(){return St}),t.d(n,"TRADER_CHECK_LOCKED_ERROR",function(){return Nt}),t.d(n,"TRADER_LOAD_CURRENT_PRICE_ERROR",function(){return lt}),t.d(n,"TRADER_HANDLE_CURRENT_PRICE_ERROR",function(){return Pt}),t.d(n,"TULIP_ERROR",function(){return pt}),t.d(n,"TULIP_VALIDATION_ERROR",function(){return ft}),t.d(n,"TULIP_EXECUTION_ERROR",function(){return It}),t.d(n,"TECHIND_EXECUTION_ERROR",function(){return Dt}),t.d(n,"TECHIND_VALIDATION_ERROR",function(){return Lt}),t.d(n,"TECHIND_ERROR",function(){return kt}),t.d(n,"TALIB_EXECUTION_ERROR",function(){return vt}),t.d(n,"TALIB_VALIDATION_ERROR",function(){return mt}),t.d(n,"TALIB_ERROR",function(){return Kt}),t.d(n,"BLOB_STORAGE_CONTAINER_CREATE_ERROR",function(){return ht}),t.d(n,"BLOB_STORAGE_BLOB_DELETE_ERROR",function(){return Bt}),t.d(n,"BLOB_STORAGE_BLOB_UPLOAD_ERROR",function(){return bt}),t.d(n,"BLOB_STORAGE_BLOB_DOWNLOAD_ERROR",function(){return yt}),t.d(n,"BLOB_STORAGE_BLOB_GETPROPS_ERROR",function(){return Gt}),t.d(n,"BLOB_STORAGE_BLOB_GETUNLOCKED_ERROR",function(){return gt}),t.d(n,"BLOB_STORAGE_BLOB_GETLEASEINFO_ERROR",function(){return Ut}),t.d(n,"BLOB_STORAGE_BLOB_ACQUIRELEASE_ERROR",function(){return Zt}),t.d(n,"BLOB_STORAGE_BLOB_RENEWLEASE_ERROR",function(){return Vt}),t.d(n,"BLOB_STORAGE_BLOB_RELEASELEASE_ERROR",function(){return Ht});var E=t("vorpal"),R=t.n(E),o=t("uuid"),a=t("azure-keyvault"),_=t.n(a),s=t("verror"),c=t.n(s);const i="AdviserError",u="AdviserNotFound",T="AdviserTasksEventError",d="AdviserCandlesEventError",A="AdviserTicksEventError",O="AdviserTimerError",C="AdviserHandleRunError",S="AdviserHandleCandleError",N="AdviserHandleTickError",l="AdviserStartError",P="AdviserStopError",I="AdviserUpdateError",f="AdviserPauseError",p="AdviserResumeError",D="AdviserActionTimerError",L="AdviserLoadActionsError",k="AdviserEventsPublishError",v="AdviserEventPublishError",m="AdviserExecuteException",K="AdviserExecuteError",h="AdviserIndicatorError",B="AdviserStrategyError",b="AdviserActionsError",y="AdviserSetErrorError",G="AdviserSaveStateError",g="AdviserSaveStrategyStateError",U="AdviserSaveIndicatorsStateError",Z="AdviserLoadCandlesError",V="AdviserLoadStrategyError",H="AdviserLoadStrategyStateError",w="AdviserLoadIndicatorError",M="AdviserLoadIndicatorsError",Y="AdviserLoadIndicatorsStateError",F="AdviserCreateLockFileError",x="AdviserDelLockFileError",W="AdviserLockError",$="AdviserUnlockError",j="AdviserRenewLockError",z="AdviserGetUnlockedError",X="AdviserChecLockedError",J="ApiError",q="AuthJWTError",Q="AuthError",rr="UNAUTHENTICATED",er="BacktesterAlreadyStarted",tr="BacktestNotFound",nr="BacktesterError",Er="BacktesterHistoryRangeError",Rr="CandlebatcherNotFound",or="CandlebatcherError",ar="CandlebatcherTasksEventError",_r="CandlebatcherTimerError",sr="CandlebatcherHandleRunError",cr="CandlebatcherStartError",ir="CandlebatcherStopError",ur="CandlebatcherUpdateError",Tr="CandlebatcherPauseError",dr="CandlebatcherResumeError",Ar="CandlebatcherActionTimerError",Or="CandlebatcherLoadActionsError",Cr="CandlebatcherEventsPublishError",Sr="CandlebatcherEventPublishError",Nr="CandlebatcherExecuteException",lr="CandlebatcherExecuteError",Pr="CandlebatcherLoadCandleError",Ir="CandlebatcherLoadCandlesError",fr="CandlebatcherCreateCandleError",pr="CandlebatcherSaveCandlesError",Dr="CandlebatcherSaveCandleError",Lr="CandlebatcherClearTicksError",kr="CandlebatcherCleanCachedCandlesError",vr="CandlebatcherSetErrorError",mr="CandlebatcherSaveStateError",Kr="CandlebatcherCreateLockFileError",hr="CandlebatcherDelLockFileError",Br="CandlebatcherLockError",br="CandlebatcherUnlockError",yr="CandlebatcherRenewLockError",Gr="CandlebatcherGetUnlockedError",gr="CandlebatcherChecLockedError",Ur="ConnectorError",Zr="ConnectorClientError",Vr="ConnectorAPIError",Hr="ConnectorLoadAPIKeysError",wr="ConnectorLoadAndDecryptSecretError",Mr="ConnectorInitPrivateProviderError",Yr="ConnectorInitPublicProviderError",Fr="ConnectorExchangeError",xr="AdviserRunnerError",Wr="TraderRunnerError",$r="UserRobotRunnerError",jr="BacktesterRunnerError",zr="BacktestRunnerError",Xr="ImporterRunnerError",Jr="MarketwatcherRunnerError",qr="CandlebatcherRunnerError",Qr="ExWatcherRunnerError",re="ExWatcherNotFound",ee="ExWatcherError",te="UserRobotNotFound",ne="BacktestNotFound",Ee="ControlApiError",Re="ControlError",oe="ControlEventPublishError",ae="ControlEventsPublishError",_e="ControlTaskRunnerError",se="ControlHandleEventError",ce="ControlDeleteStateError",ie="EventGridPublishError",ue="EventGridConfigError",Te="EventsLoggerHandleEventError",de="EventsLoggerLogEventError",Ae="ImporterError",Oe="ImporterTasksEventError",Ce="ImporterHandleGapsError",Se="ImporterBatchCandlesError",Ne="ImporterSaveCandlesError",le="ImporterClaerTempError",Pe="ImporterSaveStateError",Ie="ImporterLoadCandlesError",fe="MarketwatcherNotFound",pe="MarketwatcherError",De="MarketwatcherTasksEventsError",Le="MarketwatcherPublishTickError",ke="MarketwatcherSaveTickError",ve="MarketwatcherSaveCandleError",me="MarketwatcherSocketError",Ke="RobotRunnerError",he="RobotNotFound",Be="RobotError",be="TableStorageEntityMutation",ye="TableStorageError",Ge="TableStorageConfigError",ge="TaskRunnerError",Ue="TaskError",Ze="TraderError",Ve="TraderExecuteError",He="TradersExecuteOrderError",we="TraderHandleOrdersError",Me="TraderHandleSignalError",Ye="TraderHandleRunError",Fe="TraderCheckPriceError",xe="TraderNotFound",We="TraderStartError",$e="TraderUpdateError",je="TraderStopError",ze="TraderPauseError",Xe="TraderResumeError",Je="TradersSetErrorError",qe="TraderTicksEventsError",Qe="TraderCandlesEventsError",rt="TraderPricesEventsError",et="TraderSignalsEventsError",tt="TraderTasksEventsError",nt="TraderIdleTimerError",Et="TraderActionTimerError",Rt="TraderCloseActivePositionsError",ot="TraderCreatePositionError",at="TraderClosePositionError",_t="TraderSaveStateError",st="TraderEventsPublishError",ct="TraderEventPublishError",it="TraderLoadActionsError",ut="TraderExecuteException",Tt="TraderCreateLockFileError",dt="TraderDelLockFileError",At="TraderLockError",Ot="TraderUnlockError",Ct="TraderRenewLockError",St="TraderGetUnlockedError",Nt="TraderChecLockedError",lt="TraderLoadCurrentPriceError",Pt="TraderHandleCurrentPriceError",It="TulipExecutionError",ft="TulipValidationError",pt="TulipError",Dt="TechIndExecutionError",Lt="TechIndValidationError",kt="TechIndError",vt="TalibExecutionError",mt="TalibValidationError",Kt="TalibError",ht="BlobStorageContainerCreateError",Bt="BlobStorageBlobDeleteError",bt="BlobStorageBlobUploadError",yt="BlobStorageBlobDownloadError",Gt="BlobStorageBlobGetPropsError",gt="BlobStorageBlobGetUnlockedError",Ut="BlobStorageBlobGetLeaseInfoError",Zt="BlobStorageBlobAcquireLeaseError",Vt="BlobStorageBlobRenewLeaseError",Ht="BlobStorageBlobReleaseLeaseError",wt="NotImplementedError",Mt="KeyVaultError",Yt="UnknownError",Ft="RetryError",xt="DBError",Wt="ValidationError",$t="LogError",jt="MailerError",{stringify:zt}=JSON,Xt=Object.values(n),{UNKNOWN_ERROR:Jt}=n;class qt extends c.a{constructor(r={},...e){super(r,...e);const{name:t=Jt,cause:n,info:E={},$$toCheck:R=!0,$$defaultFormatPattern:o="{name}: {message}\ninfo: {info}\nstack: {stack}"}=r;this.$$defaultFormatPattern=o,R&&!Xt.includes(t)&&(this.name=Jt,this.jse_cause=new qt({name:t,cause:n,info:E,$$toCheck:!1},...e))}static get types(){return n}get fullStack(){return c.a.fullStack(this)}get info(){return c.a.info(this)}get json(){return{name:this.name,message:this.jse_shortmsg,info:this.info,stack:qt.getStack(this)}}get main(){return{name:this.name,message:this.message,info:this.info}}toString(r){const e=r?qt.$$fullStackFormatPattern:qt.$$defaultFormatPattern;return this.format(e)}static formatError(r,e=qt.$$defaultFormatPattern){return qt.isModifiedError(r)?e.replace(/{name}/g,r.name||"not enought name").replace(/{message}/g,r.jse_shortmsg||"not enought message").replace(/{stack}/g,qt.getStackNames(r)||"not enought stack").replace(/{fullStack}/g,c.a.fullStack(r)||"not enought stack").replace(/{info}/g,zt(c.a.info(r))||"not enought info"):r.toString()}format(r=this.$$defaultFormatPattern){return qt.formatError(this,r)}static isModifiedError(r){return r instanceof c.a||r instanceof qt}static getStackNames(r){return qt.getStack(r).map(r=>`${r.name}: ${r.message}`).join("\n")}static getStack(r){const e=[];let t=r;for(;t;)e.push({name:t.name,message:t.jse_shortmsg||t.message}),t&&(t=!!t.cause&&t.cause());return e}}qt.$$defaultFormatPattern="{name}: {message}\ninfo: {info}\nstack: {stack}",qt.$$fullStackFormatPattern="{name}: {message}\ninfo: {info}\nstack: {stack}\nfullStack: {fullStack}";var Qt=qt,rn=t("adal-node");var en=function(r,e){try{const t=(t,n)=>new rn.AuthenticationContext(t.authorization).acquireTokenWithClientCredentials(t.resource,r,e,(r,e)=>{if(r)throw r;return n(null,`${e.tokenType} ${e.accessToken}`)});return new _.a.KeyVaultClient(new _.a.KeyVaultCredentials(t))}catch(r){throw new Qt({name:Qt.types.KEY_VAULT_ERROR,cause:r},"Failed to create KeyVault client")}};var tn=async function({uri:r,clientId:e,appSecret:t,keyName:n}){try{const E=en(e,t),R={keySize:4096,keyOps:["encrypt","decrypt"]},o=await E.createKey(r,n,"RSA",R);return _.a.parseKeyIdentifier(o.key.kid)}catch(r){throw new Qt({name:Qt.types.KEY_VAULT_ERROR,cause:r},"Failed to create new key")}};var nn=async function({uri:r,clientId:e,appSecret:t,value:n,keyName:E,keyVersion:R=""}){try{const o=en(e,t),a=await o.encrypt(r,E,R,"RSA-OAEP",Buffer.from(n));return JSON.stringify(a.result)}catch(r){throw new Qt({name:Qt.types.KEY_VAULT_ERROR,cause:r},"Failed to encrypt value")}};var En=async function({uri:r,clientId:e,appSecret:t,secretValue:n,secretName:E}){try{const R=en(e,t),o=await R.setSecret(r,E,n);return _.a.parseSecretIdentifier(o.id)}catch(r){throw new Qt({name:Qt.types.KEY_VAULT_ERROR,cause:r},"Failed to set secret")}},Rn=t("dotenv-safe"),on=t.n(Rn);on.a.config();const{KEY_VAULT_URL:an,KEY_VAULT_WRITE_CLIENT_ID:_n,KEY_VAULT_WRITE_APP_SECRET:sn}=process.env;async function cn(r,e,t){await tn({uri:an,clientId:_n,appSecret:sn,keyName:r});const n=await nn({uri:an,clientId:_n,appSecret:sn,value:t,keyName:r});return(await En({uri:an,clientId:_n,appSecret:sn,secretValue:n,secretName:e})).version}var un=t("@azure/ms-rest-nodeauth"),Tn=t("@azure/arm-eventgrid");var dn=["tasks","candles","ticks","signals","trades","log","error"];var An={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8104,types:["CPZ.Tasks.Adviser.Start","CPZ.Tasks.Adviser.Stop","CPZ.Tasks.Adviser.Update","CPZ.Tasks.Adviser.Run","CPZ.Tasks.Adviser.Pause","CPZ.Tasks.Adviser.Resume"]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",localPort:8104,types:["CPZ.Candles.NewCandle"]},{name:"adviser-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8104,types:["CPZ.Ticks.NewTick"]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8108,types:["CPZ.Tasks.Backtester.Start","CPZ.Tasks.Backtester.Stop"]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8103,types:["CPZ.Tasks.Candlebatcher.Start","CPZ.Tasks.Candlebatcher.Stop","CPZ.Tasks.Candlebatcher.Update","CPZ.Tasks.Candlebatcher.Run","CPZ.Tasks.Candlebatcher.Pause","CPZ.Tasks.Candlebatcher.Resume"]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/serviceEvents",localPort:8107,types:["CPZ.Tasks.Marketwatcher.Started","CPZ.Tasks.Marketwatcher.Stopped","CPZ.Tasks.Marketwatcher.Updated","CPZ.Tasks.Candlebatcher.Started","CPZ.Tasks.Candlebatcher.Stopped","CPZ.Tasks.Candlebatcher.Updated","CPZ.Tasks.Importer.Started","CPZ.Tasks.Importer.Stopped","CPZ.Tasks.Importer.Finished","CPZ.Tasks.Adviser.Started","CPZ.Tasks.Adviser.Stopped","CPZ.Tasks.Adviser.Updated","CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Backtester.Started","CPZ.Tasks.Backtester.Stopped","CPZ.Tasks.Backtester.Finished","CPZ.Tasks.Exwatcher.Started","CPZ.Tasks.Exwatcher.Stopped"]},{name:"control-error",topic:"error",url:"/api/serviceEvents",localPort:8107,types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Candlebatcher.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error"]}]},...{eventslogger:[{name:"eventslogger-tasks",topic:"tasks",url:"/api/events",types:["CPZ.Tasks.Adviser.Start","CPZ.Tasks.Adviser.Stop","CPZ.Tasks.Adviser.Update","CPZ.Tasks.Adviser.Started","CPZ.Tasks.Adviser.Stopped","CPZ.Tasks.Adviser.Updated","CPZ.Tasks.Adviser.Pause","CPZ.Tasks.Adviser.Resume","CPZ.Tasks.Backtester.Start","CPZ.Tasks.Backtester.Stop","CPZ.Tasks.Backtester.Started","CPZ.Tasks.Backtester.Stopped","CPZ.Tasks.Backtester.Finished","CPZ.Tasks.Candlebatcher.Start","CPZ.Tasks.Candlebatcher.Stop","CPZ.Tasks.Candlebatcher.Update","CPZ.Tasks.Candlebatcher.Started","CPZ.Tasks.Candlebatcher.Stopped","CPZ.Tasks.Candlebatcher.Updated","CPZ.Tasks.Candlebatcher.Pause","CPZ.Tasks.Candlebatcher.Resume","CPZ.Tasks.Importer.Start","CPZ.Tasks.Importer.Stop","CPZ.Tasks.Importer.Started","CPZ.Tasks.Importer.Stopped","CPZ.Tasks.Importer.Finished","CPZ.Tasks.Marketwatcher.Start","CPZ.Tasks.Marketwatcher.Stop","CPZ.Tasks.Marketwatcher.Subscribe","CPZ.Tasks.Marketwatcher.Unsubscribe","CPZ.Tasks.Marketwatcher.Started","CPZ.Tasks.Marketwatcher.Stopped","CPZ.Tasks.Marketwatcher.Updated","CPZ.Tasks.Trader.Start","CPZ.Tasks.Trader.Stop","CPZ.Tasks.Trader.Update","CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Trader.Pause","CPZ.Tasks.Trader.Resume","CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished","CPZ.Tasks.Exwatcher.Started","CPZ.Tasks.Exwatcher.Stopped","CPZ.Tasks.UserRobot.Hist"]},{name:"eventslogger-candles",topic:"candles",url:"/api/events",types:["CPZ.Candles.NewCandle","CPZ.Candles.Handled"]},{name:"eventslogger-signals",topic:"signals",url:"/api/events",types:["CPZ.Signals.NewSignal","CPZ.Signals.Handled"]},{name:"eventslogger-trades",topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:"eventslogger-log",topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:"eventslogger-error",topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8105,types:["CPZ.Tasks.Importer.Start","CPZ.Tasks.Importer.Stop"]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8102,types:["CPZ.Tasks.Marketwatcher.Start","CPZ.Tasks.Marketwatcher.Stop","CPZ.Tasks.Marketwatcher.Subscribe","CPZ.Tasks.Marketwatcher.Unsubscribe"]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8106,types:["CPZ.Tasks.Trader.Start","CPZ.Tasks.Trader.Stop","CPZ.Tasks.Trader.Update","CPZ.Tasks.Trader.Run","CPZ.Tasks.Trader.Pause","CPZ.Tasks.Trader.Resume"]},{name:"trader-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8106,types:["CPZ.Ticks.NewTick"]},{name:"trader-signals",topic:"signals",url:"/api/signalEvents",localPort:8106,types:["CPZ.Signals.NewSignal"]}]}};on.a.config(),function(r){if(!r||!Array.isArray(r)||0===r.length)return;const e=r.filter(r=>!process.env[r]);if(e.length>0)throw new Error(`Environment variables: ${e.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP","STORAGE"]);const{MANAGE_APP_ID:On,MANAGE_APP_KEY:Cn,AD_DIRECTORY_ID:Sn,SUBSRIPTION_ID:Nn,RESOURSE_GROUP:ln,STORAGE:Pn}=process.env;async function In(r,{topic:e,topicName:t,serviceName:n,subName:E,endpointUrl:R,eventTypes:o},a=!1){const _=`/subscriptions/${Nn}/resourceGroups/${ln}/providers/Microsoft.EventGrid/topics/${t}`,s={destination:{endpointType:"WebHook",endpointUrl:R},filter:{includedEventTypes:o},retryPolicy:{eventTimeToLiveInMinutes:60,maxDeliveryAttempts:10},eventDeliverySchema:"EventGridSchema"};return a?(console.warn(E,_,s),!0):await r.eventSubscriptions.createOrUpdate(_,E,s)}const fn=(r,e,t,n)=>"prod"===e?`https://cpz-${r}.azurewebsites.net${t}?api-key=${n}`:`https://cpz-${r}-${e}.azurewebsites.net${t}?api-key=${n}`,pn=(r,e)=>`cpz-${r}-${e}`;async function Dn(r,e,t=!1){try{for(const n of e){console.log(`Creating ${n.topicName} - ${n.name} sub to ${n.url}`);try{await In(r,{topic:n.topic,topicName:n.topicName,serviceName:n.serviceName,subName:n.name,endpointUrl:n.url,eventTypes:n.types},t),console.log(n.name,"ok")}catch(r){console.log(r)}}}catch(r){console.error(r)}}var Ln={adviser:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_EVENT_CS","AZ_STORAGE_BLOB_NAME","AZ_STORAGE_BLOB_KEY","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"],backtester:["AzureWebJobsStorage","AZ_STORAGE_BACKTESTER_CS","AZ_STORAGE_BLOB_NAME","AZ_STORAGE_BLOB_KEY","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"],candlebatcher:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_EVENT_CS","AZ_STORAGE_BLOB_NAME","AZ_STORAGE_BLOB_KEY","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"],connector:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT_PUBLIC","PROXY_ENDPOINT_PRIVATE","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"],control:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_BACKTESTER_CS","AZ_STORAGE_EVENT_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"],eventslogger:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"],importer:["AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"],marketwatcher:["AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"],trader:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_EVENT_CS","AZ_STORAGE_BLOB_NAME","AZ_STORAGE_BLOB_KEY","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},kn=t("fs"),vn=t.n(kn);on.a.config();const{KEY_VAULT_URL:mn,KEY_VAULT_WRITE_CLIENT_ID:Kn,KEY_VAULT_WRITE_APP_SECRET:hn}=process.env;function Bn(){try{const r=JSON.parse(vn.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),r}catch(r){return console.log("No current env list file"),{}}}const bn=new R.a;bn.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(r){this.log(r);const{APIKey:e,APISecret:t}=r,{user:n,spare:E,APIKeyEncrKeyName:R,APISecretEncrKeyName:a,APIKeySecretName:_,APISecretSecretName:s}=r.options,c={APIKey:{},APISecret:{}};n&&(c.APIKey.encryptionKeyName=n.toString(),c.APISecret.encryptionKeyName=n.toString(),c.APIKey.name=n.toString(),c.APISecret.name=n.toString()),c.APIKey.encryptionKeyName=R||c.APIKey.encryptionKeyName||Object(o.v4)(),c.APISecret.encryptionKeyName=a||c.APISecret.encryptionKeyName||Object(o.v4)(),c.APIKey.name=_||c.APIKey.name||Object(o.v4)(),c.APISecret.name=s||c.APISecret.name||Object(o.v4)(),c.APIKey.version=await cn(c.APIKey.encryptionKeyName,c.APIKey.name,e),c.APISecret.version=await cn(c.APISecret.encryptionKeyName,c.APISecret.name,t);const i={};E?i.spare=c:i.main=c,this.log(JSON.stringify(i))}),bn.command("eg create subs <Env> <APIKey>").option("-d, --debug","Debug mode.").action(async function(r){this.log("createSubs",r),this.log("Creating Event Grid subscriptions for environment",r.Env);const e=await async function(){const r=await un.loginWithServicePrincipalSecret(On,Cn,Sn);return new Tn.EventGridManagementClient(r,Nn)}();this.log("Connected to Azure!");const t=function(r,e){let t=[];Object.keys(An).forEach(n=>{t=[...new Set([...An[n].map(t=>({...t,topicName:pn(t.topic,r),url:fn(n,r,t.url,e),serviceName:n})),...t])]});const n={};return dn.forEach(r=>{n[r]=t.filter(e=>e.topic===r)}),n}(r.Env,r.APIKey);for(const n of Object.keys(t)){const E=t[n];this.log(`Creating "${n}" subscriptions`,E.map(r=>r.name).join(", ")),await Dn(e,E,r.options.debug)}}),bn.command("env create list").action(async function(r){this.log("createEnvList",r),function(){let r=Bn();r||(r={}),Object.keys(Ln).forEach(e=>{r[e]||(r[e]={}),Ln[e].variables.forEach(t=>{r[e][t]||(r[e][t]="")}),Object.keys(r[e]).filter(r=>!Ln[e].variables.includes(r)).forEach(t=>{delete r[e][t]})}),vn.a.writeFileSync("envlist.json",JSON.stringify(r))}()}),bn.command("env update <Env>").action(async function(r){this.log("updateEnvVars",r),await async function(r){const e=Bn();if(!e)return void console.log("Create envlist.json first","env create list");const t={...e};await Promise.all(Object.keys(e).map(async n=>{await Promise.all(Object.keys(e[n]).map(async E=>{const R=`${n}-${E}-${r}`.replace(/_/g,"-");console.log(R),console.log(e[n][E]),await En({uri:mn,clientId:Kn,appSecret:hn,secretValue:e[n][E],secretName:R}),t[n][E]=R}))})),vn.a.writeFileSync("envsetresult.json",JSON.stringify(t))}(r.Env)}),bn.delimiter("cpz$").show()},"@azure/arm-eventgrid":function(r,e){r.exports=require("@azure/arm-eventgrid")},"@azure/ms-rest-nodeauth":function(r,e){r.exports=require("@azure/ms-rest-nodeauth")},"adal-node":function(r,e){r.exports=require("adal-node")},"azure-keyvault":function(r,e){r.exports=require("azure-keyvault")},"dotenv-safe":function(r,e){r.exports=require("dotenv-safe")},fs:function(r,e){r.exports=require("fs")},uuid:function(r,e){r.exports=require("uuid")},verror:function(r,e){r.exports=require("verror")},vorpal:function(r,e){r.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,