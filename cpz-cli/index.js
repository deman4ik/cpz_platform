require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),n=r.n(a),s=r("uuid"),o=r("verror"),i=r.n(o),c=r("azure-keyvault"),p=r.n(c),E=r("adal-node");var l=function(e,t){try{const r=(r,a)=>new E.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new p.a.KeyVaultClient(new p.a.KeyVaultCredentials(r))}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var _=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const n=l(t,r),s={keySize:4096,keyOps:["encrypt","decrypt"]},o=await n.createKey(e,a,"RSA",s);return p.a.parseKeyIdentifier(o.key.kid)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var d=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:n,keyVersion:s=""}){try{const o=l(t,r),c=await o.encrypt(e,n,s,"RSA-OAEP",Buffer.from(a));return JSON.stringify(c.result)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var S=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:n}){try{const s=l(t,r),o=await s.setSecret(e,n,a);return p.a.parseSecretIdentifier(o.id)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},u=r("dotenv-safe"),P=r.n(u);P.a.config();const{KEY_VAULT_URL:A,KEY_VAULT_WRITE_CLIENT_ID:y,KEY_VAULT_WRITE_APP_SECRET:T}=process.env;async function I(e,t,r){await _({uri:A,clientId:y,appSecret:T,keyName:e});const a=await d({uri:A,clientId:y,appSecret:T,value:r,keyName:e});return(await S({uri:A,clientId:y,appSecret:T,secretValue:a,secretName:t})).version}var C=r("ms-rest-azure"),m=r.n(C),N=r("azure-arm-eventgrid"),v=r.n(N);const K={type:"object",description:"Error object if something goes wrong.",optional:!0,props:{name:{description:"Error name.",type:"string",empty:!1},message:{description:"Error message.",type:"string",empty:!1},info:{description:"Error details.",type:"object",optional:!0}}},k={debug:{description:"Debug mode.",type:"boolean",optional:!0},proxy:{description:"Proxy endpoint.",type:"string",optional:!0,empty:!1},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"number",integer:!0,optional:!0}},O={debug:{description:"Debug mode.",type:"boolean",optional:!0},strategyParameters:{description:"Strategy parameters.",type:"object",optional:!0},requiredHistoryCache:{description:"Load history data from cache.",type:"boolean",optional:!0,default:!0},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"number",integer:!0,optional:!0}},g={encryptionKeyName:{description:"Name of encryption key",type:"string"},name:{description:"Secret name",type:"string"},version:{description:"Secret version",type:"string"}},b={mode:{description:"Service run mode.",type:"string",values:["emulator","realtime"],optional:!0},debug:{description:"Debug mode.",type:"boolean",optional:!0},slippageStep:{description:"Price Slippage Step.",type:"number",optional:!0},deviation:{description:"Price deviation",type:"number",optional:!0},volume:{description:"User trade volume",type:"number",optional:!0},multiPosition:{description:"Multiple active positions available.",type:"boolean",optional:!0},keys:{description:"Exchange API Keys Info",type:"object",props:{main:{description:"Main Exchange API Keys Info",type:"object",props:{APIKey:{description:"Main Exchange API Key",type:"object",props:g},APISecret:{description:"Main Exchange API Secret",type:"object",props:g}}},spare:{description:"Spare Exchange API Keys Info",type:"object",props:{APIKey:{description:"Spare Exchange API Key",type:"object",props:g},APISecret:{description:"Spare Exchange API Secret",type:"object",props:g}},optional:!0}},optional:!0}},f="CPZ.Tasks.Adviser.Start",R="CPZ.Tasks.Adviser.Stop",G="CPZ.Tasks.Adviser.Update",Z="CPZ.Tasks.Adviser.Started",h="CPZ.Tasks.Adviser.Stopped",D="CPZ.Tasks.Adviser.Updated",w="CPZ.Candles.NewCandle";const L="CPZ.Tasks.Backtester.Start",U="CPZ.Tasks.Backtester.Stop",Y="CPZ.Tasks.Backtester.Started",M="CPZ.Tasks.Backtester.Stopped",j="CPZ.Tasks.Backtester.Finished";const x="CPZ.Tasks.Candlebatcher.Start",B="CPZ.Tasks.Candlebatcher.Stop",z="CPZ.Tasks.Candlebatcher.Update",V="CPZ.Tasks.Candlebatcher.Started",W="CPZ.Tasks.Candlebatcher.Stopped",$="CPZ.Tasks.Candlebatcher.Updated";const F="CPZ.Tasks.Marketwatcher.Start",q="CPZ.Tasks.Marketwatcher.Stop",J="CPZ.Tasks.Marketwatcher.Subscribe",H="CPZ.Tasks.Marketwatcher.Unsubscribe",X="CPZ.Tasks.Marketwatcher.Started",Q="CPZ.Tasks.Marketwatcher.Updated",ee="CPZ.Tasks.Importer.Start",te="CPZ.Tasks.Importer.Stop",re="CPZ.Tasks.Importer.Started",ae="CPZ.Tasks.Importer.Stoppped",ne="CPZ.Tasks.Importer.Finished",se="CPZ.Tasks.Exwatcher.Started",oe="CPZ.Tasks.Exwatcher.Stopped";const ie="CPZ.Tasks.Trader.Start",ce="CPZ.Tasks.Trader.Stop",pe="CPZ.Tasks.Trader.Update",Ee="CPZ.Signals.NewSignal",le="CPZ.Ticks.NewTick";const _e={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",types:[f,R,G]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",types:[w]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",types:[L,U]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",types:[x,B,z]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/taskEvents",types:[X,F,Q,V,W,$,re,ae,ne,Z,h,D,Y,M,j,se,oe]}]},...{eventslogger:[{name:"eventslogger-tasks",topic:"tasks",url:"/api/events",types:[f,R,G,Z,h,D,L,U,Y,M,j,x,B,z,V,W,$,ee,te,re,ae,ne,F,q,J,H,X,"CPZ.Tasks.Marketwatcher.Stopped",Q,ie,ce,pe,"CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished",se,oe,"CPZ.Tasks.UserRobot.Started","CPZ.Tasks.UserRobot.Stopped","CPZ.Tasks.UserRobot.Updated"]},{name:"eventslogger-candles",topic:"candles",url:"/api/events",types:[w,"CPZ.Candles.Handled"]},{name:"eventslogger-signals",topic:"signals",url:"/api/events",types:[Ee,"CPZ.Signals.Handled"]},{name:"eventslogger-ticks",topic:"ticks",url:"/api/events",types:[le,"CPZ.Ticks.Handled"]},{name:"eventslogger-trades",topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:"eventslogger-log",topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:"eventslogger-error",topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",types:[ee,te]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",types:[F,q,J,H]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",types:[ie,ce,pe]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",types:[w]},{name:"trader-ticks",topic:"ticks",url:"/api/candleEvents",types:[le]},{name:"trader-signals",topic:"signals",url:"/api/candleEvents",types:[Ee]}]}},de=["tasks","candles","ticks","signals","trades","log","error"];P.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP"]);const{MANAGE_APP_ID:Se,MANAGE_APP_KEY:ue,AD_DIRECTORY_ID:Pe,SUBSRIPTION_ID:Ae,RESOURSE_GROUP:ye}=process.env;async function Te(e,t,r,a,n){const s=`/subscriptions/${Ae}/resourceGroups/${ye}/providers/Microsoft.EventGrid/topics/${t}`,o={destination:{endpointType:"WebHook",endpointUrl:a},filter:{includedEventTypes:n},eventDeliverySchema:"EventGridSchema"};return await e.eventSubscriptions.createOrUpdate(s,r,o)}const Ie=(e,t,r,a)=>`https://cpz-${e}-${t}.azurewebsites.net${r}?api-key=${a}`,Ce=(e,t)=>`cpz-${e}-${t}`;async function me(e,t){try{for(const r of t){console.log(`Creating ${r.topicName} - ${r.name} sub to ${r.url}`);const t=await Te(e,r.topicName,r.name,r.url);console.log(t)}}catch(e){throw e}}var Ne={adviser:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_TRADE_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","DEBUG"]},backtester:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"]},candlebatcher:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},connector:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"]},control:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"]},eventslogger:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"]},importer:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"]},marketwatcher:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","PROXY_ENDPOINT","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","DEBUG"]},trader:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]}},ve=r("fs"),Ke=r.n(ve);P.a.config();const{KEY_VAULT_URL:ke,KEY_VAULT_WRITE_CLIENT_ID:Oe,KEY_VAULT_WRITE_APP_SECRET:ge}=process.env;function be(){try{const e=JSON.parse(Ke.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),e}catch(e){return console.log("No current env list file"),{}}}const fe=new n.a;fe.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:n,APIKeyEncrKeyName:o,APISecretEncrKeyName:i,APIKeySecretName:c,APISecretSecretName:p}=e.options,E={APIKey:{},APISecret:{}};a&&(E.APIKey.encryptionKeyName=a.toString(),E.APISecret.encryptionKeyName=a.toString(),E.APIKey.name=a.toString(),E.APISecret.name=a.toString()),E.APIKey.encryptionKeyName=o||E.APIKey.encryptionKeyName||Object(s.v4)(),E.APISecret.encryptionKeyName=i||E.APISecret.encryptionKeyName||Object(s.v4)(),E.APIKey.name=c||E.APIKey.name||Object(s.v4)(),E.APISecret.name=p||E.APISecret.name||Object(s.v4)(),E.APIKey.version=await I(E.APIKey.encryptionKeyName,E.APIKey.name,t),E.APISecret.version=await I(E.APISecret.encryptionKeyName,E.APISecret.name,r);const l={};n?l.spare=E:l.main=E,this.log(JSON.stringify(l))}),fe.command("eg create subs <Env> <APIKey>").action(async function(e){this.log("createSubs",e),this.log("Creating Event Grid subscriptions for environment",e.Env);const t=await async function(){const e=await m.a.loginWithServicePrincipalSecret(Se,ue,Pe);return new v.a(e,Ae)}();this.log("Connected to Azure!");const r=function(e,t){let r=[];Object.keys(_e).forEach(a=>{r=[...new Set([..._e[a].map(r=>({...r,topicName:Ce(r.topic,e),url:Ie(a,e,r.url,t)})),...r])]});const a={};return de.forEach(e=>{a[e]=r.filter(t=>t.topic===e)}),a}(e.Env,e.APIKey);this.log("Subscriptions list",Object.keys(r).map(e=>`${e}: ${r[e].map(e=>e.name).join(", ")}`));for(const e of Object.keys(r)){const a=r[e];this.log(`Creating "${e}" subscriptions...`),await me(t,a)}}),fe.command("env create list").action(async function(e){this.log("createEnvList",e),function(){let e=be();e||(e={}),Object.keys(Ne).forEach(t=>{e[t]||(e[t]={}),Ne[t].variables.forEach(r=>{e[t][r]||(e[t][r]="")}),Object.keys(e[t]).filter(e=>!Ne[t].variables.includes(e)).forEach(r=>{delete e[t][r]})}),Ke.a.writeFileSync("envlist.json",JSON.stringify(e))}()}),fe.command("env update <Env>").action(async function(e){this.log("updateEnvVars",e),await async function(e){const t=be();if(!t)return void console.log("Create envlist.json first","env create list");const r={...t};await Promise.all(Object.keys(t).map(async a=>{await Promise.all(Object.keys(t[a]).map(async n=>{const s=`${a}-${n}-${e}`.replace(/_/g,"-");console.log(s),console.log(t[a][n]),await S({uri:ke,clientId:Oe,appSecret:ge,secretValue:t[a][n],secretName:s}),r[a][n]=s}))})),Ke.a.writeFileSync("envsetresult.json",JSON.stringify(r))}(e.Env)}),fe.delimiter("cpz$").show()},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-arm-eventgrid":function(e,t){e.exports=require("azure-arm-eventgrid")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},fs:function(e,t){e.exports=require("fs")},"ms-rest-azure":function(e,t){e.exports=require("ms-rest-azure")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,