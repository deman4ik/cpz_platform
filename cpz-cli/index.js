require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),o=r.n(a),n=r("uuid"),s=r("verror"),i=r.n(s),c=r("azure-keyvault"),p=r.n(c),E=r("adal-node");var l=function(e,t){try{const r=(r,a)=>new E.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new p.a.KeyVaultClient(new p.a.KeyVaultCredentials(r))}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var _=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const o=l(t,r),n={keySize:4096,keyOps:["encrypt","decrypt"]},s=await o.createKey(e,a,"RSA",n);return p.a.parseKeyIdentifier(s.key.kid)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var d=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:o,keyVersion:n=""}){try{const s=l(t,r),c=await s.encrypt(e,o,n,"RSA-OAEP",Buffer.from(a));return JSON.stringify(c.result)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var P=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:o}){try{const n=l(t,r),s=await n.setSecret(e,o,a);return p.a.parseSecretIdentifier(s.id)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},S=r("dotenv-safe"),u=r.n(S);u.a.config();const{KEY_VAULT_URL:A,KEY_VAULT_WRITE_CLIENT_ID:y,KEY_VAULT_WRITE_APP_SECRET:T}=process.env;async function I(e,t,r){await _({uri:A,clientId:y,appSecret:T,keyName:e});const a=await d({uri:A,clientId:y,appSecret:T,value:r,keyName:e});return(await P({uri:A,clientId:y,appSecret:T,secretValue:a,secretName:t})).version}var m=r("@azure/ms-rest-nodeauth"),C=r("@azure/arm-eventgrid");const N="eventslogger",v={type:"object",description:"Error object if something goes wrong.",optional:!0,props:{name:{description:"Error name.",type:"string",empty:!1},message:{description:"Error message.",type:"string",empty:!1},info:{description:"Error details.",type:"object",optional:!0}}},k={debug:{description:"Debug mode.",type:"boolean",optional:!0},proxy:{description:"Proxy endpoint.",type:"string",optional:!0,empty:!1},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},K={debug:{description:"Debug mode.",type:"boolean",optional:!0},strategyParameters:{description:"Strategy parameters.",type:"object",optional:!0},requiredHistoryCache:{description:"Load history data from cache.",type:"boolean",optional:!0,default:!0},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},O={encryptionKeyName:{description:"Name of encryption key",type:"string"},name:{description:"Secret name",type:"string"},version:{description:"Secret version",type:"string"}},b={mode:{description:"Service run mode.",type:"tradeMode",values:["emulator","realtime"],requiredProps:{realtime:["keys.main.APIKey","keys.main.APISecret"]},optional:!0},debug:{description:"Debug mode.",type:"boolean",optional:!0},slippageStep:{description:"Price Slippage Step.",type:"number",optional:!0},deviation:{description:"Price deviation",type:"number",optional:!0},volume:{description:"User trade volume",type:"number",optional:!0},multiPosition:{description:"Multiple active positions available",type:"boolean",optional:!0},exchangeParams:{description:"User specific exchange parameters",type:"object",optional:!0},keys:{description:"Exchange API Keys Info",type:"object",props:{main:{description:"Main Exchange API Keys Info",type:"object",props:{APIKey:{description:"Main Exchange API Key",type:"object",props:O},APISecret:{description:"Main Exchange API Secret",type:"object",props:O}}},spare:{description:"Spare Exchange API Keys Info",type:"object",props:{APIKey:{description:"Spare Exchange API Key",type:"object",props:O},APISecret:{description:"Spare Exchange API Secret",type:"object",props:O}},optional:!0}},optional:!0}},g="CPZ.Tasks.Adviser.Start",f="CPZ.Tasks.Adviser.Stop",R="CPZ.Tasks.Adviser.Update",G="CPZ.Tasks.Adviser.Started",Z="CPZ.Tasks.Adviser.Stopped",h="CPZ.Tasks.Adviser.Updated",D="CPZ.Candles.NewCandle";const w="CPZ.Tasks.Backtester.Start",L="CPZ.Tasks.Backtester.Stop",U="CPZ.Tasks.Backtester.Started",Y="CPZ.Tasks.Backtester.Stopped",M="CPZ.Tasks.Backtester.Finished";const j="CPZ.Tasks.Candlebatcher.Start",x="CPZ.Tasks.Candlebatcher.Stop",B="CPZ.Tasks.Candlebatcher.Update",$="CPZ.Tasks.Candlebatcher.Started",V="CPZ.Tasks.Candlebatcher.Stopped",z="CPZ.Tasks.Candlebatcher.Updated";const W="CPZ.Tasks.Importer.Start",F="CPZ.Tasks.Importer.Stop",q="CPZ.Tasks.Importer.Started",J="CPZ.Tasks.Importer.Stoppped",H="CPZ.Tasks.Importer.Finished",X="CPZ.Tasks.Marketwatcher.Start",Q="CPZ.Tasks.Marketwatcher.Stop",ee="CPZ.Tasks.Marketwatcher.Subscribe",te="CPZ.Tasks.Marketwatcher.Unsubscribe",re="CPZ.Tasks.Marketwatcher.Started",ae="CPZ.Tasks.Marketwatcher.Stopped",oe="CPZ.Tasks.Marketwatcher.Updated",ne="CPZ.Tasks.Trader.Start",se="CPZ.Tasks.Trader.Stop",ie="CPZ.Tasks.Trader.Update",ce="CPZ.Tasks.Trader.Started",pe="CPZ.Tasks.Trader.Stopped",Ee="CPZ.Tasks.Trader.Updated",le="CPZ.Tasks.Exwatcher.Started",_e="CPZ.Tasks.Exwatcher.Stopped";const de="CPZ.Signals.NewSignal",Pe="CPZ.Ticks.NewTick";const Se={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8104,types:[g,f,R]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",localPort:8104,types:[D]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8108,types:[w,L]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8103,types:[j,x,B]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8107,types:[re,ae,oe,$,V,z,q,J,H,G,Z,h,ce,pe,Ee,U,Y,M,le,_e]}]},...{[N]:[{name:`${N}-tasks`,topic:"tasks",url:"/api/events",types:[g,f,R,G,Z,h,w,L,U,Y,M,j,x,B,$,V,z,W,F,q,J,H,X,Q,ee,te,re,ae,oe,ne,se,ie,ce,pe,Ee,"CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished",le,_e,"CPZ.Tasks.UserRobot.Started","CPZ.Tasks.UserRobot.Stopped","CPZ.Tasks.UserRobot.Updated"]},{name:`${N}-candles`,topic:"candles",url:"/api/events",types:[D,"CPZ.Candles.Handled"]},{name:`${N}-signals`,topic:"signals",url:"/api/events",types:[de,"CPZ.Signals.Handled"]},{name:`${N}-ticks`,topic:"ticks",url:"/api/events",types:[Pe,"CPZ.Ticks.Handled"]},{name:`${N}-trades`,topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:`${N}-log`,topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:`${N}-error`,topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8105,types:[W,F]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8102,types:[X,Q,ee,te]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8106,types:[ne,se,ie,"CPZ.Tasks.Trader.Run"]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",localPort:8106,types:[D]},{name:"trader-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8106,types:[Pe]},{name:"trader-signals",topic:"signals",url:"/api/signalEvents",localPort:8106,types:[de]}]}},ue=["tasks","candles","ticks","signals","trades","log","error"];u.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP","STORAGE"]);const{MANAGE_APP_ID:Ae,MANAGE_APP_KEY:ye,AD_DIRECTORY_ID:Te,SUBSRIPTION_ID:Ie,RESOURSE_GROUP:me,STORAGE:Ce}=process.env;async function Ne(e,{topic:t,topicName:r,serviceName:a,subName:o,endpointUrl:n,eventTypes:s}){const i=`/subscriptions/${Ie}/resourceGroups/${me}/providers/Microsoft.EventGrid/topics/${r}`,c={deadLetterDestination:{endpointType:"StorageBlob",blobContainerName:`eg-${t}-dead`,resourceId:`/subscriptions/${Ie}/resourceGroups/${me}/providers/microsoft.Storage/storageAccounts/${Ce}`},destination:{endpointType:"WebHook",endpointUrl:n},filter:{includedEventTypes:a===N?null:s},retryPolicy:{eventTimeToLiveInMinutes:60,maxDeliveryAttempts:10},eventDeliverySchema:"EventGridSchema"};return await e.eventSubscriptions.createOrUpdate(i,o,c)}const ve=(e,t,r,a)=>`https://cpz-${e}-${t}.azurewebsites.net${r}?api-key=${a}`,ke=(e,t)=>`cpz-${e}-${t}`;async function Ke(e,t){try{for(const r of t){console.log(`Creating ${r.topicName} - ${r.name} sub to ${r.url}`);try{await Ne(e,{topic:r.topic,topicName:r.topicName,serviceName:r.serviceName,subName:r.name,endpointUrl:r.url,eventTypes:r.types}),console.log(r.name,"ok")}catch(e){console.log(e)}}}catch(e){console.error(e)}}var Oe={adviser:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_TRADE_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","DEBUG"]},backtester:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"]},candlebatcher:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},connector:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"]},control:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"]},eventslogger:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"]},importer:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"]},marketwatcher:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","PROXY_ENDPOINT","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","DEBUG"]},trader:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_EVENT_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]}},be=r("fs"),ge=r.n(be);u.a.config();const{KEY_VAULT_URL:fe,KEY_VAULT_WRITE_CLIENT_ID:Re,KEY_VAULT_WRITE_APP_SECRET:Ge}=process.env;function Ze(){try{const e=JSON.parse(ge.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),e}catch(e){return console.log("No current env list file"),{}}}const he=new o.a;he.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:o,APIKeyEncrKeyName:s,APISecretEncrKeyName:i,APIKeySecretName:c,APISecretSecretName:p}=e.options,E={APIKey:{},APISecret:{}};a&&(E.APIKey.encryptionKeyName=a.toString(),E.APISecret.encryptionKeyName=a.toString(),E.APIKey.name=a.toString(),E.APISecret.name=a.toString()),E.APIKey.encryptionKeyName=s||E.APIKey.encryptionKeyName||Object(n.v4)(),E.APISecret.encryptionKeyName=i||E.APISecret.encryptionKeyName||Object(n.v4)(),E.APIKey.name=c||E.APIKey.name||Object(n.v4)(),E.APISecret.name=p||E.APISecret.name||Object(n.v4)(),E.APIKey.version=await I(E.APIKey.encryptionKeyName,E.APIKey.name,t),E.APISecret.version=await I(E.APISecret.encryptionKeyName,E.APISecret.name,r);const l={};o?l.spare=E:l.main=E,this.log(JSON.stringify(l))}),he.command("eg create subs <Env> <APIKey>").action(async function(e){this.log("createSubs",e),this.log("Creating Event Grid subscriptions for environment",e.Env);const t=await async function(){const e=await m.loginWithServicePrincipalSecret(Ae,ye,Te);return new C.EventGridManagementClient(e,Ie)}();this.log("Connected to Azure!");const r=function(e,t){let r=[];Object.keys(Se).forEach(a=>{r=[...new Set([...Se[a].map(r=>({...r,topicName:ke(r.topic,e),url:ve(a,e,r.url,t),serviceName:a})),...r])]});const a={};return ue.forEach(e=>{a[e]=r.filter(t=>t.topic===e)}),a}(e.Env,e.APIKey);for(const e of Object.keys(r)){const a=r[e];this.log(`Creating "${e}" subscriptions`,a.map(e=>e.name).join(", ")),await Ke(t,a)}}),he.command("env create list").action(async function(e){this.log("createEnvList",e),function(){let e=Ze();e||(e={}),Object.keys(Oe).forEach(t=>{e[t]||(e[t]={}),Oe[t].variables.forEach(r=>{e[t][r]||(e[t][r]="")}),Object.keys(e[t]).filter(e=>!Oe[t].variables.includes(e)).forEach(r=>{delete e[t][r]})}),ge.a.writeFileSync("envlist.json",JSON.stringify(e))}()}),he.command("env update <Env>").action(async function(e){this.log("updateEnvVars",e),await async function(e){const t=Ze();if(!t)return void console.log("Create envlist.json first","env create list");const r={...t};await Promise.all(Object.keys(t).map(async a=>{await Promise.all(Object.keys(t[a]).map(async o=>{const n=`${a}-${o}-${e}`.replace(/_/g,"-");console.log(n),console.log(t[a][o]),await P({uri:fe,clientId:Re,appSecret:Ge,secretValue:t[a][o],secretName:n}),r[a][o]=n}))})),ge.a.writeFileSync("envsetresult.json",JSON.stringify(r))}(e.Env)}),he.delimiter("cpz$").show()},"@azure/arm-eventgrid":function(e,t){e.exports=require("@azure/arm-eventgrid")},"@azure/ms-rest-nodeauth":function(e,t){e.exports=require("@azure/ms-rest-nodeauth")},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},fs:function(e,t){e.exports=require("fs")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQva2V5VmF1bHQvY2xpZW50LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L2NyZWF0ZUtleS5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9rZXlWYXVsdC9lbmNyeXB0LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L3NldFNlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMva2V5VmF1bHQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL3NlcnZpY2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL3NldHRpbmdzLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvYWR2aXNlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL2NhbmRsZXMvY2FuZGxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL3N0YXRlL3RpbWVmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy9tYXJrZXR3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvdHJhZGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvZXh3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvdGFza3MvYmFja3Rlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy9zaWduYWxzL3NpZ25hbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90aWNrcy90aWNrcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9hZHZpc2VyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL3RvcGljcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9iYWNrdGVzdGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL2NhbmRsZWJhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy9lbmRwb2ludHMvY29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL2VuZHBvaW50cy9ldmVudHNsb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90YXNrcy91c2VyUm9ib3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy90eXBlcy90cmFkZXMvdHJhZGVzLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvdHlwZXMvbG9nL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZXZlbnRzL3R5cGVzL2Vycm9yL2Vycm9yLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL2ltcG9ydGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9ldmVudHMvZW5kcG9pbnRzL21hcmtldHdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2V2ZW50cy9lbmRwb2ludHMvdHJhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvdXRpbHMvZW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2FkdmlzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9iYWNrdGVzdGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2NvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2V2ZW50c2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZW52aXJvbm1lbnQvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L21hcmtldHdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L3RyYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZW52dmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tleVZhdWx0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudnZhcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYXp1cmUvbXMtcmVzdC1ub2RlYXV0aFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImFkYWwtbm9kZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImF6dXJlLWtleXZhdWx0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZG90ZW52LXNhZmVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInV1aWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2ZXJyb3JcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2b3JwYWxcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNsaWVudCIsImNsaWVudElkIiwic2VjcmV0IiwiYWRhbENhbGxiYWNrIiwiY2hhbGxlbmdlIiwiY2FsbGJhY2siLCJleHRlcm5hbF9hZGFsX25vZGVfIiwiYXV0aG9yaXphdGlvbiIsImFjcXVpcmVUb2tlbldpdGhDbGllbnRDcmVkZW50aWFscyIsInJlc291cmNlIiwiZXJyIiwidG9rZW5SZXNwb25zZSIsInRva2VuVHlwZSIsImFjY2Vzc1Rva2VuIiwiZXh0ZXJuYWxfYXp1cmVfa2V5dmF1bHRfZGVmYXVsdCIsImEiLCJLZXlWYXVsdENsaWVudCIsIktleVZhdWx0Q3JlZGVudGlhbHMiLCJlcnJvciIsImV4dGVybmFsX3ZlcnJvcl9kZWZhdWx0IiwiY2F1c2UiLCJrZXlWYXVsdF9jcmVhdGVLZXkiLCJhc3luYyIsInVyaSIsImFwcFNlY3JldCIsImtleU5hbWUiLCJrZXlWYXVsdENsaWVudCIsImtleU9wdGlvbnMiLCJrZXlTaXplIiwia2V5T3BzIiwicmVzdWx0IiwiY3JlYXRlS2V5IiwicGFyc2VLZXlJZGVudGlmaWVyIiwia2lkIiwia2V5VmF1bHRfZW5jcnlwdCIsImtleVZlcnNpb24iLCJlbmNyeXB0IiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXlWYXVsdF9zZXRTZWNyZXQiLCJzZWNyZXRWYWx1ZSIsInNlY3JldE5hbWUiLCJzZXRTZWNyZXQiLCJwYXJzZVNlY3JldElkZW50aWZpZXIiLCJpZCIsImV4dGVybmFsX2RvdGVudl9zYWZlX2RlZmF1bHQiLCJjb25maWciLCJLRVlfVkFVTFRfVVJMIiwiS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCIsIktFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVUIiwicHJvY2VzcyIsImVudiIsImVuY3J5cHRBbmRTYXZlIiwiZW5jcnlwdGVkRGF0YSIsInZlcnNpb24iLCJFVkVOVFNfTE9HR0VSX1NFUlZJQ0UiLCJCQVNFX0VSUk9SIiwidHlwZSIsImRlc2NyaXB0aW9uIiwib3B0aW9uYWwiLCJwcm9wcyIsImVtcHR5IiwibWVzc2FnZSIsImluZm8iLCJDQU5ETEVCQVRDSEVSX1NFVFRJTkdTIiwiZGVidWciLCJwcm94eSIsInJlcXVpcmVkSGlzdG9yeU1heEJhcnMiLCJpbnRlZ2VyIiwiQURWSVNFUl9TRVRUSU5HUyIsInN0cmF0ZWd5UGFyYW1ldGVycyIsInJlcXVpcmVkSGlzdG9yeUNhY2hlIiwiZGVmYXVsdCIsIktFWV9WQVVMVF9TRUNSRVQiLCJlbmNyeXB0aW9uS2V5TmFtZSIsIlRSQURFUl9TRVRUSU5HUyIsInZhbHVlcyIsInJlcXVpcmVkUHJvcHMiLCJyZWFsdGltZSIsInNsaXBwYWdlU3RlcCIsImRldmlhdGlvbiIsInZvbHVtZSIsIm11bHRpUG9zaXRpb24iLCJleGNoYW5nZVBhcmFtcyIsImtleXMiLCJtYWluIiwiQVBJS2V5IiwiQVBJU2VjcmV0Iiwic3BhcmUiLCJUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5UIiwiVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5UIiwiVEFTS1NfQURWSVNFUl9VUERBVEVfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19BRFZJU0VSX1VQREFURURfRVZFTlQiLCJDQU5ETEVTX05FV0NBTkRMRV9FVkVOVCIsIlRBU0tTX0JBQ0tURVNURVJfU1RBUlRfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUQVJURURfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCIsIlRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUF9FVkVOVCIsIlRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5UIiwiVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UIiwiVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQiLCJUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5UIiwiVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVCIsIlRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVCIsIlRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BQRURfRVZFTlQiLCJUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RPUF9FVkVOVCIsIlRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQiLCJUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5UIiwiVEFTS1NfVFJBREVSX1VQREFURURfRVZFTlQiLCJUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVCIsIlRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UIiwiU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQiLCJUSUNLU19ORVdUSUNLX0VWRU5UIiwiZW5kcG9pbnRzX2VuZHBvaW50cyIsImFkdmlzZXIiLCJ0b3BpYyIsInVybCIsImxvY2FsUG9ydCIsInR5cGVzIiwiYmFja3Rlc3RlciIsImNhbmRsZWJhdGNoZXIiLCJjb250cm9sIiwiW29iamVjdCBPYmplY3RdIiwiaW1wb3J0ZXIiLCJtYXJrZXR3YXRjaGVyIiwidHJhZGVyIiwidG9waWNzIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIm1pc3NpbmdWYXJzIiwiZmlsdGVyIiwidmFyaWFibGUiLCJFcnJvciIsImpvaW4iLCJjaGVja0VudlZhcnMiLCJNQU5BR0VfQVBQX0lEIiwiTUFOQUdFX0FQUF9LRVkiLCJBRF9ESVJFQ1RPUllfSUQiLCJTVUJTUklQVElPTl9JRCIsIlJFU09VUlNFX0dST1VQIiwiU1RPUkFHRSIsImNyZWF0ZU9yVXBkYXRlU3ViIiwiRUdNQ2xpZW50IiwidG9waWNOYW1lIiwic2VydmljZU5hbWUiLCJzdWJOYW1lIiwiZW5kcG9pbnRVcmwiLCJldmVudFR5cGVzIiwic2NvcGUiLCJwcm9wZXJ0aWVzIiwiZGVhZExldHRlckRlc3RpbmF0aW9uIiwiZW5kcG9pbnRUeXBlIiwiYmxvYkNvbnRhaW5lck5hbWUiLCJyZXNvdXJjZUlkIiwiZGVzdGluYXRpb24iLCJpbmNsdWRlZEV2ZW50VHlwZXMiLCJyZXRyeVBvbGljeSIsImV2ZW50VGltZVRvTGl2ZUluTWludXRlcyIsIm1heERlbGl2ZXJ5QXR0ZW1wdHMiLCJldmVudERlbGl2ZXJ5U2NoZW1hIiwiZXZlbnRTdWJzY3JpcHRpb25zIiwiY3JlYXRlT3JVcGRhdGUiLCJjcmVhdGVFbmRwb2ludFVybCIsImVudmlyb25tZW50IiwicG9zdGZpeCIsImFwaWtleSIsImNyZWF0ZVRvcGljTmFtZSIsImNyZWF0ZVN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uIiwiY29uc29sZSIsImxvZyIsImNvbmZpZ19lbnZpcm9ubWVudCIsInZhcmlhYmxlcyIsImNvbm5lY3RvciIsImV2ZW50c2xvZ2dlciIsInV0aWxzX0tFWV9WQVVMVF9VUkwiLCJ1dGlsc19LRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lEIiwidXRpbHNfS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQiLCJsb2FkRW52RmlsZSIsImVudkZpbGUiLCJwYXJzZSIsImV4dGVybmFsX2ZzX2RlZmF1bHQiLCJyZWFkRmlsZVN5bmMiLCJ2b3JwYWwiLCJleHRlcm5hbF92b3JwYWxfZGVmYXVsdCIsImNvbW1hbmQiLCJvcHRpb24iLCJhY3Rpb24iLCJhcmdzIiwidGhpcyIsInVzZXIiLCJBUElLZXlFbmNyS2V5TmFtZSIsIkFQSVNlY3JldEVuY3JLZXlOYW1lIiwiQVBJS2V5U2VjcmV0TmFtZSIsIkFQSVNlY3JldFNlY3JldE5hbWUiLCJvcHRpb25zIiwidG9TdHJpbmciLCJleHRlcm5hbF91dWlkXyIsIkVudiIsImNyZWRlbnRpYWxzIiwibXNfcmVzdF9ub2RlYXV0aF8iLCJhcm1fZXZlbnRncmlkXyIsInV0aWxzX2dldENsaWVudCIsImFsbEVuZHBvaW50cyIsImZvckVhY2giLCJTZXQiLCJtYXAiLCJlbmRwb2ludCIsImVuZHBvaW50cyIsImNyZWF0ZVN1YnNjcmlwdGlvbnNMaXN0IiwidG9waWNTdWJzY3JpcHRpb25zIiwic3ViIiwiaW5jbHVkZXMiLCJ3cml0ZUZpbGVTeW5jIiwiZ2VuZXJhdGVFbnZWYXJzTGlzdCIsImVudlNldFJlc3VsdCIsIlByb21pc2UiLCJhbGwiLCJyZXBsYWNlIiwic2V0U2VjcmV0RW52VmFycyIsImRlbGltaXRlciIsInNob3ciLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoibUVBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTBEQSxPQXJEQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxl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Z0JBQUFrQixTSm1DQTNMLGVBQUFpSyxHQUNBLE1BQUFpQixFQUFBRCxLQUNBLElBQUFDLEVBRUEsWUFEQVYsUUFBQUMsSUFBQSwrQ0FHQSxNQUFBNkMsRUFBQSxJQUF3QnBDLFNBQ3hCcUMsUUFBQUMsSUFDQXBRLE9BQUE0RyxLQUFBa0gsR0FBQTJCLElBQUE3TSxnQkFDQXVOLFFBQUFDLElBQ0FwUSxPQUFBNEcsS0FBQWtILEVBQUFqTixJQUFBNE8sSUFBQTdNLFVBQ0EsTUFBQXFCLEtBQWdDcEQsS0FBT2dLLEtBQVlnQyxJQUFZd0QsUUFDL0QsS0FDQSxLQUVBakQsUUFBQUMsSUFBQXBKLEdBQ0FtSixRQUFBQyxJQUFBUyxFQUFBak4sR0FBQWdLLFVBQ2dCOUcsRUFBUyxDQUN6QmxCLElBQWlCNkssR0FDakJuTSxTQUFzQm9NLEdBQ3RCN0ssVUFBdUI4SyxHQUN2QjVKLFlBQUE4SixFQUFBak4sR0FBQWdLLEdBQ0E1RyxlQUVBaU0sRUFBQXJQLEdBQUFnSyxHQUFBNUcsUUFNRStKLEdBQUEzTCxFQUFFMk4sY0FBQSxvQkFBQW5NLEtBQUFDLFVBQUFvTSxJSWhFSUksQ0FBZ0IvQixFQUFBVSxPSDBCeEJmLEdBQUFxQyxVQUFBLFFBQUFDLDZDSW5DQW5SLEVBQUFELFFBQUFxUixRQUFBLGlFQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsc0RDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSw2Q0NBQXBSLEVBQUFELFFBQUFxUixRQUFBLCtDQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsaUNDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSwwQkNBQXBSLEVBQUFELFFBQUFxUixRQUFBLDhCQ0FBcFIsRUFBQUQsUUFBQXFSLFFBQUEsZ0NDQUFwUixFQUFBRCxRQUFBcVIsUUFBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiaW1wb3J0IFZFcnJvciBmcm9tIFwidmVycm9yXCI7XG5pbXBvcnQgS2V5VmF1bHQgZnJvbSBcImF6dXJlLWtleXZhdWx0XCI7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkNvbnRleHQgfSBmcm9tIFwiYWRhbC1ub2RlXCI7XG5cbi8qKlxuICog0JrQu9C40LXQvdGCINC6INGB0LvRg9C20LHQtSBBenVyZSBLZXlWYXVsdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9GA0LjQu9C+0LbQtdC90LjRj1xuICogQHBhcmFtIHtzdHJpbmd9IHNlY3JldCDQv9Cw0YDQvtC70Ywg0L/RgNC40LvQvtC20LXQvdC40Y9cbiAqIEByZXR1cm5zIHtvYmplY3R9IEtleVZhdWx0Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudChjbGllbnRJZCwgc2VjcmV0KSB7XG4gIHRyeSB7XG4gICAgLy8gQ2FsbGJhY2sgZm9yIEFEQUwgYXV0aGVudGljYXRpb24uXG4gICAgY29uc3QgYWRhbENhbGxiYWNrID0gKGNoYWxsZW5nZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXV0aGVudGljYXRpb25Db250ZXh0KGNoYWxsZW5nZS5hdXRob3JpemF0aW9uKTtcbiAgICAgIHJldHVybiBjb250ZXh0LmFjcXVpcmVUb2tlbldpdGhDbGllbnRDcmVkZW50aWFscyhcbiAgICAgICAgY2hhbGxlbmdlLnJlc291cmNlLFxuICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgc2VjcmV0LFxuICAgICAgICAoZXJyLCB0b2tlblJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBLZXlWYXVsdENyZWRlbnRpYWxzIGNhbGxiYWNrIGV4cGVjdHMgYW4gZXJyb3IsIGlmIGFueSwgYXMgdGhlIGZpcnN0IHBhcmFtZXRlci5cbiAgICAgICAgICAvLyBJdCB0aGVuIGV4cGVjdHMgYSB2YWx1ZSBmb3IgdGhlIEhUVFAgJ0F1dGhvcml6YXRpb24nIGhlYWRlciwgd2hpY2ggd2UgY29tcHV0ZSBiYXNlZCB1cG9uIHRoZSBhY2Nlc3MgdG9rZW4gb2J0YWluZWQgd2l0aCB0aGUgU1AgY2xpZW50IGNyZWRlbnRpYWxzLlxuICAgICAgICAgIC8vIFRoZSB0b2tlbiB0eXBlIHdpbGwgZ2VuZXJhbGx5IGVxdWFsICdCZWFyZXInIC0gaW4gc29tZSB1c2VyLXNwZWNpZmljIHNpdHVhdGlvbnMsIGEgZGlmZmVyZW50IHR5cGUgb2YgdG9rZW4gbWF5IGJlIGlzc3VlZC5cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgYCR7dG9rZW5SZXNwb25zZS50b2tlblR5cGV9ICR7dG9rZW5SZXNwb25zZS5hY2Nlc3NUb2tlbn1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBuZXcgS2V5VmF1bHQuS2V5VmF1bHRDbGllbnQoXG4gICAgICBuZXcgS2V5VmF1bHQuS2V5VmF1bHRDcmVkZW50aWFscyhhZGFsQ2FsbGJhY2spXG4gICAgKTtcblxuICAgIHJldHVybiBrZXlWYXVsdENsaWVudDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgVkVycm9yKFxuICAgICAgeyBuYW1lOiBcIktleVZhdWx0RXJyb3JcIiwgY2F1c2U6IGVycm9yIH0sXG4gICAgICBcIkZhaWxlZCB0byBjcmVhdGUgS2V5VmF1bHQgY2xpZW50XCJcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldENsaWVudDtcbiIsImltcG9ydCBWRXJyb3IgZnJvbSBcInZlcnJvclwiO1xuaW1wb3J0IEtleVZhdWx0IGZyb20gXCJhenVyZS1rZXl2YXVsdFwiO1xuaW1wb3J0IGdldENsaWVudCBmcm9tIFwiLi9jbGllbnRcIjtcblxuLyoqXG4gKiDQodC+0LfQtNCw0L3QuNC1INC90L7QstC+0LPQviDQutC70Y7Rh9CwXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBBenVyZSBLZXkgVmF1bHQgVVJJXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQgQXp1cmUgS2V5IFZhdWx0IENsaWVudCBJZCAoU2VydmljZSBwcmluY2lwYWwpXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwU2VjcmV0IEF6dXJlIEtleSBWYXVsdCBBcHBsaWNhdGlvbiBTZWNyZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlOYW1lINC40LzRj1xuICogQHJldHVybnMge3N0cmluZ30g0LLQtdGA0YHQuNGPXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUtleSh7IHVyaSwgY2xpZW50SWQsIGFwcFNlY3JldCwga2V5TmFtZSB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBnZXRDbGllbnQoY2xpZW50SWQsIGFwcFNlY3JldCk7XG5cbiAgICBjb25zdCBrZXlPcGVyYXRpb25zID0gW1wiZW5jcnlwdFwiLCBcImRlY3J5cHRcIl07XG4gICAgY29uc3Qga2V5T3B0aW9ucyA9IHtcbiAgICAgIGtleVNpemU6IDQwOTYsXG4gICAgICBrZXlPcHM6IGtleU9wZXJhdGlvbnNcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQga2V5VmF1bHRDbGllbnQuY3JlYXRlS2V5KFxuICAgICAgdXJpLFxuICAgICAga2V5TmFtZSxcbiAgICAgIFwiUlNBXCIsXG4gICAgICBrZXlPcHRpb25zXG4gICAgKTtcblxuICAgIGNvbnN0IGtleUlkID0gS2V5VmF1bHQucGFyc2VLZXlJZGVudGlmaWVyKHJlc3VsdC5rZXkua2lkKTtcbiAgICByZXR1cm4ga2V5SWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IFZFcnJvcihcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxuICAgICAgXCJGYWlsZWQgdG8gY3JlYXRlIG5ldyBrZXlcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlS2V5O1xuIiwiaW1wb3J0IFZFcnJvciBmcm9tIFwidmVycm9yXCI7XG5pbXBvcnQgZ2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudFwiO1xuXG4vKipcbiAqINCo0LjRhNGA0L7QstCw0L3QuNC1INGB0L7QvtCx0YnQtdC90LjRj1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgQXp1cmUgS2V5IFZhdWx0IFVSSVxuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIEF6dXJlIEtleSBWYXVsdCBDbGllbnQgSWQgKFNlcnZpY2UgcHJpbmNpcGFsKVxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFNlY3JldCBBenVyZSBLZXkgVmF1bHQgQXBwbGljYXRpb24gU2VjcmV0XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUg0YHQvtC+0LHRidC10L3QuNC1XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5TmFtZSDQuNC80Y8g0LrQu9GO0YfQsFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVZlcnNpb24g0LLQtdGA0YHQuNGPINC60LvRjtGH0LBcbiAqIEByZXR1cm5zIHtqc29ufSDQt9Cw0YjQuNGE0YDQvtCy0LDQvdC90L7QtSDRgdC+0L7QsdGJ0LXQvdC40LVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW5jcnlwdCh7XG4gIHVyaSxcbiAgY2xpZW50SWQsXG4gIGFwcFNlY3JldCxcbiAgdmFsdWUsXG4gIGtleU5hbWUsXG4gIGtleVZlcnNpb24gPSBcIlwiXG59KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBnZXRDbGllbnQoY2xpZW50SWQsIGFwcFNlY3JldCk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBrZXlWYXVsdENsaWVudC5lbmNyeXB0KFxuICAgICAgdXJpLFxuICAgICAga2V5TmFtZSxcbiAgICAgIGtleVZlcnNpb24sXG4gICAgICBcIlJTQS1PQUVQXCIsXG4gICAgICBCdWZmZXIuZnJvbSh2YWx1ZSlcbiAgICApO1xuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5yZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBWRXJyb3IoXG4gICAgICB7IG5hbWU6IFwiS2V5VmF1bHRFcnJvclwiLCBjYXVzZTogZXJyb3IgfSxcbiAgICAgIFwiRmFpbGVkIHRvIGVuY3J5cHQgdmFsdWVcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZW5jcnlwdDtcbiIsImltcG9ydCBWRXJyb3IgZnJvbSBcInZlcnJvclwiO1xuaW1wb3J0IEtleVZhdWx0IGZyb20gXCJhenVyZS1rZXl2YXVsdFwiO1xuaW1wb3J0IGdldENsaWVudCBmcm9tIFwiLi9jbGllbnRcIjtcblxuLyoqXG4gKiDQodC+0YXRgNCw0L3QtdC90LjQtSDRgdC10LrRgNC10YLQsCDQsiDRhdGA0LDQvdC40LvQuNGJ0LVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIEF6dXJlIEtleSBWYXVsdCBVUklcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBBenVyZSBLZXkgVmF1bHQgQ2xpZW50IElkIChTZXJ2aWNlIHByaW5jaXBhbClcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBTZWNyZXQgQXp1cmUgS2V5IFZhdWx0IEFwcGxpY2F0aW9uIFNlY3JldFxuICogQHBhcmFtIHtzdHJpbmd9IHNlY3JldFZhbHVlINC30L3QsNGH0LXQvdC40LVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNyZXROYW1lINC40LzRj1xuICogQHJldHVybnMge2pzb259INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldFNlY3JldCh7XG4gIHVyaSxcbiAgY2xpZW50SWQsXG4gIGFwcFNlY3JldCxcbiAgc2VjcmV0VmFsdWUsXG4gIHNlY3JldE5hbWVcbn0pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBrZXlWYXVsdENsaWVudCA9IGdldENsaWVudChjbGllbnRJZCwgYXBwU2VjcmV0KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBrZXlWYXVsdENsaWVudC5zZXRTZWNyZXQodXJpLCBzZWNyZXROYW1lLCBzZWNyZXRWYWx1ZSk7XG4gICAgY29uc3Qgc2VjcmV0SWQgPSBLZXlWYXVsdC5wYXJzZVNlY3JldElkZW50aWZpZXIocmVzdWx0LmlkKTtcbiAgICByZXR1cm4gc2VjcmV0SWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IFZFcnJvcihcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxuICAgICAgXCJGYWlsZWQgdG8gc2V0IHNlY3JldFwiXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRTZWNyZXQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVLZXksIGVuY3J5cHQsIHNldFNlY3JldCB9IGZyb20gXCJjcHpLZXlWYXVsdFwiO1xuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52LXNhZmVcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuY29uc3Qge1xuICBLRVlfVkFVTFRfVVJMLFxuICBLRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lELFxuICBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVFxufSA9IHByb2Nlc3MuZW52O1xuYXN5bmMgZnVuY3Rpb24gZW5jcnlwdEFuZFNhdmUoa2V5TmFtZSwgc2VjcmV0TmFtZSwgdmFsdWUpIHtcbiAgYXdhaXQgY3JlYXRlS2V5KHtcbiAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXG4gICAgY2xpZW50SWQ6IEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXG4gICAgYXBwU2VjcmV0OiBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVCxcbiAgICBrZXlOYW1lXG4gIH0pO1xuICBjb25zdCBlbmNyeXB0ZWREYXRhID0gYXdhaXQgZW5jcnlwdCh7XG4gICAgdXJpOiBLRVlfVkFVTFRfVVJMLFxuICAgIGNsaWVudElkOiBLRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lELFxuICAgIGFwcFNlY3JldDogS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQsXG4gICAgdmFsdWUsXG4gICAga2V5TmFtZVxuICB9KTtcbiAgY29uc3Qgc2VjcmV0ID0gYXdhaXQgc2V0U2VjcmV0KHtcbiAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXG4gICAgY2xpZW50SWQ6IEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXG4gICAgYXBwU2VjcmV0OiBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVCxcbiAgICBzZWNyZXRWYWx1ZTogZW5jcnlwdGVkRGF0YSxcbiAgICBzZWNyZXROYW1lXG4gIH0pO1xuICByZXR1cm4gc2VjcmV0LnZlcnNpb247XG59XG5cbmV4cG9ydCB7IGVuY3J5cHRBbmRTYXZlIH07XG4iLCJjb25zdCBDT05UUk9MX1NFUlZJQ0UgPSBcImNvbnRyb2xcIjtcbmNvbnN0IE1BUktFVFdBVENIRVJfU0VSVklDRSA9IFwibWFya2V0d2F0Y2hlclwiO1xuY29uc3QgQ0FORExFQkFUQ0hFUl9TRVJWSUNFID0gXCJjYW5kbGViYXRjaGVyXCI7XG5jb25zdCBFWFdBVENIRVJfU0VSVklDRSA9IFwiZXh3YXRjaGVyXCI7XG5jb25zdCBJTVBPUlRFUl9TRVJWSUNFID0gXCJpbXBvcnRlclwiO1xuY29uc3QgQURWSVNFUl9TRVJWSUNFID0gXCJhZHZpc2VyXCI7XG5jb25zdCBUUkFERVJfU0VSVklDRSA9IFwidHJhZGVyXCI7XG5jb25zdCBCQUNLVEVTVEVSX1NFUlZJQ0UgPSBcImJhY2t0ZXN0ZXJcIjtcbmNvbnN0IEVWRU5UU19MT0dHRVJfU0VSVklDRSA9IFwiZXZlbnRzbG9nZ2VyXCI7XG5jb25zdCBDT05ORUNUT1JfU0VSVklDRSA9IFwiY29ubmVjdG9yXCI7XG5jb25zdCBBVVRIX1NFUlZJQ0UgPSBcImF1dGhcIjtcblxuZXhwb3J0IHtcbiAgQ09OVFJPTF9TRVJWSUNFLFxuICBNQVJLRVRXQVRDSEVSX1NFUlZJQ0UsXG4gIENBTkRMRUJBVENIRVJfU0VSVklDRSxcbiAgRVhXQVRDSEVSX1NFUlZJQ0UsXG4gIElNUE9SVEVSX1NFUlZJQ0UsXG4gIEFEVklTRVJfU0VSVklDRSxcbiAgVFJBREVSX1NFUlZJQ0UsXG4gIEJBQ0tURVNURVJfU0VSVklDRSxcbiAgRVZFTlRTX0xPR0dFUl9TRVJWSUNFLFxuICBDT05ORUNUT1JfU0VSVklDRSxcbiAgQVVUSF9TRVJWSUNFXG59O1xuIiwiY29uc3QgQkFTRV9FVkVOVCA9IHtcbiAgZGF0YVNjaGVtYToge1xuICAgIGlkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJBbiB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50LlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgdG9waWM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSByZXNvdXJjZSBwYXRoIG9mIHRoZSBldmVudCBzb3VyY2UuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBzdWJqZWN0OiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHJlc291cmNlIHBhdGggcmVsYXRpdmUgdG8gdGhlIHRvcGljIHBhdGguXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IHRydWVcbiAgICB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkV2ZW50IGRhdGEgc3BlY2lmaWMgdG8gdGhlIGV2ZW50IHR5cGUuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiXG4gICAgfSxcbiAgICBldmVudFR5cGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSB0eXBlIG9mIHRoZSBldmVudCB0aGF0IG9jY3VycmVkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXZlbnRUaW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgdGltZSAoaW4gVVRDKSB0aGUgZXZlbnQgd2FzIGdlbmVyYXRlZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIG1ldGFkYXRhVmVyc2lvbjoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBldmVudCBtZXRhZGF0YS5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGRhdGFWZXJzaW9uOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgc2NoZW1hIHZlcnNpb24gb2YgdGhlIGRhdGEgb2JqZWN0LlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgQkFTRV9FUlJPUiA9IHtcbiAgdHlwZTogXCJvYmplY3RcIixcbiAgZGVzY3JpcHRpb246IFwiRXJyb3Igb2JqZWN0IGlmIHNvbWV0aGluZyBnb2VzIHdyb25nLlwiLFxuICBvcHRpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJFcnJvciBuYW1lLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgbWVzc2FnZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiRXJyb3IgbWVzc2FnZS5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGluZm86IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIGRldGFpbHMuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFNVQl9WQUxJREFUSU9OX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiTWljcm9zb2Z0LkV2ZW50R3JpZC5TdWJzY3JpcHRpb25WYWxpZGF0aW9uRXZlbnRcIlxufTtcblxuY29uc3QgU1VCX0RFTEVURURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJNaWNyb3NvZnQuRXZlbnRHcmlkLlN1YnNjcmlwdGlvbkRlbGV0ZWRFdmVudFwiXG59O1xuXG5leHBvcnQgeyBCQVNFX0VWRU5ULCBCQVNFX0VSUk9SLCBTVUJfVkFMSURBVElPTl9FVkVOVCwgU1VCX0RFTEVURURfRVZFTlQgfTtcbiIsImNvbnN0IENBTkRMRUJBVENIRVJfU0VUVElOR1MgPSB7XG4gIGRlYnVnOiB7XG4gICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBwcm94eToge1xuICAgIGRlc2NyaXB0aW9uOiBcIlByb3h5IGVuZHBvaW50LlwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgb3B0aW9uYWw6IHRydWUsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH0sXG4gIHJlcXVpcmVkSGlzdG9yeU1heEJhcnM6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJMb2FkIGhpc3RvcnkgZGF0YSBmcm9tIGNhY2hlLlwiLFxuICAgIHR5cGU6IFwiaW50XCIsXG4gICAgaW50ZWdlcjogdHJ1ZSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59O1xuXG5jb25zdCBBRFZJU0VSX1NFVFRJTkdTID0ge1xuICBkZWJ1Zzoge1xuICAgIGRlc2NyaXB0aW9uOiBcIkRlYnVnIG1vZGUuXCIsXG4gICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgc3RyYXRlZ3lQYXJhbWV0ZXJzOiB7XG4gICAgZGVzY3JpcHRpb246IFwiU3RyYXRlZ3kgcGFyYW1ldGVycy5cIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIHJlcXVpcmVkSGlzdG9yeUNhY2hlOiB7XG4gICAgZGVzY3JpcHRpb246IFwiTG9hZCBoaXN0b3J5IGRhdGEgZnJvbSBjYWNoZS5cIixcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHJlcXVpcmVkSGlzdG9yeU1heEJhcnM6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJMb2FkIGhpc3RvcnkgZGF0YSBmcm9tIGNhY2hlLlwiLFxuICAgIHR5cGU6IFwiaW50XCIsXG4gICAgaW50ZWdlcjogdHJ1ZSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59O1xuXG5jb25zdCBLRVlfVkFVTFRfU0VDUkVUID0ge1xuICBlbmNyeXB0aW9uS2V5TmFtZToge1xuICAgIGRlc2NyaXB0aW9uOiBcIk5hbWUgb2YgZW5jcnlwdGlvbiBrZXlcIixcbiAgICB0eXBlOiBcInN0cmluZ1wiXG4gIH0sXG4gIG5hbWU6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJTZWNyZXQgbmFtZVwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgfSxcbiAgdmVyc2lvbjoge1xuICAgIGRlc2NyaXB0aW9uOiBcIlNlY3JldCB2ZXJzaW9uXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIlxuICB9XG59O1xuY29uc3QgVFJBREVSX1NFVFRJTkdTID0ge1xuICBtb2RlOiB7XG4gICAgZGVzY3JpcHRpb246IFwiU2VydmljZSBydW4gbW9kZS5cIixcbiAgICB0eXBlOiBcInRyYWRlTW9kZVwiLFxuICAgIHZhbHVlczogW1wiZW11bGF0b3JcIiwgXCJyZWFsdGltZVwiXSxcbiAgICByZXF1aXJlZFByb3BzOiB7XG4gICAgICByZWFsdGltZTogW1wia2V5cy5tYWluLkFQSUtleVwiLCBcImtleXMubWFpbi5BUElTZWNyZXRcIl1cbiAgICB9LFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIGRlYnVnOiB7XG4gICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBzbGlwcGFnZVN0ZXA6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBTbGlwcGFnZSBTdGVwLlwiLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgZGV2aWF0aW9uOiB7XG4gICAgZGVzY3JpcHRpb246IFwiUHJpY2UgZGV2aWF0aW9uXCIsXG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICB2b2x1bWU6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJVc2VyIHRyYWRlIHZvbHVtZVwiLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgbXVsdGlQb3NpdGlvbjoge1xuICAgIGRlc2NyaXB0aW9uOiBcIk11bHRpcGxlIGFjdGl2ZSBwb3NpdGlvbnMgYXZhaWxhYmxlXCIsXG4gICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgZXhjaGFuZ2VQYXJhbXM6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJVc2VyIHNwZWNpZmljIGV4Y2hhbmdlIHBhcmFtZXRlcnNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIGtleXM6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBBUEkgS2V5cyBJbmZvXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wczoge1xuICAgICAgbWFpbjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJNYWluIEV4Y2hhbmdlIEFQSSBLZXlzIEluZm9cIixcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBBUElLZXk6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1haW4gRXhjaGFuZ2UgQVBJIEtleVwiLFxuICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICAgIHByb3BzOiBLRVlfVkFVTFRfU0VDUkVUXG4gICAgICAgICAgfSxcbiAgICAgICAgICBBUElTZWNyZXQ6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1haW4gRXhjaGFuZ2UgQVBJIFNlY3JldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICAgIHByb3BzOiBLRVlfVkFVTFRfU0VDUkVUXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3BhcmU6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU3BhcmUgRXhjaGFuZ2UgQVBJIEtleXMgSW5mb1wiLFxuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIEFQSUtleToge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3BhcmUgRXhjaGFuZ2UgQVBJIEtleVwiLFxuICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICAgIHByb3BzOiBLRVlfVkFVTFRfU0VDUkVUXG4gICAgICAgICAgfSxcbiAgICAgICAgICBBUElTZWNyZXQ6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNwYXJlIEV4Y2hhbmdlIEFQSSBTZWNyZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBwcm9wczogS0VZX1ZBVUxUX1NFQ1JFVFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICAgIH1cbiAgICB9LFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH1cbn07XG5cbmNvbnN0IEJBQ0tURVNURVJfU0VUVElOR1MgPSB7XG4gIGRlYnVnOiB7XG4gICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59O1xuZXhwb3J0IHtcbiAgQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyxcbiAgQURWSVNFUl9TRVRUSU5HUyxcbiAgVFJBREVSX1NFVFRJTkdTLFxuICBCQUNLVEVTVEVSX1NFVFRJTkdTXG59O1xuIiwiaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XG5pbXBvcnQgeyBBRFZJU0VSX1NFVFRJTkdTIH0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0JfQsNC/0YPRgdC6INC90L7QstC+0LPQviDRgdC+0LLQtdGC0L3QuNC60LBcbiAqL1xuY29uc3QgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5BZHZpc2VyLlN0YXJ0XCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgcm9ib3RJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcbiAgICAgIHR5cGU6IFwiaW50XCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxuICAgIGFzc2V0OiB7IGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICB0aW1lZnJhbWU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRpbWVmcmFtZSBpbiBtaW51dGVzLlwiLFxuICAgICAgdHlwZTogXCJpbnRcIlxuICAgIH0sXG4gICAgc3RyYXRlZ3lOYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTdHJhdGVneSBmaWxlIG5hbWUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBzZXR0aW5nczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogQURWSVNFUl9TRVRUSU5HU1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiDQodC+0LHRi9GC0LjQtSAtINCe0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LLQtdGC0L3QuNC60LBcbiAqL1xuY29uc3QgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkFkdmlzZXIuU3RvcFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICog0KHQvtCx0YvRgtC40LUgLSDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QsiDRgdC+0LLQtdGC0L3QuNC60LBcbiAqL1xuY29uc3QgVEFTS1NfQURWSVNFUl9VUERBVEVfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5VcGRhdGVcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBzZXR0aW5nczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogQURWSVNFUl9TRVRUSU5HU1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiAg0KHQvtCx0YvRgtC40LUgLSDQodC+0LLQtdGC0L3QuNC6INC30LDQv9GD0YnQtdC9XG4gKi9cbmNvbnN0IFRBU0tTX0FEVklTRVJfU1RBUlRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5BZHZpc2VyLlN0YXJ0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0KHQvtCy0LXRgtC90LjQuiDQvtGB0YLQsNC90L7QstC70LXQvVxuICovXG5jb25zdCBUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQWR2aXNlci5TdG9wcGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuLyoqXG4gKiDQodC+0LHRi9GC0LjQtSAtINCf0LDRgNCw0LzQtdGC0YDRiyDRgdC+0LLQtdGC0L3QuNC60LAg0L7QsdC90L7QstC70LXQvdGLXG4gKi9cbmNvbnN0IFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5BZHZpc2VyLlVwZGF0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG5leHBvcnQge1xuICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5UXG59O1xuIiwiaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XG5cbmNvbnN0IENBTkRMRVNfTkVXQ0FORExFX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkNhbmRsZXMuTmV3Q2FuZGxlXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIGlkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgQ2FuZGxlIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgdGltZWZyYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcbiAgICAgIHR5cGU6IFwiaW50XCJcbiAgICB9LFxuICAgIHRpbWU6IHsgZGVzY3JpcHRpb246IFwiQ2FuZGxlIHRpbWUgaW4gc2Vjb25kcy5cIiwgdHlwZTogXCJudW1iZXJcIiB9LFxuICAgIHRpbWVzdGFtcDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlIHRpbWVzdGFtcCBpbiBVVEMuXCIsXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcbiAgICB9LFxuICAgIG9wZW46IHsgZGVzY3JpcHRpb246IFwiQ2FuZGxlIE9wZW4gUHJpY2UuXCIsIHR5cGU6IFwibnVtYmVyXCIgfSxcbiAgICBjbG9zZTogeyBkZXNjcmlwdGlvbjogXCJDYW5kbGUgQ2xvc2UgUHJpY2UuXCIsIHR5cGU6IFwibnVtYmVyXCIgfSxcbiAgICBoaWdoOiB7IGRlc2NyaXB0aW9uOiBcIkNhbmRsZSBIaWdoZXN0IFByaWNlLlwiLCB0eXBlOiBcIm51bWJlclwiIH0sXG4gICAgbG93OiB7IGRlc2NyaXB0aW9uOiBcIlRyYWRlIExvd2VzdCBQcmljZS5cIiwgdHlwZTogXCJudW1iZXJcIiB9LFxuICAgIHZvbHVtZTogeyBkZXNjcmlwdGlvbjogXCJDYW5kbGUgVm9sdW1lLlwiLCB0eXBlOiBcIm51bWJlclwiIH1cbiAgfVxufTtcbmNvbnN0IENBTkRMRVNfSEFORExFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5DYW5kbGVzLkhhbmRsZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgaWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBDYW5kbGUgSWQuXCIsIHR5cGU6IFwic3RyaW5nXCIsIGVtcHR5OiBmYWxzZSB9LFxuICAgIHNlcnZpY2U6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNldmljZSBuYW1lIGhhbmRlbGluZyBldmVudFwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW1wiYWR2aXNlclwiLCBcInRyYWRlclwiXVxuICAgIH0sXG4gICAgc3VjY2Vzczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiU3VjY2VzcyBleGVjdXRpb24gbGlzdFwiLFxuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgaXRlbXM6IFwic3RyaW5nXCIsXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZXJyb3I6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIGV4ZWN1dGlvbiBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHN1Y2Nlc3NQZW5kaW5nOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTdWNjZXNzIHF1ZXVlZCBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczogXCJzdHJpbmdcIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBlcnJvclBlbmRpbmc6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIHF1ZXVlZCBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IENBTkRMRVNfSEFORExFRF9FVkVOVCwgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQgfTtcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xuaW1wb3J0IHtcbiAgQURWSVNFUl9TRVRUSU5HUyxcbiAgVFJBREVSX1NFVFRJTkdTLFxuICBCQUNLVEVTVEVSX1NFVFRJTkdTXG59IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xuXG5jb25zdCBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RhcnRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICByb2JvdElkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxuICAgICAgdHlwZTogXCJpbnRcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgdXNlcklkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVc2VyIHVuaXEgSWQuXCIsXG4gICAgICB0eXBlOiBcInV1aWRcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgc3RyYXRlZ3lOYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTdHJhdGVneSBmaWxlIG5hbWUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgdGltZWZyYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcbiAgICAgIHR5cGU6IFwiaW50XCJcbiAgICB9LFxuICAgIGRhdGVGcm9tOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJCYWNrdGVzdCBzdGFydCBkYXRlLlwiLFxuICAgICAgdHlwZTogXCJkYXRlZnJvbVwiXG4gICAgfSxcbiAgICBkYXRlVG86IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0IGVuZCBkYXRlLlwiLFxuICAgICAgdHlwZTogXCJkYXRldG9cIlxuICAgIH0sXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0ZXIgc2V0dGluZ3MuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgcHJvcHM6IEJBQ0tURVNURVJfU0VUVElOR1NcbiAgICB9LFxuICAgIGFkdmlzZXJTZXR0aW5nczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogQURWSVNFUl9TRVRUSU5HU1xuICAgIH0sXG4gICAgdHJhZGVyU2V0dGluZ3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTXG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQmFja3Rlc3Rlci5TdG9wXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RhcnRlZFwiLFxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG5jb25zdCBUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQmFja3Rlc3Rlci5TdG9wcGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9GSU5JU0hFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5CYWNrdGVzdGVyLkZpbmlzaGVkXCIsXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlRcbn07XG4iLCJjb25zdCBWQUxJRF9USU1FRlJBTUVTID0gWzEsIDUsIDE1LCAzMCwgNjAsIDEyMCwgMjQwLCAxNDQwXTtcblxuZXhwb3J0IHsgVkFMSURfVElNRUZSQU1FUyB9O1xuIiwiaW1wb3J0IHsgVkFMSURfVElNRUZSQU1FUyB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS90aW1lZnJhbWVzXCI7XG5pbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcbmltcG9ydCB7IENBTkRMRUJBVENIRVJfU0VUVElOR1MgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcblxuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0YXJ0XCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgcHJvdmlkZXJUeXBlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJEYXRhIHByb3ZpZGVyIHR5cGUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbXCJjY3h0XCJdLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxuICAgIGFzc2V0OiB7IGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICB0aW1lZnJhbWVzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJMaXN0IG9mIHRpbWVmcmFtZXMgaW4gbWludXRlcy5cIixcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgIGl0ZW1zOiBcIm51bWJlclwiLFxuICAgICAgZW51bTogVkFMSURfVElNRUZSQU1FU1xuICAgIH0sXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbmRsZWJhdGNoZXIgc2V0dGluZ3MuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgcHJvcHM6IENBTkRMRUJBVENIRVJfU0VUVElOR1NcbiAgICB9XG4gIH1cbn07XG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5TdG9wXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5VcGRhdGVcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBzZXR0aW5nczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQ2FuZGxlYmF0Y2hlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogQ0FORExFQkFUQ0hFUl9TRVRUSU5HU1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0YXJ0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkNhbmRsZWJhdGNoZXIuU3RvcHBlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5VcGRhdGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFRF9FVkVOVFxufTtcbiIsImltcG9ydCB7IFZBTElEX1RJTUVGUkFNRVMgfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvdGltZWZyYW1lc1wiO1xuaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XG5cbmNvbnN0IFRBU0tTX0lNUE9SVEVSX1NUQVJUX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkltcG9ydGVyLlN0YXJ0XCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZGVidWc6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRlYnVnIG1vZGUuXCIsXG4gICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBwcm92aWRlclR5cGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRhdGEgcHJvdmlkZXIgdHlwZS5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtcImNjeHRcIl0sXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgY3VycmVuY3k6IHsgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIHRpbWVmcmFtZXM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRpbWVmcmFtZSBpbiBtaW51dGVzLlwiLFxuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgZW51bTogVkFMSURfVElNRUZSQU1FUyxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICByZXF1aXJlQmF0Y2hpbmc6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhdGNoIGxvYWRpbmcgY2FuZGxlc1wiLFxuICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgc2F2ZVRvQ2FjaGU6IHtcbiAgICAgIGRhdGFTY2hlbWE6IFwiU2F2ZSBjdXJyZW50IGxvYWRlZCBjYW5kbGVzIHRvIGNhY2hlXCIsXG4gICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICAvLyBUT0RPOiBkYXRlZnJvbS9kYXRldG8gY3VzdG9tIHZhbGlkYXRpb25cbiAgICBkYXRlRnJvbToge1xuICAgICAgZGVzY3JpcHRpb246IFwiSW1wb3J0IHN0YXJ0IGRhdGUuXCIsXG4gICAgICB0eXBlOiBcImRhdGVmcm9tXCJcbiAgICB9LFxuICAgIGRhdGVUbzoge1xuICAgICAgZGVzY3JpcHRpb246IFwiSW1wb3J0IGVuZCBkYXRlLlwiLFxuICAgICAgdHlwZTogXCJkYXRldG9cIlxuICAgIH0sXG4gICAgcHJveHk6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlByb3h5IGVuZHBvaW50LlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkltcG9ydGVyLlN0b3BcIixcbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5JbXBvcnRlci5TdGFydGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuY29uc3QgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5JbXBvcnRlci5TdG9wcHBlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5cbmNvbnN0IFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkltcG9ydGVyLkZpbmlzaGVkXCIsXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIFRBU0tTX0lNUE9SVEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVFxufTtcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xuXG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3RhcnRcIixcbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBkZWJ1Zzoge1xuICAgICAgZGVzY3JpcHRpb246IFwiRGVidWcgbW9kZS5cIixcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHByb3ZpZGVyVHlwZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiRGF0YSBwcm92aWRlciB0eXBlLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW1wi0YFyeXB0b9GBb21wYXJlXCJdLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHN1YnNjcmlwdGlvbnM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRhdGEgc3Vic2NyaXB0aW9ucyBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIGFzc2V0OiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLFxuICAgICAgICAgICAgdHlwZTogXCJjdXJyZW5jeVwiLFxuICAgICAgICAgICAgZW1wdHk6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsXG4gICAgICAgICAgICB0eXBlOiBcImN1cnJlbmN5XCIsXG4gICAgICAgICAgICBlbXB0eTogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5TdG9wXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3Vic2NyaWJlXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBzdWJzY3JpcHRpb25zOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJEYXRhIHN1YnNjcmlwdGlvbnMgbGlzdFwiLFxuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBhc3NldDoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIixcbiAgICAgICAgICAgIHR5cGU6IFwiY3VycmVuY3lcIixcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLFxuICAgICAgICAgICAgdHlwZTogXCJjdXJyZW5jeVwiLFxuICAgICAgICAgICAgZW1wdHk6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlVuc3Vic2NyaWJlXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiRGF0YSBzdWJzY3JpcHRpb25zIGxpc3RcIixcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgYXNzZXQ6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsXG4gICAgICAgICAgICB0eXBlOiBcImN1cnJlbmN5XCIsXG4gICAgICAgICAgICBlbXB0eTogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1cnJlbmN5OiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIixcbiAgICAgICAgICAgIHR5cGU6IFwiY3VycmVuY3lcIixcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlN0YXJ0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3RvcHBlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC4gLSAnbmFtZVByb3ZpZGVyJ1wiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlVwZGF0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuIC0gJ25hbWVQcm92aWRlcidcIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlRcbn07XG4iLCJpbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcbmltcG9ydCB7IFRSQURFUl9TRVRUSU5HUyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xuLyoqXG4gKiDQodC+0LHRi9GC0LjQtSAtINC30LDQv9GD0YHQuiDQvdC+0LLQvtCz0L4g0L/RgNC+0YLQvtGA0LPQvtCy0YnQuNC60LBcbiAqL1xuY29uc3QgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLlRyYWRlci5TdGFydFwiLFxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICByb2JvdElkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLiAtICdBZHZpc29yTmFtZSdcIixcbiAgICAgIHR5cGU6IFwiaW50XCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIHVzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxuICAgICAgdHlwZTogXCJ1dWlkXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGV4Y2hhbmdlOiB7IGRlc2NyaXB0aW9uOiBcIkV4Y2hhbmdlIGNvZGUuXCIsIHR5cGU6IFwiZXhjaGFuZ2VcIiB9LFxuICAgIGFzc2V0OiB7IGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICB0aW1lZnJhbWU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRpbWVmcmFtZSBpbiBtaW51dGVzLlwiLFxuICAgICAgdHlwZTogXCJpbnRcIlxuICAgIH0sXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlciBzZXR0aW5ncy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTXG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0J7RgdGC0LDQvdC+0LLQutCwINC/0YDQvtGC0L7RgNCz0L7QstGJ0LjQutCwXG4gKi9cbmNvbnN0IFRBU0tTX1RSQURFUl9TVE9QX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLlRyYWRlci5TdG9wXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiDQodC+0LHRi9GC0LjQtSAtINCe0LHQvdC+0LLQu9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyINC/0YDQvtGC0L7RgNCz0L7QstGJ0LjQutCwXG4gKi9cbmNvbnN0IFRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVHJhZGVyLlVwZGF0ZVwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIHNldHRpbmdzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUcmFkZXIgc2V0dGluZ3MuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgcHJvcHM6IFRSQURFUl9TRVRUSU5HU1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiDQodC+0LHRi9GC0LjQtSAtINCf0YDQvtGC0L7RgNCz0L7QstGJ0LjQuiDQt9Cw0L/Rg9GJ0LXQvVxuICovXG5jb25zdCBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5UcmFkZXIuU3RhcnRlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5cbi8qKlxuICog0KHQvtCx0YvRgtC40LUgLSDQn9GA0L7RgtC+0YDQs9C+0LLRidC40Log0L7RgdGC0LDQvdC+0LLQu9C10L1cbiAqL1xuY29uc3QgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVHJhZGVyLlN0b3BwZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0L/QsNGA0LDQvNC10YLRgNGLINC/0YDQvtGC0L7RgNCz0L7QstGJ0LjQutCwINC+0LHQvdC+0LLQu9C10L3Ri1xuICovXG5jb25zdCBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5UcmFkZXIuVXBkYXRlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICB0YXNrSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgdGFzayBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGVycm9yOiBCQVNFX0VSUk9SXG4gIH1cbn07XG5jb25zdCBUQVNLU19UUkFERVJfUlVOX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLlRyYWRlci5SdW5cIixcbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydCB7XG4gIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1VQREFURURfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9SVU5fRVZFTlRcbn07XG4iLCJpbXBvcnQgeyBWQUxJRF9USU1FRlJBTUVTIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL3RpbWVmcmFtZXNcIjtcbmltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xuaW1wb3J0IHsgQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xuXG5jb25zdCBFWFdBVENIRVJfU1RBUlRfUEFSQU1TID0ge1xuICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcbiAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gIGN1cnJlbmN5OiB7IGRlc2NyaXB0aW9uOiBcIlF1b3RlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgdGltZWZyYW1lczoge1xuICAgIGRlc2NyaXB0aW9uOiBcIkxpc3Qgb2YgdGltZWZyYW1lcyBpbiBtaW51dGVzLlwiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBpdGVtczogXCJudW1iZXJcIixcbiAgICBlbnVtOiBWQUxJRF9USU1FRlJBTUVTLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIG1hcmtldHdhdGNoZXJQcm92aWRlclR5cGU6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJNYXJrZXR3YXRjaGVyIGRhdGEgcHJvdmlkZXIgdHlwZS5cIixcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHZhbHVlczogW1wi0YFyeXB0b9GBb21wYXJlXCJdLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIGNhbmRsZWJhdGNoZXJQcm92aWRlclR5cGU6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGViYXRjaGVyIGRhdGEgcHJvdmlkZXIgdHlwZS5cIixcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHZhbHVlczogW1wiY2N4dFwiXSxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBjYW5kbGViYXRjaGVyU2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGViYXRjaGVyIHNldHRpbmdzLlwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcHM6IENBTkRMRUJBVENIRVJfU0VUVElOR1MsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfVxufTtcblxuY29uc3QgRVhXQVRDSEVSX1NUT1BfUEFSQU1TID0ge1xuICB0YXNrSWQ6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHdhdGNoZXIgaWQuXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBlbXB0eTogZmFsc2VcbiAgfVxufTtcblxuY29uc3QgRVhXQVRDSEVSX1VQREFURV9QQVJBTVMgPSB7XG4gIHRhc2tJZDoge1xuICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgd2F0Y2hlciBpZC5cIixcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGVtcHR5OiBmYWxzZVxuICB9LFxuICBjYW5kbGViYXRjaGVyU2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGViYXRjaGVyIHNldHRpbmdzLlwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcHM6IENBTkRMRUJBVENIRVJfU0VUVElOR1NcbiAgfVxufTtcblxuY29uc3QgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuRXh3YXRjaGVyLlN0YXJ0ZWRcIixcbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuY29uc3QgVEFTS1NfRVhXQVRDSEVSX1NUT1BQRURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuRXh3YXRjaGVyLlN0b3BwZWRcIixcbiAgZGF0YVNjaGVtYToge1xuICAgIHRhc2tJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgRVhXQVRDSEVSX1NUQVJUX1BBUkFNUyxcbiAgRVhXQVRDSEVSX1NUT1BfUEFSQU1TLFxuICBFWFdBVENIRVJfVVBEQVRFX1BBUkFNUyxcbiAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXG59O1xuIiwiaW1wb3J0IHsgQkFTRV9FUlJPUiB9IGZyb20gXCIuLi9iYXNlXCI7XG5pbXBvcnQge1xuICBCQUNLVEVTVEVSX1NFVFRJTkdTLFxuICBBRFZJU0VSX1NFVFRJTkdTLFxuICBUUkFERVJfU0VUVElOR1Ncbn0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XG5cbmNvbnN0IEJBQ0tURVNUX1NUQVJUX1BBUkFNUyA9IHtcbiAgcm9ib3RJZDoge1xuICAgIGRlc2NyaXB0aW9uOiBcIlJvYm90IHVuaXEgSWQuXCIsXG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICBlbXB0eTogZmFsc2VcbiAgfSxcbiAgdXNlcklkOiB7XG4gICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxuICAgIHR5cGU6IFwidXVpZFwiLFxuICAgIGVtcHR5OiBmYWxzZVxuICB9LFxuICBkYXRlRnJvbToge1xuICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0IHN0YXJ0IGRhdGUuXCIsXG4gICAgdHlwZTogXCJkYXRlZnJvbVwiXG4gIH0sXG4gIGRhdGVUbzoge1xuICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t0ZXN0IGVuZCBkYXRlLlwiLFxuICAgIHR5cGU6IFwiZGF0ZXRvXCJcbiAgfSxcbiAgc2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJCYWNrdGVzdGVyIHNldHRpbmdzLlwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcHM6IEJBQ0tURVNURVJfU0VUVElOR1MsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgYWR2aXNlclNldHRpbmdzOiB7XG4gICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciBzZXR0aW5ncy5cIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHByb3BzOiBBRFZJU0VSX1NFVFRJTkdTLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH0sXG4gIHRyYWRlclNldHRpbmdzOiB7XG4gICAgZGVzY3JpcHRpb246IFwiVHJhZGVyIHNldHRpbmdzLlwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcHM6IFRSQURFUl9TRVRUSU5HUyxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9XG59O1xuXG5jb25zdCBCQUNLVEVTVF9TVE9QX1BBUkFNUyA9IHtcbiAgdGFza0lkOiB7XG4gICAgZGVzY3JpcHRpb246IFwiVW5pcSB0YXNrIGlkLlwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH1cbn07XG5cbmNvbnN0IFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuQmFja3Rlc3QuU3RhcnRlZFwiLFxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG5jb25zdCBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0LlN0b3BwZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG5jb25zdCBUQVNLU19CQUNLVEVTVF9GSU5JU0hFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5CYWNrdGVzdC5GaW5pc2hlZFwiLFxuICBkYXRhU2NoZW1hOiB7XG4gICAgdGFza0lkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHRhc2sgaWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG5leHBvcnQge1xuICBCQUNLVEVTVF9TVEFSVF9QQVJBTVMsXG4gIEJBQ0tURVNUX1NUT1BfUEFSQU1TLFxuICBUQVNLU19CQUNLVEVTVF9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVF9GSU5JU0hFRF9FVkVOVFxufTtcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xuaW1wb3J0IHsgVFJBREVSX1NFVFRJTkdTIH0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XG5cbmNvbnN0IFNJR05BTFNfTkVXU0lHTkFMX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlNpZ25hbHMuTmV3U2lnbmFsXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHNpZ25hbElkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgQ2FuZGxlIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgdGltZWZyYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcbiAgICAgIHR5cGU6IFwiaW50XCJcbiAgICB9LFxuICAgIGFkdmlzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciB0YXNrIElkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgcm9ib3RJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcbiAgICAgIHR5cGU6IFwiaW50XCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIHRpbWVzdGFtcDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiU2lnbmFsIHRpbWVzdGFtcCBpbiBVVEMuXCIsXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgZGVzY3JpcHRpb246IFwiU2lnbmFsIHR5cGUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbXCJsb25nXCIsIFwiY2xvc2VMb25nXCIsIFwic2hvcnRcIiwgXCJjbG9zZVNob3J0XCJdXG4gICAgfSxcbiAgICBvcmRlclR5cGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk9yZGVyIHR5cGUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbXCJzdG9wXCIsIFwibGltaXRcIiwgXCJtYXJrZXRcIl0sXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgcHJpY2U6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlByaWNlIGluIHF1b3RlIGN1cnJlbmN5LlwiLFxuICAgICAgdHlwZTogXCJudW1iZXJcIlxuICAgIH0sXG4gICAgcHJpY2VTb3VyY2U6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbmRsZSBmaWVsZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtcIm9wZW5cIiwgXCJjbG9zZVwiLCBcImhpZ2hcIiwgXCJsb3dcIiwgXCJzdG9wXCJdLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGNhbmRsZUlkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGUgdW5pcSBJZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgY2FuZGxlVGltZXN0YW1wOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJDYW5kbGUgdGltZXN0YW1wLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBwb3NpdGlvbklkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHBvc2l0aW9uIElkXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgfSxcbiAgICBzZXR0aW5nczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVHJhZGVyIHBhcmFtZXRlcnMuXCIsXG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgc2xpcHBhZ2VTdGVwOiBUUkFERVJfU0VUVElOR1Muc2xpcHBhZ2VTdGVwLFxuICAgICAgICBkZXZpYXRpb246IFRSQURFUl9TRVRUSU5HUy5kZXZpYXRpb24sXG4gICAgICAgIHZvbHVtZTogVFJBREVSX1NFVFRJTkdTLnZvbHVtZSxcbiAgICAgICAgcG9zaXRpb25Db2RlOiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gY29kZS5cIixcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgIGVtcHR5OiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn07XG5jb25zdCBTSUdOQUxTX0hBTkRMRURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouU2lnbmFscy5IYW5kbGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHNpZ25hbElkOiB7IGRlc2NyaXB0aW9uOiBcIlVuaXEgU2lnbmFsIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBzZXJ2aWNlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTZXZpY2UgbmFtZSBoYW5kZWxpbmcgZXZlbnRcIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtcInRyYWRlclwiXVxuICAgIH0sXG4gICAgc3VjY2Vzczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiU3VjY2VzcyBleGVjdXRpb24gbGlzdFwiLFxuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgaXRlbXM6IFwic3RyaW5nXCIsXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZXJyb3I6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIGV4ZWN1dGlvbiBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHN1Y2Nlc3NQZW5kaW5nOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTdWNjZXNzIHF1ZXVlZCBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczogXCJzdHJpbmdcIixcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBlcnJvclBlbmRpbmc6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVycm9yIHF1ZXVlZCBsaXN0XCIsXG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRhc2tJZDogeyB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICAgICAgICBlcnJvcjogQkFTRV9FUlJPUlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IFNJR05BTFNfSEFORExFRF9FVkVOVCwgU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQgfTtcbiIsImltcG9ydCB7IEJBU0VfRVJST1IgfSBmcm9tIFwiLi4vYmFzZVwiO1xuXG5jb25zdCBUSUNLU19ORVdUSUNLX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRpY2tzLk5ld1RpY2tcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgY3VycmVuY3k6IHsgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIGRpcmVjdGlvbjoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUHJpY2UgZGlyZWN0aW9uLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW1widXBcIiwgXCJkb3duXCIsIFwidW5jaGFuZ2VkXCJdXG4gICAgfSxcbiAgICBwcmljZTogeyBkZXNjcmlwdGlvbjogXCJUcmFkZSBQcmljZS5cIiwgdHlwZTogXCJudW1iZXJcIiB9LFxuICAgIHRpbWVzdGFtcDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVHJhZGUgdGltZXN0YW1wIGluIFVUQy5cIixcbiAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIlxuICAgIH0sXG4gICAgdm9sdW1lOiB7IGRlc2NyaXB0aW9uOiBcIlRyYWRlIFZvbHVtZS5cIiwgdHlwZTogXCJudW1iZXJcIiB9LFxuICAgIHRyYWRlSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRyYWRlIElELlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgVElDS1NfSEFORExFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UaWNrcy5IYW5kbGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHRyYWRlSWQ6IHsgZGVzY3JpcHRpb246IFwiVW5pcSBUcmFkZSBJZC5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgc2VydmljZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiU2V2aWNlIG5hbWUgaGFuZGVsaW5nIGV2ZW50XCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbXCJ0cmFkZXJcIl1cbiAgICB9LFxuICAgIHN1Y2Nlc3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlN1Y2Nlc3MgZXhlY3V0aW9uIGxpc3RcIixcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgIGl0ZW1zOiBcInN0cmluZ1wiLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJFcnJvciBleGVjdXRpb24gbGlzdFwiLFxuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICB0YXNrSWQ6IHsgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgICAgICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59O1xuZXhwb3J0IHsgVElDS1NfTkVXVElDS19FVkVOVCwgVElDS1NfSEFORExFRF9FVkVOVCB9O1xuIiwiaW1wb3J0IGFkdmlzZXIgZnJvbSBcIi4vYWR2aXNlclwiO1xuaW1wb3J0IGJhY2t0ZXN0ZXIgZnJvbSBcIi4vYmFja3Rlc3RlclwiO1xuaW1wb3J0IGNhbmRsZWJhdGNoZXIgZnJvbSBcIi4vY2FuZGxlYmF0Y2hlclwiO1xuaW1wb3J0IGNvbnRyb2wgZnJvbSBcIi4vY29udHJvbFwiO1xuaW1wb3J0IGV2ZW50c2xvZ2dlciBmcm9tIFwiLi9ldmVudHNsb2dnZXJcIjtcbmltcG9ydCBpbXBvcnRlciBmcm9tIFwiLi9pbXBvcnRlclwiO1xuaW1wb3J0IG1hcmtldHdhdGNoZXIgZnJvbSBcIi4vbWFya2V0d2F0Y2hlclwiO1xuaW1wb3J0IHRyYWRlciBmcm9tIFwiLi90cmFkZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX1RPUElDLFxuICBDQU5ETEVTX1RPUElDLFxuICBUSUNLU19UT1BJQyxcbiAgU0lHTkFMU19UT1BJQyxcbiAgVFJBREVTX1RPUElDLFxuICBMT0dfVE9QSUMsXG4gIEVSUk9SX1RPUElDXG59IGZyb20gXCIuL3RvcGljc1wiO1xuXG5jb25zdCBlbmRwb2ludHMgPSB7XG4gIC4uLmFkdmlzZXIsXG4gIC4uLmJhY2t0ZXN0ZXIsXG4gIC4uLmNhbmRsZWJhdGNoZXIsXG4gIC4uLmNvbnRyb2wsXG4gIC4uLmV2ZW50c2xvZ2dlcixcbiAgLi4uaW1wb3J0ZXIsXG4gIC4uLm1hcmtldHdhdGNoZXIsXG4gIC4uLnRyYWRlclxufTtcbmNvbnN0IHRvcGljcyA9IFtcbiAgVEFTS1NfVE9QSUMsXG4gIENBTkRMRVNfVE9QSUMsXG4gIFRJQ0tTX1RPUElDLFxuICBTSUdOQUxTX1RPUElDLFxuICBUUkFERVNfVE9QSUMsXG4gIExPR19UT1BJQyxcbiAgRVJST1JfVE9QSUNcbl07XG5leHBvcnQgeyBlbmRwb2ludHMsIHRvcGljcyB9O1xuIiwiaW1wb3J0IHsgQURWSVNFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzXCI7XG5pbXBvcnQgeyBUQVNLU19UT1BJQywgQ0FORExFU19UT1BJQyB9IGZyb20gXCIuL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvYWR2aXNlclwiO1xuaW1wb3J0IHsgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvY2FuZGxlcy9jYW5kbGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW0FEVklTRVJfU0VSVklDRV06IFtcbiAgICB7XG4gICAgICBuYW1lOiBgJHtBRFZJU0VSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBUQVNLU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL3Rhc2tFdmVudHNcIixcbiAgICAgIGxvY2FsUG9ydDogODEwNCxcbiAgICAgIHR5cGVzOiBbXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RBUlRfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVC5ldmVudFR5cGVcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke0FEVklTRVJfU0VSVklDRX0tJHtDQU5ETEVTX1RPUElDfWAsXG4gICAgICB0b3BpYzogQ0FORExFU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2NhbmRsZUV2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA0LFxuICAgICAgdHlwZXM6IFtDQU5ETEVTX05FV0NBTkRMRV9FVkVOVC5ldmVudFR5cGVdXG4gICAgfVxuICBdXG59O1xuIiwiY29uc3QgVEFTS1NfVE9QSUMgPSBcInRhc2tzXCI7XG5jb25zdCBDQU5ETEVTX1RPUElDID0gXCJjYW5kbGVzXCI7XG5jb25zdCBUSUNLU19UT1BJQyA9IFwidGlja3NcIjtcbmNvbnN0IFNJR05BTFNfVE9QSUMgPSBcInNpZ25hbHNcIjtcbmNvbnN0IFRSQURFU19UT1BJQyA9IFwidHJhZGVzXCI7XG5jb25zdCBMT0dfVE9QSUMgPSBcImxvZ1wiO1xuY29uc3QgRVJST1JfVE9QSUMgPSBcImVycm9yXCI7XG5leHBvcnQge1xuICBUQVNLU19UT1BJQyxcbiAgQ0FORExFU19UT1BJQyxcbiAgVElDS1NfVE9QSUMsXG4gIFNJR05BTFNfVE9QSUMsXG4gIFRSQURFU19UT1BJQyxcbiAgTE9HX1RPUElDLFxuICBFUlJPUl9UT1BJQ1xufTtcbiIsImltcG9ydCB7IEJBQ0tURVNURVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RPUF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvYmFja3Rlc3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtCQUNLVEVTVEVSX1NFUlZJQ0VdOiBbXG4gICAge1xuICAgICAgbmFtZTogYCR7QkFDS1RFU1RFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDgsXG4gICAgICB0eXBlczogW1xuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCB7IENBTkRMRUJBVENIRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2NhbmRsZWJhdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbQ0FORExFQkFUQ0hFUl9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke0NBTkRMRUJBVENIRVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTAzLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCB7IENPTlRST0xfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0FEVklTRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1VQREFURURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2FkdmlzZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19JTVBPUlRFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvaW1wb3J0ZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VQREFURURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL21hcmtldHdhdGNoZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1VQREFURURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3RyYWRlclwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9leHdhdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbQ09OVFJPTF9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke0NPTlRST0xfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA3LFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCB7IEVWRU5UU19MT0dHRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfVE9QSUMsXG4gIENBTkRMRVNfVE9QSUMsXG4gIFNJR05BTFNfVE9QSUMsXG4gIFRJQ0tTX1RPUElDLFxuICBUUkFERVNfVE9QSUMsXG4gIExPR19UT1BJQyxcbiAgRVJST1JfVE9QSUNcbn0gZnJvbSBcIi4vdG9waWNzXCI7XG5pbXBvcnQge1xuICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9hZHZpc2VyXCI7XG5pbXBvcnQge1xuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfRklOSVNIRURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2ltcG9ydGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9tYXJrZXR3YXRjaGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy90cmFkZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdFwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9leHdhdGNoZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX1VTRVJST0JPVF9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19VU0VSUk9CT1RfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfVVNFUlJPQk9UX1VQREFURURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3VzZXJSb2JvdFwiO1xuaW1wb3J0IHtcbiAgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQsXG4gIENBTkRMRVNfSEFORExFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvY2FuZGxlcy9jYW5kbGVzXCI7XG5pbXBvcnQge1xuICBTSUdOQUxTX05FV1NJR05BTF9FVkVOVCxcbiAgU0lHTkFMU19IQU5ETEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy9zaWduYWxzL3NpZ25hbHNcIjtcbmltcG9ydCB7IFRJQ0tTX05FV1RJQ0tfRVZFTlQsIFRJQ0tTX0hBTkRMRURfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvdGlja3MvdGlja3NcIjtcbmltcG9ydCB7XG4gIFRSQURFU19QT1NJVElPTl9FVkVOVCxcbiAgVFJBREVTX09SREVSX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90cmFkZXMvdHJhZGVzXCI7XG5pbXBvcnQge1xuICBMT0dfQURWSVNFUl9FVkVOVCxcbiAgTE9HX0JBQ0tURVNURVJfRVZFTlQsXG4gIExPR19CQUNLVEVTVF9FVkVOVCxcbiAgTE9HX0NBTkRMRUJBVENIRVJfRVZFTlQsXG4gIExPR19DT05UUk9MX0VWRU5ULFxuICBMT0dfRVhXQVRDSEVSX0VWRU5ULFxuICBMT0dfSU1QT1JURVJfRVZFTlQsXG4gIExPR19NQVJLRVRXQVRDSEVSX0VWRU5ULFxuICBMT0dfVFJBREVSX0VWRU5ULFxuICBMT0dfVVNFUlJPQk9UX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy9sb2cvbG9nXCI7XG5pbXBvcnQge1xuICBFUlJPUl9BRFZJU0VSX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVEVSX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVF9FVkVOVCxcbiAgRVJST1JfQ0FORExFQkFUQ0hFUl9FVkVOVCxcbiAgRVJST1JfQ09OVFJPTF9FVkVOVCxcbiAgRVJST1JfRVhXQVRDSEVSX0VWRU5ULFxuICBFUlJPUl9JTVBPUlRFUl9FVkVOVCxcbiAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVCxcbiAgRVJST1JfVFJBREVSX0VWRU5ULFxuICBFUlJPUl9VU0VSUk9CT1RfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL2Vycm9yL2Vycm9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW0VWRU5UU19MT0dHRVJfU0VSVklDRV06IFtcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBUQVNLU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2V2ZW50c1wiLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVFJBREVSX1VQREFURV9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVEFSVEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RfRklOSVNIRURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVVNFUlJPQk9UX1NUQVJURURfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19VU0VSUk9CT1RfU1RPUFBFRF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX1VTRVJST0JPVF9VUERBVEVEX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke0NBTkRMRVNfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBDQU5ETEVTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1xuICAgICAgICBDQU5ETEVTX05FV0NBTkRMRV9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIENBTkRMRVNfSEFORExFRF9FVkVOVC5ldmVudFR5cGVcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke0VWRU5UU19MT0dHRVJfU0VSVklDRX0tJHtTSUdOQUxTX1RPUElDfWAsXG4gICAgICB0b3BpYzogU0lHTkFMU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2V2ZW50c1wiLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBTSUdOQUxTX0hBTkRMRURfRVZFTlQuZXZlbnRUeXBlXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VElDS1NfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBUSUNLU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2V2ZW50c1wiLFxuICAgICAgdHlwZXM6IFtUSUNLU19ORVdUSUNLX0VWRU5ULmV2ZW50VHlwZSwgVElDS1NfSEFORExFRF9FVkVOVC5ldmVudFR5cGVdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VFJBREVTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVFJBREVTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1RSQURFU19QT1NJVElPTl9FVkVOVC5ldmVudFR5cGUsIFRSQURFU19PUkRFUl9FVkVOVC5ldmVudFR5cGVdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7TE9HX1RPUElDfWAsXG4gICAgICB0b3BpYzogTE9HX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1xuICAgICAgICBMT0dfQURWSVNFUl9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIExPR19CQUNLVEVTVEVSX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgTE9HX0JBQ0tURVNUX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgTE9HX0NBTkRMRUJBVENIRVJfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBMT0dfQ09OVFJPTF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIExPR19FWFdBVENIRVJfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBMT0dfSU1QT1JURVJfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBMT0dfTUFSS0VUV0FUQ0hFUl9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIExPR19UUkFERVJfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBMT0dfVVNFUlJPQk9UX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke0VSUk9SX1RPUElDfWAsXG4gICAgICB0b3BpYzogRVJST1JfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcbiAgICAgIHR5cGVzOiBbXG4gICAgICAgIEVSUk9SX0FEVklTRVJfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBFUlJPUl9CQUNLVEVTVEVSX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgRVJST1JfQkFDS1RFU1RfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBFUlJPUl9DQU5ETEVCQVRDSEVSX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgRVJST1JfQ09OVFJPTF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIEVSUk9SX0VYV0FUQ0hFUl9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIEVSUk9SX0lNUE9SVEVSX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIEVSUk9SX1RSQURFUl9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIEVSUk9SX1VTRVJST0JPVF9FVkVOVC5ldmVudFR5cGVcbiAgICAgIF1cbiAgICB9XG4gIF1cbn07XG4iLCJpbXBvcnQgeyBCQVNFX0VSUk9SIH0gZnJvbSBcIi4uL2Jhc2VcIjtcbmltcG9ydCB7XG4gIENBTkRMRUJBVENIRVJfU0VUVElOR1MsXG4gIEFEVklTRVJfU0VUVElOR1MsXG4gIFRSQURFUl9TRVRUSU5HU1xufSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcblxuY29uc3QgVVNFUl9ST0JPVF9TVEFSVF9QQVJBTVMgPSB7XG4gIGlkOiB7XG4gICAgZGVzY3JpcHRpb246IFwiVW5pcSB1c2VyIHJvYm90IGlkLlwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH0sXG4gIHJvYm90SWQ6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCB1bmlxIElkLlwiLFxuICAgIHR5cGU6IFwiaW50XCIsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH0sXG4gIHVzZXJJZDoge1xuICAgIGRlc2NyaXB0aW9uOiBcIlVzZXIgdW5pcSBJZC5cIixcbiAgICB0eXBlOiBcInV1aWRcIixcbiAgICBlbXB0eTogZmFsc2VcbiAgfSxcbiAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXG4gIGFzc2V0OiB7IGRlc2NyaXB0aW9uOiBcIkJhc2UgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gIHRpbWVmcmFtZToge1xuICAgIGRlc2NyaXB0aW9uOiBcIlRpbWVmcmFtZSBpbiBtaW51dGVzLlwiLFxuICAgIHR5cGU6IFwiaW50XCJcbiAgfSxcbiAgc3RyYXRlZ3lOYW1lOiB7XG4gICAgZGVzY3JpcHRpb246IFwiU3RyYXRlZ3kgZmlsZSBuYW1lLlwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH0sXG4gIGNhbmRsZWJhdGNoZXJTZXR0aW5nczoge1xuICAgIGRlc2NyaXB0aW9uOiBcIkNhbmRsZWJhdGNoZXIgc2V0dGluZ3MuXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wczogQ0FORExFQkFUQ0hFUl9TRVRUSU5HUyxcbiAgICBvcHRpb25hbDogdHJ1ZVxuICB9LFxuICBhZHZpc2VyU2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJBZHZpc2VyIHNldHRpbmdzLlwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcHM6IEFEVklTRVJfU0VUVElOR1MsXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgdHJhZGVyU2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJUcmFkZXIgc2V0dGluZ3MuXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTLFxuICAgIG9wdGlvbmFsOiB0cnVlXG4gIH1cbn07XG5cbmNvbnN0IFVTRVJfUk9CT1RfU1RPUF9QQVJBTVMgPSB7XG4gIGlkOiB7XG4gICAgZGVzY3JpcHRpb246IFwiVW5pcSB1c2VyIHJvYm90IGlkLlwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW1wdHk6IGZhbHNlXG4gIH1cbn07XG5cbmNvbnN0IFVTRVJfUk9CT1RfVVBEQVRFX1BBUkFNUyA9IHtcbiAgaWQ6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJVbmlxIHVzZXIgcm9ib3QgaWQuXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBlbXB0eTogZmFsc2VcbiAgfSxcbiAgdHJhZGVyU2V0dGluZ3M6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJUcmFkZXIgc2V0dGluZ3MuXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wczogVFJBREVSX1NFVFRJTkdTXG4gIH1cbn07XG5cbi8qKlxuICog0KHQvtCx0YvRgtC40LUgLSDQoNC+0LHQvtGCINC30LDQv9GD0YnQtdC9XG4gKi9cbmNvbnN0IFRBU0tTX1VTRVJST0JPVF9TVEFSVEVEX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRhc2tzLlVzZXJSb2JvdC5TdGFydGVkXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIC4uLlVTRVJfUk9CT1RfU1RBUlRfUEFSQU1TLFxuICAgIHN0YXR1czogeyBkZXNjcmlwdGlvbjogXCJDdXJyZW50IHN0YXR1cy5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgc3RhcnRlZEF0OiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJSb2JvdCBzdGFydCBkYXRlLlwiLFxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0KDQvtCx0L7RgiDQvtGB0YLQsNC90L7QstC70LXQvVxuICovXG5jb25zdCBUQVNLU19VU0VSUk9CT1RfU1RPUFBFRF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UYXNrcy5Vc2VyUm9ib3QuU3RvcHBlZFwiLFxuXG4gIGRhdGFTY2hlbWE6IHtcbiAgICAuLi5VU0VSX1JPQk9UX1NUT1BfUEFSQU1TLFxuICAgIHN0YXR1czogeyBkZXNjcmlwdGlvbjogXCJDdXJyZW50IHN0YXR1cy5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgc3RvcHBlZGRBdDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3Qgc3RvcCBkYXRlLlwiLFxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXG4gICAgfSxcbiAgICBlcnJvcjogQkFTRV9FUlJPUlxuICB9XG59O1xuXG4vKipcbiAqINCh0L7QsdGL0YLQuNC1IC0g0J/QsNGA0LDQvNC10YLRgNGLINGA0L7QsdC+0YLQsCDQvtCx0L3QvtCy0LvQtdC90YtcbiAqL1xuY29uc3QgVEFTS1NfVVNFUlJPQk9UX1VQREFURURfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVGFza3MuVXNlclJvYm90LlVwZGF0ZWRcIixcblxuICBkYXRhU2NoZW1hOiB7XG4gICAgLi4uVVNFUl9ST0JPVF9VUERBVEVfUEFSQU1TLFxuICAgIHN0YXR1czogeyBkZXNjcmlwdGlvbjogXCJDdXJyZW50IHN0YXR1cy5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgZXJyb3I6IEJBU0VfRVJST1JcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgVVNFUl9ST0JPVF9TVEFSVF9QQVJBTVMsXG4gIFVTRVJfUk9CT1RfU1RPUF9QQVJBTVMsXG4gIFVTRVJfUk9CT1RfVVBEQVRFX1BBUkFNUyxcbiAgVEFTS1NfVVNFUlJPQk9UX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX1VTRVJST0JPVF9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19VU0VSUk9CT1RfVVBEQVRFRF9FVkVOVFxufTtcbiIsImltcG9ydCB7IFRSQURFUl9TRVRUSU5HUyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHtcbiAgT1JERVJfVFlQRV9MSU1JVCxcbiAgT1JERVJfVFlQRV9NQVJLRVQsXG4gIE9SREVSX1RZUEVfU1RPUCxcbiAgT1JERVJfRElSRUNUSU9OX0JVWSxcbiAgT1JERVJfRElSRUNUSU9OX1NFTEwsXG4gIE9SREVSX1BPU19ESVJfRU5UUlksXG4gIE9SREVSX1BPU19ESVJfRVhJVCxcbiAgVFJBREVfQUNUSU9OX0xPTkcsXG4gIFRSQURFX0FDVElPTl9DTE9TRV9MT05HLFxuICBUUkFERV9BQ1RJT05fU0hPUlQsXG4gIFRSQURFX0FDVElPTl9DTE9TRV9TSE9SVFxufSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvdHlwZXNcIjtcbmltcG9ydCB7XG4gIFBPU19TVEFUVVNfTkVXLFxuICBQT1NfU1RBVFVTX09QRU4sXG4gIFBPU19TVEFUVVNfQ0xPU0VELFxuICBQT1NfU1RBVFVTX0NBTkNFTEVELFxuICBQT1NfU1RBVFVTX0VSUk9SLFxuICBPUkRFUl9TVEFUVVNfTkVXLFxuICBPUkRFUl9TVEFUVVNfT1BFTixcbiAgT1JERVJfU1RBVFVTX0NMT1NFRCxcbiAgT1JERVJfU1RBVFVTX0NBTkNFTEVELFxuICBPUkRFUl9TVEFUVVNfRVJST1Jcbn0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL3N0YXR1c1wiO1xuXG5jb25zdCBUUkFERVNfT1JERVJfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVHJhZGVzLk9yZGVyXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIG1vZGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNlcnZpY2UgcnVuIG1vZGUuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbXCJiYWNrdGVzdFwiLCBcImVtdWxhdG9yXCIsIFwicmVhbHRpbWVcIl1cbiAgICB9LFxuICAgIHBvc2l0aW9uSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgUG9zaXRpb24gSWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICB0cmFkZXJJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIFRyYWRlciBJZC5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgcm9ib3RJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcbiAgICAgIHR5cGU6IFwiaW50XCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIHVzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxuICAgICAgdHlwZTogXCJ1dWlkXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGFkdmlzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciB0YXNrIElkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgb3JkZXJJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIE9yZGVyIElkLlwiLCB0eXBlOiBcInN0cmluZ1wiLCBlbXB0eTogZmFsc2UgfSxcbiAgICBzaWduYWxJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIFNpbmdsZSBJZC5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgb3JkZXJUeXBlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciB0eXBlLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW09SREVSX1RZUEVfTElNSVQsIE9SREVSX1RZUEVfTUFSS0VULCBPUkRFUl9UWVBFX1NUT1BdLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIHByaWNlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBpbiBxdW90ZSBjdXJyZW5jeS5cIixcbiAgICAgIHR5cGU6IFwibnVtYmVyXCJcbiAgICB9LFxuICAgIHZvbHVtZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiT3JkZXIgcGxhbm5lZCB2b2x1bWUuXCIsXG4gICAgICB0eXBlOiBcIm51bWJlclwiXG4gICAgfSxcbiAgICBleGNoYW5nZTogeyBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBjb2RlLlwiLCB0eXBlOiBcImV4Y2hhbmdlXCIgfSxcbiAgICBhc3NldDogeyBkZXNjcmlwdGlvbjogXCJCYXNlIGN1cnJlbmN5LlwiLCB0eXBlOiBcImN1cnJlbmN5XCIgfSxcbiAgICBjdXJyZW5jeTogeyBkZXNjcmlwdGlvbjogXCJRdW90ZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgdGltZWZyYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lZnJhbWUgaW4gbWludXRlcy5cIixcbiAgICAgIHR5cGU6IFwiaW50XCJcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiT3JkZXIgY3JlYXRlZCB0aW1lc3RhbXAgaW4gVVRDLlwiLFxuICAgICAgdHlwZTogXCJkYXRldGltZVwiXG4gICAgfSxcbiAgICBzdGF0dXM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk9yZGVyIHN0YXR1cy5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgT1JERVJfU1RBVFVTX05FVyxcbiAgICAgICAgT1JERVJfU1RBVFVTX09QRU4sXG4gICAgICAgIE9SREVSX1NUQVRVU19DTE9TRUQsXG4gICAgICAgIE9SREVSX1NUQVRVU19DQU5DRUxFRCxcbiAgICAgICAgT1JERVJfU1RBVFVTX0VSUk9SXG4gICAgICBdXG4gICAgfSxcbiAgICBkaXJlY3Rpb246IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk9yZGVyIGRpcmVjdGlvbi5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtPUkRFUl9ESVJFQ1RJT05fQlVZLCBPUkRFUl9ESVJFQ1RJT05fU0VMTF1cbiAgICB9LFxuICAgIHBvc2l0aW9uRGlyZWN0aW9uOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciBwb3NpdGlvbiBkaXJlY3Rpb24uXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgdmFsdWVzOiBbT1JERVJfUE9TX0RJUl9FTlRSWSwgT1JERVJfUE9TX0RJUl9FWElUXVxuICAgIH0sXG4gICAgYWN0aW9uOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTaWduYWwgYWN0aW9uLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW1xuICAgICAgICBUUkFERV9BQ1RJT05fTE9ORyxcbiAgICAgICAgVFJBREVfQUNUSU9OX0NMT1NFX0xPTkcsXG4gICAgICAgIFRSQURFX0FDVElPTl9TSE9SVCxcbiAgICAgICAgVFJBREVfQUNUSU9OX0NMT1NFX1NIT1JUXG4gICAgICBdXG4gICAgfSxcbiAgICBleElkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJFeGNoYW5nZSBvcmRlciBpZC5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICB9LFxuICAgIGV4VGltZXN0YW1wOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciBjcmVhdGVkIGluIGV4Y2hhbmdlIHRpbWVzdGFtcCBVVEMuXCIsXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcbiAgICB9LFxuICAgIGV4TGFzdFRyYWRlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJPcmRlciBsYXN0IHRyYWRlIGluIGV4Y2hhbmdlIHRpbWVzdGFtcCBVVEMuXCIsXG4gICAgICB0eXBlOiBcImRhdGV0aW1lXCJcbiAgICB9LFxuICAgIGF2ZXJhZ2U6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkF2ZXJhZ2UgZXhlY3V0ZWQgcHJpY2UuXCIsXG4gICAgICB0eXBlOiBcIm51bWJlclwiXG4gICAgfSxcbiAgICByZW1haW5pbmc6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRlbWFpbmluZyBhbW91bnQgdG8gZmlsbC5cIixcbiAgICAgIHR5cGU6IFwibnVtYmVyXCJcbiAgICB9LFxuICAgIGV4ZWN1dGVkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJFeGVjdXRlZCB2b2x1bWUuXCIsXG4gICAgICB0eXBlOiBcIm51bWJlclwiXG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBfcG9zaXRpb25TdGVwID0ge1xuICBzdGF0dXM6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBzdGF0dXMuXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICB2YWx1ZXM6IFtcbiAgICAgIE9SREVSX1NUQVRVU19ORVcsXG4gICAgICBPUkRFUl9TVEFUVVNfT1BFTixcbiAgICAgIE9SREVSX1NUQVRVU19DTE9TRUQsXG4gICAgICBPUkRFUl9TVEFUVVNfQ0FOQ0VMRUQsXG4gICAgICBPUkRFUl9TVEFUVVNfRVJST1JcbiAgICBdXG4gIH0sXG4gIHByaWNlOiB7XG4gICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gcHJpY2UgaW4gcXVvdGUgY3VycmVuY3kuXCIsXG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9LFxuICBkYXRlOiB7XG4gICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gdGltZXN0YW1wIGluIFVUQy5cIixcbiAgICB0eXBlOiBcImRhdGV0aW1lXCJcbiAgfSxcbiAgZXhlY3V0ZWQ6IHtcbiAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBleGVjdXRlZCB2b2x1bWUuXCIsXG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9XG59O1xuXG5jb25zdCBUUkFERVNfUE9TSVRJT05fRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVHJhZGVzLlBvc2l0aW9uXCIsXG5cbiAgZGF0YVNjaGVtYToge1xuICAgIHBvc2l0aW9uSWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlVuaXEgUG9zaXRpb24gSWQuXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZW1wdHk6IGZhbHNlXG4gICAgfSxcbiAgICBtb2RlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJTZXJ2aWNlIHJ1biBtb2RlLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW1wiYmFja3Rlc3RcIiwgXCJlbXVsYXRvclwiLCBcInJlYWx0aW1lXCJdXG4gICAgfSxcbiAgICB0cmFkZXJJZDogeyBkZXNjcmlwdGlvbjogXCJVbmlxIFRyYWRlciBJZC5cIiwgdHlwZTogXCJzdHJpbmdcIiwgZW1wdHk6IGZhbHNlIH0sXG4gICAgcm9ib3RJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUm9ib3QgdW5pcSBJZC5cIixcbiAgICAgIHR5cGU6IFwiaW50XCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIHVzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciB1bmlxIElkLlwiLFxuICAgICAgdHlwZTogXCJ1dWlkXCIsXG4gICAgICBlbXB0eTogZmFsc2VcbiAgICB9LFxuICAgIGFkdmlzZXJJZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQWR2aXNlciB0YXNrIElkLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVtcHR5OiBmYWxzZVxuICAgIH0sXG4gICAgZXhjaGFuZ2U6IHsgZGVzY3JpcHRpb246IFwiRXhjaGFuZ2UgY29kZS5cIiwgdHlwZTogXCJleGNoYW5nZVwiIH0sXG4gICAgYXNzZXQ6IHsgZGVzY3JpcHRpb246IFwiQmFzZSBjdXJyZW5jeS5cIiwgdHlwZTogXCJjdXJyZW5jeVwiIH0sXG4gICAgY3VycmVuY3k6IHsgZGVzY3JpcHRpb246IFwiUXVvdGUgY3VycmVuY3kuXCIsIHR5cGU6IFwiY3VycmVuY3lcIiB9LFxuICAgIHRpbWVmcmFtZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiVGltZWZyYW1lIGluIG1pbnV0ZXMuXCIsXG4gICAgICB0eXBlOiBcImludFwiXG4gICAgfSxcbiAgICBzdGF0dXM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIHN0YXR1cy5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgUE9TX1NUQVRVU19ORVcsXG4gICAgICAgIFBPU19TVEFUVVNfT1BFTixcbiAgICAgICAgUE9TX1NUQVRVU19DTE9TRUQsXG4gICAgICAgIFBPU19TVEFUVVNfQ0FOQ0VMRUQsXG4gICAgICAgIFBPU19TVEFUVVNfRVJST1JcbiAgICAgIF1cbiAgICB9LFxuICAgIGRpcmVjdGlvbjoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gZGlyZWN0aW9uLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHZhbHVlczogW09SREVSX0RJUkVDVElPTl9CVVksIE9SREVSX0RJUkVDVElPTl9TRUxMXVxuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gb3B0aW9ucy5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIHNldHRpbmdzLlwiLFxuICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgIHByb3BzOiBUUkFERVJfU0VUVElOR1NcbiAgICB9LFxuICAgIGVudHJ5OiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJQb3NpdGlvbiBlbnRyeS5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogX3Bvc2l0aW9uU3RlcFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUG9zaXRpb24gZXhpdC5cIixcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wczogX3Bvc2l0aW9uU3RlcFxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgVFJBREVTX09SREVSX0VWRU5ULCBUUkFERVNfUE9TSVRJT05fRVZFTlQgfTtcbiIsImNvbnN0IExPR19NQVJLRVRXQVRDSEVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLk1hcmtldHdhdGNoZXIuTG9nXCJcbn07XG5cbmNvbnN0IExPR19DQU5ETEVCQVRDSEVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkNhbmRsZWJhdGNoZXIuTG9nXCJcbn07XG5cbmNvbnN0IExPR19JTVBPUlRFUl9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5JbXBvcnRlci5Mb2dcIlxufTtcblxuY29uc3QgTE9HX0FEVklTRVJfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouQWR2aXNlci5Mb2dcIlxufTtcblxuY29uc3QgTE9HX1RSQURFUl9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5UcmFkZXIuTG9nXCJcbn07XG5cbmNvbnN0IExPR19CQUNLVEVTVEVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkJhY2t0ZXN0ZXIuTG9nXCJcbn07XG5cbmNvbnN0IExPR19CQUNLVEVTVF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5CYWNrdGVzdC5Mb2dcIlxufTtcblxuY29uc3QgTE9HX0VYV0FUQ0hFUl9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5FeHdhdGNoZXIuTG9nXCJcbn07XG5cbmNvbnN0IExPR19VU0VSUk9CT1RfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVXNlclJvYm90LkxvZ1wiXG59O1xuXG5jb25zdCBMT0dfQ09OVFJPTF9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5Db250cm9sLkxvZ1wiXG59O1xuXG5leHBvcnQge1xuICBMT0dfQURWSVNFUl9FVkVOVCxcbiAgTE9HX0NBTkRMRUJBVENIRVJfRVZFTlQsXG4gIExPR19JTVBPUlRFUl9FVkVOVCxcbiAgTE9HX01BUktFVFdBVENIRVJfRVZFTlQsXG4gIExPR19UUkFERVJfRVZFTlQsXG4gIExPR19CQUNLVEVTVEVSX0VWRU5ULFxuICBMT0dfQkFDS1RFU1RfRVZFTlQsXG4gIExPR19FWFdBVENIRVJfRVZFTlQsXG4gIExPR19VU0VSUk9CT1RfRVZFTlQsXG4gIExPR19DT05UUk9MX0VWRU5UXG59O1xuIiwiY29uc3QgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5NYXJrZXR3YXRjaGVyLkVycm9yXCJcbn07XG5cbmNvbnN0IEVSUk9SX0NBTkRMRUJBVENIRVJfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouQ2FuZGxlYmF0Y2hlci5FcnJvclwiXG59O1xuXG5jb25zdCBFUlJPUl9JTVBPUlRFUl9FVkVOVCA9IHtcbiAgZXZlbnRUeXBlOiBcIkNQWi5JbXBvcnRlci5FcnJvclwiXG59O1xuXG5jb25zdCBFUlJPUl9BRFZJU0VSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkFkdmlzZXIuRXJyb3JcIlxufTtcblxuY29uc3QgRVJST1JfVFJBREVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLlRyYWRlci5FcnJvclwiXG59O1xuXG5jb25zdCBFUlJPUl9CQUNLVEVTVEVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkJhY2t0ZXN0ZXIuRXJyb3JcIlxufTtcblxuY29uc3QgRVJST1JfQkFDS1RFU1RfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouQmFja3Rlc3QuRXJyb3JcIlxufTtcblxuY29uc3QgRVJST1JfRVhXQVRDSEVSX0VWRU5UID0ge1xuICBldmVudFR5cGU6IFwiQ1BaLkV4d2F0Y2hlci5FcnJvclwiXG59O1xuXG5jb25zdCBFUlJPUl9VU0VSUk9CT1RfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouVXNlclJvYm90LkVycm9yXCJcbn07XG5cbmNvbnN0IEVSUk9SX0NPTlRST0xfRVZFTlQgPSB7XG4gIGV2ZW50VHlwZTogXCJDUFouQ29udHJvbC5FcnJvclwiXG59O1xuXG5leHBvcnQge1xuICBFUlJPUl9BRFZJU0VSX0VWRU5ULFxuICBFUlJPUl9DQU5ETEVCQVRDSEVSX0VWRU5ULFxuICBFUlJPUl9JTVBPUlRFUl9FVkVOVCxcbiAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FVkVOVCxcbiAgRVJST1JfVFJBREVSX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVEVSX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVF9FVkVOVCxcbiAgRVJST1JfRVhXQVRDSEVSX0VWRU5ULFxuICBFUlJPUl9VU0VSUk9CT1RfRVZFTlQsXG4gIEVSUk9SX0NPTlRST0xfRVZFTlRcbn07XG4iLCJpbXBvcnQgeyBJTVBPUlRFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzXCI7XG5pbXBvcnQgeyBUQVNLU19UT1BJQyB9IGZyb20gXCIuL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX0lNUE9SVEVSX1NUT1BfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2ltcG9ydGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW0lNUE9SVEVSX1NFUlZJQ0VdOiBbXG4gICAge1xuICAgICAgbmFtZTogYCR7SU1QT1JURVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA1LFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5ULmV2ZW50VHlwZVxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCB7IE1BUktFVFdBVENIRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi90b3BpY3NcIjtcbmltcG9ydCB7XG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVUJTQ1JJQkVfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL21hcmtldHdhdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbTUFSS0VUV0FUQ0hFUl9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke01BUktFVFdBVENIRVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTAyLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUF9FVkVOVC5ldmVudFR5cGUsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVC5ldmVudFR5cGVcbiAgICAgIF1cbiAgICB9XG4gIF1cbn07XG4iLCJpbXBvcnQgeyBUUkFERVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfVE9QSUMsXG4gIENBTkRMRVNfVE9QSUMsXG4gIFNJR05BTFNfVE9QSUMsXG4gIFRJQ0tTX1RPUElDXG59IGZyb20gXCIuL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1JVTl9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvdHJhZGVyXCI7XG5pbXBvcnQgeyBDQU5ETEVTX05FV0NBTkRMRV9FVkVOVCB9IGZyb20gXCIuLi90eXBlcy9jYW5kbGVzL2NhbmRsZXNcIjtcbmltcG9ydCB7IFRJQ0tTX05FV1RJQ0tfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvdGlja3MvdGlja3NcIjtcbmltcG9ydCB7IFNJR05BTFNfTkVXU0lHTkFMX0VWRU5UIH0gZnJvbSBcIi4uL3R5cGVzL3NpZ25hbHMvc2lnbmFsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtUUkFERVJfU0VSVklDRV06IFtcbiAgICB7XG4gICAgICBuYW1lOiBgJHtUUkFERVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA2LFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BfRVZFTlQuZXZlbnRUeXBlLFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULmV2ZW50VHlwZSxcbiAgICAgICAgVEFTS1NfVFJBREVSX1JVTl9FVkVOVC5ldmVudFR5cGVcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke0NBTkRMRVNfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBDQU5ETEVTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvY2FuZGxlRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXG4gICAgICB0eXBlczogW0NBTkRMRVNfTkVXQ0FORExFX0VWRU5ULmV2ZW50VHlwZV1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke1RJQ0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVElDS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90aWNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXG4gICAgICB0eXBlczogW1RJQ0tTX05FV1RJQ0tfRVZFTlQuZXZlbnRUeXBlXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7VFJBREVSX1NFUlZJQ0V9LSR7U0lHTkFMU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFNJR05BTFNfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS9zaWduYWxFdmVudHNcIixcbiAgICAgIGxvY2FsUG9ydDogODEwNixcbiAgICAgIHR5cGVzOiBbU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQuZXZlbnRUeXBlXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCAqIGFzIG1zUmVzdEF6dXJlIGZyb20gXCJAYXp1cmUvbXMtcmVzdC1ub2RlYXV0aFwiO1xuaW1wb3J0IHsgRXZlbnRHcmlkTWFuYWdlbWVudENsaWVudCB9IGZyb20gXCJAYXp1cmUvYXJtLWV2ZW50Z3JpZFwiO1xuaW1wb3J0IHsgY2hlY2tFbnZWYXJzIH0gZnJvbSBcImNwelV0aWxzL2Vudmlyb25tZW50XCI7XG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnYtc2FmZVwiO1xuaW1wb3J0IHtcbiAgZW5kcG9pbnRzIGFzIGV2ZW50RW5kcG9pbnRzLFxuICB0b3BpY3Ncbn0gZnJvbSBcImNwekNvbmZpZy9ldmVudHMvZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UgfSBmcm9tIFwiY3B6U2VydmljZXNcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuY2hlY2tFbnZWYXJzKFtcbiAgXCJNQU5BR0VfQVBQX0lEXCIsXG4gIFwiTUFOQUdFX0FQUF9LRVlcIixcbiAgXCJBRF9ESVJFQ1RPUllfSURcIixcbiAgXCJTVUJTUklQVElPTl9JRFwiLFxuICBcIlJFU09VUlNFX0dST1VQXCIsXG4gIFwiU1RPUkFHRVwiXG5dKTtcbmNvbnN0IHtcbiAgTUFOQUdFX0FQUF9JRCxcbiAgTUFOQUdFX0FQUF9LRVksXG4gIEFEX0RJUkVDVE9SWV9JRCxcbiAgU1VCU1JJUFRJT05fSUQsXG4gIFJFU09VUlNFX0dST1VQLFxuICBTVE9SQUdFXG59ID0gcHJvY2Vzcy5lbnY7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENsaWVudCgpIHtcbiAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCBtc1Jlc3RBenVyZS5sb2dpbldpdGhTZXJ2aWNlUHJpbmNpcGFsU2VjcmV0KFxuICAgIE1BTkFHRV9BUFBfSUQsXG4gICAgTUFOQUdFX0FQUF9LRVksXG4gICAgQURfRElSRUNUT1JZX0lEXG4gICk7XG5cbiAgY29uc3QgRUdNQ2xpZW50ID0gbmV3IEV2ZW50R3JpZE1hbmFnZW1lbnRDbGllbnQoY3JlZGVudGlhbHMsIFNVQlNSSVBUSU9OX0lEKTtcbiAgcmV0dXJuIEVHTUNsaWVudDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVTdWIoXG4gIEVHTUNsaWVudCxcbiAgeyB0b3BpYywgdG9waWNOYW1lLCBzZXJ2aWNlTmFtZSwgc3ViTmFtZSwgZW5kcG9pbnRVcmwsIGV2ZW50VHlwZXMgfVxuKSB7XG4gIGNvbnN0IHNjb3BlID0gYC9zdWJzY3JpcHRpb25zLyR7U1VCU1JJUFRJT05fSUR9L3Jlc291cmNlR3JvdXBzLyR7UkVTT1VSU0VfR1JPVVB9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL3RvcGljcy8ke3RvcGljTmFtZX1gO1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgIGRlYWRMZXR0ZXJEZXN0aW5hdGlvbjoge1xuICAgICAgZW5kcG9pbnRUeXBlOiBcIlN0b3JhZ2VCbG9iXCIsXG4gICAgICBibG9iQ29udGFpbmVyTmFtZTogYGVnLSR7dG9waWN9LWRlYWRgLFxuICAgICAgcmVzb3VyY2VJZDogYC9zdWJzY3JpcHRpb25zLyR7U1VCU1JJUFRJT05fSUR9L3Jlc291cmNlR3JvdXBzLyR7UkVTT1VSU0VfR1JPVVB9L3Byb3ZpZGVycy9taWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvJHtTVE9SQUdFfWBcbiAgICB9LFxuICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICBlbmRwb2ludFR5cGU6IFwiV2ViSG9va1wiLFxuICAgICAgZW5kcG9pbnRVcmxcbiAgICB9LFxuICAgIGZpbHRlcjoge1xuICAgICAgaW5jbHVkZWRFdmVudFR5cGVzOlxuICAgICAgICBzZXJ2aWNlTmFtZSA9PT0gRVZFTlRTX0xPR0dFUl9TRVJWSUNFID8gbnVsbCA6IGV2ZW50VHlwZXNcbiAgICB9LFxuICAgIHJldHJ5UG9saWN5OiB7XG4gICAgICBldmVudFRpbWVUb0xpdmVJbk1pbnV0ZXM6IDYwLFxuICAgICAgbWF4RGVsaXZlcnlBdHRlbXB0czogMTBcbiAgICB9LFxuICAgIGV2ZW50RGVsaXZlcnlTY2hlbWE6IFwiRXZlbnRHcmlkU2NoZW1hXCJcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgRUdNQ2xpZW50LmV2ZW50U3Vic2NyaXB0aW9ucy5jcmVhdGVPclVwZGF0ZShcbiAgICBzY29wZSxcbiAgICBzdWJOYW1lLFxuICAgIHByb3BlcnRpZXNcbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlU3ViKEVHTUNsaWVudCwgdG9waWNOYW1lLCBzdWJOYW1lKSB7XG4gIGNvbnN0IHNjb3BlID0gYC9zdWJzY3JpcHRpb25zLyR7U1VCU1JJUFRJT05fSUR9L3Jlc291cmNlR3JvdXBzLyR7UkVTT1VSU0VfR1JPVVB9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL3RvcGljcy8ke3RvcGljTmFtZX1gO1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBFR01DbGllbnQuZXZlbnRTdWJzY3JpcHRpb25zLmRlbGV0ZU1ldGhvZChcbiAgICBzY29wZSxcbiAgICBzdWJOYW1lXG4gICk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxpc3RTdWJzKEVHTUNsaWVudCwgdG9waWNOYW1lKSB7XG4gIGNvbnN0IGxpc3QgPSBhd2FpdCBFR01DbGllbnQuZXZlbnRTdWJzY3JpcHRpb25zLmxpc3RCeVJlc291cmNlKFxuICAgIFJFU09VUlNFX0dST1VQLFxuICAgIFwiTWljcm9zb2Z0LkV2ZW50R3JpZFwiLFxuICAgIFwidG9waWNzXCIsXG4gICAgdG9waWNOYW1lXG4gICk7XG4gIGNvbnN0IHN1YnMgPSBbXTtcbiAgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7XG4gICAgbGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgc3Vicy5wdXNoKHtcbiAgICAgICAgbmFtZTogZWxlbWVudC5uYW1lLFxuICAgICAgICB1cmw6IGVsZW1lbnQuZGVzdGluYXRpb24uZW5kcG9pbnRCYXNlVXJsLFxuICAgICAgICBmaWx0ZXI6IGVsZW1lbnQuZmlsdGVyLFxuICAgICAgICBzdGF0dXM6IGVsZW1lbnQucHJvdmlzaW9uaW5nU3RhdGVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdWJzO1xufVxuXG4vKipcbiAqIENyZWF0ZSBTdWJzY3JpcHRpb24gRW5kcG9pbnQgVXJsXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52aXJvbm1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3N0Zml4XG4gKiBAcGFyYW0ge3N0cmluZ30gYXBpa2V5XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCBjcmVhdGVFbmRwb2ludFVybCA9IChzZXJ2aWNlTmFtZSwgZW52aXJvbm1lbnQsIHBvc3RmaXgsIGFwaWtleSkgPT5cbiAgYGh0dHBzOi8vY3B6LSR7c2VydmljZU5hbWV9LSR7ZW52aXJvbm1lbnR9LmF6dXJld2Vic2l0ZXMubmV0JHtwb3N0Zml4fT9hcGkta2V5PSR7YXBpa2V5fWA7XG5cbi8qKlxuICogQ3JlYXRlIEV2ZW50IEdyaWQgVG9waWMgTmFtZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY05hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnZpcm9ubWVudFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgY3JlYXRlVG9waWNOYW1lID0gKHRvcGljTmFtZSwgZW52aXJvbm1lbnQpID0+XG4gIGBjcHotJHt0b3BpY05hbWV9LSR7ZW52aXJvbm1lbnR9YDtcblxuLyoqXG4gKiBDcmVhdGUgU3Vic2NyaXB0aW9ucyBMaXN0IGZyb20gZ2xvYmFsIGNvbmZpZ3VyYXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52aXJvbm1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKlxuICogQGV4YW1wbGVcbiAqIHsgZXJyb3I6IFt7IG5hbWU6ICdldmVudHNsb2dnZXItZXJyb3InLFxuICogICAgICAgICAgICAgdG9waWM6ICdlcnJvcicsXG4gKiAgICAgICAgICAgICB1cmw6ICdodHRwczovL2Nwei1ldmVudHNsb2dnZXItcHJvZC5henVyZXdlYnNpdGVzLm5ldC9hcGkvZXZlbnRzJyxcbiAqICAgICAgICAgICAgIHR5cGVzOiBbXCJDUFouQWR2aXNlci5FcnJvclwiLFwiQ1BaLkJhY2t0ZXN0ZXIuRXJyb3JcIl0sXG4gKiAgICAgICAgICAgICB0b3BpY05hbWU6ICdjcHotZXJyb3ItcHJvZCcgfV19XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbnNMaXN0KGVudmlyb25tZW50LCBhcGlrZXkpIHtcbiAgbGV0IGFsbEVuZHBvaW50cyA9IFtdO1xuICBPYmplY3Qua2V5cyhldmVudEVuZHBvaW50cykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGFsbEVuZHBvaW50cyA9IFtcbiAgICAgIC4uLm5ldyBTZXQoW1xuICAgICAgICAuLi5ldmVudEVuZHBvaW50c1trZXldLm1hcChlbmRwb2ludCA9PiAoe1xuICAgICAgICAgIC4uLmVuZHBvaW50LFxuICAgICAgICAgIHRvcGljTmFtZTogY3JlYXRlVG9waWNOYW1lKGVuZHBvaW50LnRvcGljLCBlbnZpcm9ubWVudCksXG4gICAgICAgICAgdXJsOiBjcmVhdGVFbmRwb2ludFVybChrZXksIGVudmlyb25tZW50LCBlbmRwb2ludC51cmwsIGFwaWtleSksXG4gICAgICAgICAgc2VydmljZU5hbWU6IGtleVxuICAgICAgICB9KSksXG4gICAgICAgIC4uLmFsbEVuZHBvaW50c1xuICAgICAgXSlcbiAgICBdO1xuICB9KTtcblxuICBjb25zdCBlbmRwb2ludHMgPSB7fTtcbiAgdG9waWNzLmZvckVhY2godG9waWMgPT4ge1xuICAgIGVuZHBvaW50c1t0b3BpY10gPSBhbGxFbmRwb2ludHMuZmlsdGVyKFxuICAgICAgZW5kcG9pbnQgPT4gZW5kcG9pbnQudG9waWMgPT09IHRvcGljXG4gICAgKTtcbiAgfSk7XG4gIHJldHVybiBlbmRwb2ludHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbnMoY2xpZW50LCBzdWJzY3JpcHRpb25zKSB7XG4gIHRyeSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYENyZWF0aW5nICR7c3Vic2NyaXB0aW9uLnRvcGljTmFtZX0gLSAke3N1YnNjcmlwdGlvbi5uYW1lfSBzdWIgdG8gJHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24udXJsXG4gICAgICAgIH1gXG4gICAgICApO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjcmVhdGVPclVwZGF0ZVN1YihjbGllbnQsIHtcbiAgICAgICAgICB0b3BpYzogc3Vic2NyaXB0aW9uLnRvcGljLFxuICAgICAgICAgIHRvcGljTmFtZTogc3Vic2NyaXB0aW9uLnRvcGljTmFtZSxcbiAgICAgICAgICBzZXJ2aWNlTmFtZTogc3Vic2NyaXB0aW9uLnNlcnZpY2VOYW1lLFxuICAgICAgICAgIHN1Yk5hbWU6IHN1YnNjcmlwdGlvbi5uYW1lLFxuICAgICAgICAgIGVuZHBvaW50VXJsOiBzdWJzY3JpcHRpb24udXJsLFxuICAgICAgICAgIGV2ZW50VHlwZXM6IHN1YnNjcmlwdGlvbi50eXBlc1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coc3Vic2NyaXB0aW9uLm5hbWUsIFwib2tcIik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgICovXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgZ2V0Q2xpZW50LFxuICBjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCxcbiAgY3JlYXRlU3Vic2NyaXB0aW9ucyxcbiAgZGVsZXRlU3ViLFxuICBsaXN0U3Vic1xufTtcbiIsIi8qKlxuICogQ2hlY2tzIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICpcbiAqIEBwYXJhbSB7W3N0cmluZ119IGxpc3RcbiAqL1xuZnVuY3Rpb24gY2hlY2tFbnZWYXJzKGxpc3QpIHtcbiAgaWYgKCFsaXN0IHx8ICFBcnJheS5pc0FycmF5KGxpc3QpIHx8IGxpc3QubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGNvbnN0IG1pc3NpbmdWYXJzID0gbGlzdC5maWx0ZXIodmFyaWFibGUgPT4gIXByb2Nlc3MuZW52W3ZhcmlhYmxlXSk7XG4gIGlmIChtaXNzaW5nVmFycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nVmFycy5qb2luKFwiLCBcIil9IHJlcXVpcmVkIWBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IGNoZWNrRW52VmFycyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB2YXJpYWJsZXM6IFtcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxuICAgIFwiQVpfU1RPUkFHRV9UUkFERV9DU1wiLFxuICAgIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcbiAgICBcIkFQSV9LRVlcIixcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gICAgXCJFR19UQVNLU19LRVlcIixcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICAgIFwiRUdfTE9HX0tFWVwiLFxuICAgIFwiRUdfU0lHTkFMU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfU0lHTkFMU19LRVlcIixcbiAgICBcIkRFQlVHXCJcbiAgXVxufTtcbiIsImltcG9ydCBhZHZpc2VyIGZyb20gXCIuL2FkdmlzZXJcIjtcbmltcG9ydCBiYWNrdGVzdGVyIGZyb20gXCIuL2JhY2t0ZXN0ZXJcIjtcbmltcG9ydCBjYW5kbGViYXRjaGVyIGZyb20gXCIuL2NhbmRsZWJhdGNoZXJcIjtcbmltcG9ydCBjb25uZWN0b3IgZnJvbSBcIi4vY29ubmVjdG9yXCI7XG5pbXBvcnQgY29udHJvbCBmcm9tIFwiLi9jb250cm9sXCI7XG5pbXBvcnQgZXZlbnRzbG9nZ2VyIGZyb20gXCIuL2V2ZW50c2xvZ2dlclwiO1xuaW1wb3J0IGltcG9ydGVyIGZyb20gXCIuL2ltcG9ydGVyXCI7XG5pbXBvcnQgbWFya2V0d2F0Y2hlciBmcm9tIFwiLi9tYXJrZXR3YXRjaGVyXCI7XG5pbXBvcnQgdHJhZGVyIGZyb20gXCIuL3RyYWRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkdmlzZXIsXG4gIGJhY2t0ZXN0ZXIsXG4gIGNhbmRsZWJhdGNoZXIsXG4gIGNvbm5lY3RvcixcbiAgY29udHJvbCxcbiAgZXZlbnRzbG9nZ2VyLFxuICBpbXBvcnRlcixcbiAgbWFya2V0d2F0Y2hlcixcbiAgdHJhZGVyXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB2YXJpYWJsZXM6IFtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX1RSQURFX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX0JBQ0tURVNURVJfQ1NcIixcbiAgICBcIkFQSV9LRVlcIixcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gICAgXCJFR19UQVNLU19LRVlcIixcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICAgIFwiRUdfTE9HX0tFWVwiLFxuICAgIFwiREJfQVBJX0VORFBPSU5UXCIsXG4gICAgXCJEQl9BUElfQUNDRVNTX0tFWVwiLFxuICAgIFwiREVCVUdcIlxuICBdXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB2YXJpYWJsZXM6IFtcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxuICAgIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcbiAgICBcIkFQSV9LRVlcIixcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gICAgXCJFR19UQVNLU19LRVlcIixcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICAgIFwiRUdfTE9HX0tFWVwiLFxuICAgIFwiRUdfQ0FORExFU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfQ0FORExFU19LRVlcIixcbiAgICBcIkRCX0FQSV9FTkRQT0lOVFwiLFxuICAgIFwiREJfQVBJX0FDQ0VTU19LRVlcIixcbiAgICBcIkNPTk5FQ1RPUl9BUElfRU5EUE9JTlRcIixcbiAgICBcIkNPTk5FQ1RPUl9BUElfS0VZXCJcbiAgXVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdmFyaWFibGVzOiBbXG4gICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgICBcIkFQSV9LRVlcIixcbiAgICBcIlBST1hZX0VORFBPSU5UXCIsXG4gICAgXCJLRVlfVkFVTFRfVVJMXCIsXG4gICAgXCJLRVlfVkFVTFRfUkVBRF9DTElFTlRfSURcIixcbiAgICBcIktFWV9WQVVMVF9SRUFEX0FQUF9TRUNSRVRcIixcbiAgICBcIktFWV9WQVVMVF9ERUNSX0NMSUVOVF9JRFwiLFxuICAgIFwiS0VZX1ZBVUxUX0RFQ1JfQVBQX1NFQ1JFVFwiXG4gIF1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHZhcmlhYmxlczogW1xuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gICAgXCJBWl9TVE9SQUdFX0NPTlRST0xfQ1NcIixcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX1RSQURFX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX0JBQ0tURVNURVJfQ1NcIixcbiAgICBcIkFQSV9LRVlcIixcbiAgICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gICAgXCJFR19UQVNLU19LRVlcIixcbiAgICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICAgIFwiRUdfTE9HX0tFWVwiLFxuICAgIFwiREJfQVBJX0VORFBPSU5UXCIsXG4gICAgXCJEQl9BUElfQUNDRVNTX0tFWVwiXG4gIF1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHZhcmlhYmxlczogW1xuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gICAgXCJBWl9TVE9SQUdFX0VWRU5UX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxuICAgIFwiRUdfRU1VTEFUT1JfTU9ERVwiLFxuICAgIFwiTE9HX1RBQkxFX1NUT1JBR0VcIixcbiAgICBcIkxPR19QT1NUR1JFXCIsXG4gICAgXCJEQl9BUElfRU5EUE9JTlRcIixcbiAgICBcIkRCX0FQSV9BQ0NFU1NfS0VZXCIsXG4gICAgXCJBUElfS0VZXCJcbiAgXVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdmFyaWFibGVzOiBbXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gICAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxuICAgIFwiQVBJX0tFWVwiLFxuICAgIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcbiAgICBcIkVHX1RBU0tTX0tFWVwiLFxuICAgIFwiRUdfTE9HX0VORFBPSU5UXCIsXG4gICAgXCJFR19MT0dfS0VZXCIsXG4gICAgXCJEQl9BUElfRU5EUE9JTlRcIixcbiAgICBcIkRCX0FQSV9BQ0NFU1NfS0VZXCIsXG4gICAgXCJDT05ORUNUT1JfQVBJX0VORFBPSU5UXCIsXG4gICAgXCJDT05ORUNUT1JfQVBJX0tFWVwiLFxuICAgIFwiREVCVUdcIlxuICBdXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICB2YXJpYWJsZXM6IFtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gICAgXCJBUElfS0VZXCIsXG4gICAgXCJQUk9YWV9FTkRQT0lOVFwiLFxuICAgIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcbiAgICBcIkVHX1RBU0tTX0tFWVwiLFxuICAgIFwiRUdfTE9HX0VORFBPSU5UXCIsXG4gICAgXCJFR19MT0dfS0VZXCIsXG4gICAgXCJFR19USUNLU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfVElDS1NfS0VZXCIsXG4gICAgXCJERUJVR1wiXG4gIF1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHZhcmlhYmxlczogW1xuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gICAgXCJBWl9TVE9SQUdFX0NPTlRST0xfQ1NcIixcbiAgICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gICAgXCJBWl9TVE9SQUdFX0VWRU5UX0NTXCIsXG4gICAgXCJBUElfS0VZXCIsXG4gICAgXCJFR19UQVNLU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfVEFTS1NfS0VZXCIsXG4gICAgXCJFR19MT0dfRU5EUE9JTlRcIixcbiAgICBcIkVHX0xPR19LRVlcIixcbiAgICBcIkVHX0VSUk9SX0VORFBPSU5UXCIsXG4gICAgXCJFR19FUlJPUl9LRVlcIixcbiAgICBcIkVHX1RSQURFU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfVFJBREVTX0tFWVwiLFxuICAgIFwiRUdfU0lHTkFMU19FTkRQT0lOVFwiLFxuICAgIFwiRUdfU0lHTkFMU19LRVlcIixcbiAgICBcIkNPTk5FQ1RPUl9BUElfRU5EUE9JTlRcIixcbiAgICBcIkNPTk5FQ1RPUl9BUElfS0VZXCJcbiAgXVxufTtcbiIsImltcG9ydCBlbnZWYXJzIGZyb20gXCJjcHpFbnZcIjtcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBzZXRTZWNyZXQgfSBmcm9tIFwiY3B6S2V5VmF1bHRcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuY29uc3Qge1xuICBLRVlfVkFVTFRfVVJMLFxuICBLRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lELFxuICBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVFxufSA9IHByb2Nlc3MuZW52O1xuXG5mdW5jdGlvbiBsb2FkRW52RmlsZSgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBlbnZGaWxlID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoXCJlbnZsaXN0Lmpzb25cIikpO1xuICAgIGNvbnNvbGUubG9nKFwiRm91bmQgZW52bGlzdC5qc29uXCIpO1xuICAgIHJldHVybiBlbnZGaWxlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKFwiTm8gY3VycmVudCBlbnYgbGlzdCBmaWxlXCIpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZWYXJzTGlzdCgpIHtcbiAgbGV0IGVudkZpbGUgPSBsb2FkRW52RmlsZSgpO1xuXG4gIGlmICghZW52RmlsZSkgZW52RmlsZSA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGVudlZhcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoIWVudkZpbGVba2V5XSkgZW52RmlsZVtrZXldID0ge307XG4gICAgZW52VmFyc1trZXldLnZhcmlhYmxlcy5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgIGlmICghZW52RmlsZVtrZXldW3ZhcmlhYmxlXSkgZW52RmlsZVtrZXldW3ZhcmlhYmxlXSA9IFwiXCI7XG4gICAgfSk7XG4gICAgY29uc3QgcmVkdW5kYW50VmFycyA9IE9iamVjdC5rZXlzKGVudkZpbGVba2V5XSkuZmlsdGVyKFxuICAgICAgdmFyaWFibGUgPT4gIWVudlZhcnNba2V5XS52YXJpYWJsZXMuaW5jbHVkZXModmFyaWFibGUpXG4gICAgKTtcbiAgICByZWR1bmRhbnRWYXJzLmZvckVhY2godmFyaWFibGUgPT4ge1xuICAgICAgZGVsZXRlIGVudkZpbGVba2V5XVt2YXJpYWJsZV07XG4gICAgfSk7XG4gIH0pO1xuXG4gIGZzLndyaXRlRmlsZVN5bmMoXCJlbnZsaXN0Lmpzb25cIiwgSlNPTi5zdHJpbmdpZnkoZW52RmlsZSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRTZWNyZXRFbnZWYXJzKGVudmlyb25tZW50KSB7XG4gIGNvbnN0IGVudkZpbGUgPSBsb2FkRW52RmlsZSgpO1xuICBpZiAoIWVudkZpbGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIkNyZWF0ZSBlbnZsaXN0Lmpzb24gZmlyc3RcIiwgXCJlbnYgY3JlYXRlIGxpc3RcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGVudlNldFJlc3VsdCA9IHsgLi4uZW52RmlsZSB9O1xuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBPYmplY3Qua2V5cyhlbnZGaWxlKS5tYXAoYXN5bmMga2V5ID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBPYmplY3Qua2V5cyhlbnZGaWxlW2tleV0pLm1hcChhc3luYyB2YXJpYWJsZSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VjcmV0TmFtZSA9IGAke2tleX0tJHt2YXJpYWJsZX0tJHtlbnZpcm9ubWVudH1gLnJlcGxhY2UoXG4gICAgICAgICAgICAvXy9nLFxuICAgICAgICAgICAgXCItXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNlY3JldE5hbWUpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVudkZpbGVba2V5XVt2YXJpYWJsZV0pO1xuICAgICAgICAgIGF3YWl0IHNldFNlY3JldCh7XG4gICAgICAgICAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXG4gICAgICAgICAgICBjbGllbnRJZDogS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCxcbiAgICAgICAgICAgIGFwcFNlY3JldDogS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQsXG4gICAgICAgICAgICBzZWNyZXRWYWx1ZTogZW52RmlsZVtrZXldW3ZhcmlhYmxlXSxcbiAgICAgICAgICAgIHNlY3JldE5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbnZTZXRSZXN1bHRba2V5XVt2YXJpYWJsZV0gPSBzZWNyZXROYW1lO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuICApO1xuXG4gIGZzLndyaXRlRmlsZVN5bmMoXCJlbnZzZXRyZXN1bHQuanNvblwiLCBKU09OLnN0cmluZ2lmeShlbnZTZXRSZXN1bHQpKTtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVFbnZWYXJzTGlzdCwgc2V0U2VjcmV0RW52VmFycyB9O1xuIiwiaW1wb3J0IFZvcnBhbCBmcm9tIFwidm9ycGFsXCI7XG5cbmltcG9ydCB7IHNhdmVBUElLZXlzIH0gZnJvbSBcIi4va2V5VmF1bHRcIjtcbmltcG9ydCB7IGNyZWF0ZVN1YnMgfSBmcm9tIFwiLi9ldmVudEdyaWRcIjtcbmltcG9ydCB7IGNyZWF0ZUVudkxpc3QsIHVwZGF0ZUVudlZhcnMgfSBmcm9tIFwiLi9lbnZ2YXJzXCI7XG5cbmNvbnN0IHZvcnBhbCA9IG5ldyBWb3JwYWwoKTtcbnZvcnBhbFxuICAuY29tbWFuZChcbiAgICBcImt2IHNhdmUgYXBpLWtleXMgPEFQSUtleT4gPEFQSVNlY3JldD5cIixcbiAgICBcIkVuY3J5cHQgYW5kIHNhdmUgRXhjaGFuZ2UgQVBJIEtleXMgdG8gS2V5IFZhdWx0LlwiXG4gIClcbiAgLm9wdGlvbihcIi11LCAtLXVzZXIgPHVzZXJJZD5cIiwgXCJVc2UgdXNlcklkIGFzIG5hbWVcIilcbiAgLm9wdGlvbihcIi1zLCAtLXNwYXJlXCIsIFwiU2F2ZSBzcGFyZSBrZXlzLlwiKVxuICAub3B0aW9uKFxuICAgIFwiLS1BUElLZXlFbmNyS2V5TmFtZSA8QVBJS2V5RW5jcktleU5hbWU+XCIsXG4gICAgXCJFbmNyeXB0aW9uIGtleSBuYW1lIGZvciBBUEkgS2V5LlwiXG4gIClcbiAgLm9wdGlvbihcbiAgICBcIi0tQVBJU2VjcmV0RW5jcktleU5hbWUgPEFQSVNlY3JldEVuY3JLZXlOYW1lPlwiLFxuICAgIFwiRW5jcnlwdGlvbiBrZXkgbmFtZSBmb3IgQVBJIFNlY3JldC5cIlxuICApXG4gIC5vcHRpb24oXG4gICAgXCItLUFQSUtleVNlY3JldE5hbWUgPEFQSUtleVNlY3JldE5hbWU+XCIsXG4gICAgXCJOYW1lIG9mIHNlY3JldCBmb3IgQVBJIEtleS5cIlxuICApXG4gIC5vcHRpb24oXG4gICAgXCItLUFQSVNlY3JldFNlY3JldE5hbWUgPEFQSVNlY3JldFNlY3JldE5hbWU+XCIsXG4gICAgXCJOYW1lIG9mIHNlY3JldCBmb3IgQVBJIFNlY3JldC5cIlxuICApXG4gIC5hY3Rpb24oc2F2ZUFQSUtleXMpO1xuXG52b3JwYWwuY29tbWFuZChcImVnIGNyZWF0ZSBzdWJzIDxFbnY+IDxBUElLZXk+XCIpLmFjdGlvbihjcmVhdGVTdWJzKTtcbnZvcnBhbC5jb21tYW5kKFwiZW52IGNyZWF0ZSBsaXN0XCIpLmFjdGlvbihjcmVhdGVFbnZMaXN0KTtcbnZvcnBhbC5jb21tYW5kKFwiZW52IHVwZGF0ZSA8RW52PlwiKS5hY3Rpb24odXBkYXRlRW52VmFycyk7XG52b3JwYWwuZGVsaW1pdGVyKFwiY3B6JFwiKS5zaG93KCk7XG4iLCJpbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGVuY3J5cHRBbmRTYXZlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUFQSUtleXMoYXJncykge1xuICB0aGlzLmxvZyhhcmdzKTtcbiAgY29uc3QgeyBBUElLZXksIEFQSVNlY3JldCB9ID0gYXJncztcbiAgY29uc3Qge1xuICAgIHVzZXIsXG4gICAgc3BhcmUsXG4gICAgQVBJS2V5RW5jcktleU5hbWUsXG4gICAgQVBJU2VjcmV0RW5jcktleU5hbWUsXG4gICAgQVBJS2V5U2VjcmV0TmFtZSxcbiAgICBBUElTZWNyZXRTZWNyZXROYW1lXG4gIH0gPSBhcmdzLm9wdGlvbnM7XG5cbiAgY29uc3QgaW5mbyA9IHtcbiAgICBBUElLZXk6IHt9LFxuICAgIEFQSVNlY3JldDoge31cbiAgfTtcbiAgaWYgKHVzZXIpIHtcbiAgICBpbmZvLkFQSUtleS5lbmNyeXB0aW9uS2V5TmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcbiAgICBpbmZvLkFQSVNlY3JldC5lbmNyeXB0aW9uS2V5TmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcbiAgICBpbmZvLkFQSUtleS5uYW1lID0gdXNlci50b1N0cmluZygpO1xuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUgPSB1c2VyLnRvU3RyaW5nKCk7XG4gIH1cbiAgaW5mby5BUElLZXkuZW5jcnlwdGlvbktleU5hbWUgPVxuICAgIEFQSUtleUVuY3JLZXlOYW1lIHx8IGluZm8uQVBJS2V5LmVuY3J5cHRpb25LZXlOYW1lIHx8IHV1aWQoKTtcbiAgaW5mby5BUElTZWNyZXQuZW5jcnlwdGlvbktleU5hbWUgPVxuICAgIEFQSVNlY3JldEVuY3JLZXlOYW1lIHx8IGluZm8uQVBJU2VjcmV0LmVuY3J5cHRpb25LZXlOYW1lIHx8IHV1aWQoKTtcbiAgaW5mby5BUElLZXkubmFtZSA9IEFQSUtleVNlY3JldE5hbWUgfHwgaW5mby5BUElLZXkubmFtZSB8fCB1dWlkKCk7XG4gIGluZm8uQVBJU2VjcmV0Lm5hbWUgPSBBUElTZWNyZXRTZWNyZXROYW1lIHx8IGluZm8uQVBJU2VjcmV0Lm5hbWUgfHwgdXVpZCgpO1xuICBpbmZvLkFQSUtleS52ZXJzaW9uID0gYXdhaXQgZW5jcnlwdEFuZFNhdmUoXG4gICAgaW5mby5BUElLZXkuZW5jcnlwdGlvbktleU5hbWUsXG4gICAgaW5mby5BUElLZXkubmFtZSxcbiAgICBBUElLZXlcbiAgKTtcbiAgaW5mby5BUElTZWNyZXQudmVyc2lvbiA9IGF3YWl0IGVuY3J5cHRBbmRTYXZlKFxuICAgIGluZm8uQVBJU2VjcmV0LmVuY3J5cHRpb25LZXlOYW1lLFxuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUsXG4gICAgQVBJU2VjcmV0XG4gICk7XG5cbiAgY29uc3Qga2V5cyA9IHt9O1xuICBpZiAoc3BhcmUpIHtcbiAgICBrZXlzLnNwYXJlID0gaW5mbztcbiAgfSBlbHNlIHtcbiAgICBrZXlzLm1haW4gPSBpbmZvO1xuICB9XG5cbiAgdGhpcy5sb2coSlNPTi5zdHJpbmdpZnkoa2V5cykpO1xufVxuXG5leHBvcnQgeyBzYXZlQVBJS2V5cyB9O1xuIiwiaW1wb3J0IHtcbiAgZ2V0Q2xpZW50LFxuICBjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCxcbiAgY3JlYXRlU3Vic2NyaXB0aW9uc1xufSBmcm9tIFwiLi91dGlsc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTdWJzKGFyZ3MpIHtcbiAgdGhpcy5sb2coXCJjcmVhdGVTdWJzXCIsIGFyZ3MpO1xuICB0aGlzLmxvZyhcIkNyZWF0aW5nIEV2ZW50IEdyaWQgc3Vic2NyaXB0aW9ucyBmb3IgZW52aXJvbm1lbnRcIiwgYXJncy5FbnYpO1xuICBjb25zdCBFR01DbGllbnQgPSBhd2FpdCBnZXRDbGllbnQoKTtcbiAgdGhpcy5sb2coXCJDb25uZWN0ZWQgdG8gQXp1cmUhXCIpO1xuICBjb25zdCBzdWJzY3JpcHRpb25zID0gY3JlYXRlU3Vic2NyaXB0aW9uc0xpc3QoYXJncy5FbnYsIGFyZ3MuQVBJS2V5KTtcbiAgLyogdGhpcy5sb2coXG4gICAgXCJTdWJzY3JpcHRpb25zIGxpc3RcIixcblxuICAgIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpLm1hcChcbiAgICAgIGtleSA9PiBgJHtrZXl9OiAke3N1YnNjcmlwdGlvbnNba2V5XS5tYXAoc3ViID0+IHN1Yi5uYW1lKS5qb2luKFwiLCBcIil9YFxuICAgIClcbiAgKTsgKi9cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9ucykpIHtcbiAgICBjb25zdCB0b3BpY1N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zW2tleV07XG4gICAgdGhpcy5sb2coXG4gICAgICBgQ3JlYXRpbmcgXCIke2tleX1cIiBzdWJzY3JpcHRpb25zYCxcbiAgICAgIHRvcGljU3Vic2NyaXB0aW9ucy5tYXAoc3ViID0+IHN1Yi5uYW1lKS5qb2luKFwiLCBcIilcbiAgICApO1xuICAgIGF3YWl0IGNyZWF0ZVN1YnNjcmlwdGlvbnMoRUdNQ2xpZW50LCB0b3BpY1N1YnNjcmlwdGlvbnMpO1xuICB9XG4gIC8qIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1hd2FpdC1pbi1sb29wICovXG59XG5leHBvcnQgeyBjcmVhdGVTdWJzIH07XG4iLCJpbXBvcnQgeyBnZW5lcmF0ZUVudlZhcnNMaXN0LCBzZXRTZWNyZXRFbnZWYXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW52TGlzdChhcmdzKSB7XG4gIHRoaXMubG9nKFwiY3JlYXRlRW52TGlzdFwiLCBhcmdzKTtcbiAgZ2VuZXJhdGVFbnZWYXJzTGlzdCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVFbnZWYXJzKGFyZ3MpIHtcbiAgdGhpcy5sb2coXCJ1cGRhdGVFbnZWYXJzXCIsIGFyZ3MpO1xuICBhd2FpdCBzZXRTZWNyZXRFbnZWYXJzKGFyZ3MuRW52KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRW52TGlzdCwgdXBkYXRlRW52VmFycyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGF6dXJlL21zLXJlc3Qtbm9kZWF1dGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWRhbC1ub2RlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF6dXJlLWtleXZhdWx0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRvdGVudi1zYWZlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV1aWRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidmVycm9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInZvcnBhbFwiKTsiXSwic291cmNlUm9vdCI6IiJ9