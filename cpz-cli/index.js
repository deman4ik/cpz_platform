require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(a,s,function(t){return e[t]}.bind(null,s));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),s=r.n(a),n=r("uuid"),o=r("verror"),c=r.n(o),i=r("azure-keyvault"),E=r.n(i),_=r("adal-node");var P=function(e,t){try{const r=(r,a)=>new _.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new E.a.KeyVaultClient(new E.a.KeyVaultCredentials(r))}catch(e){throw new c.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var p=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const s=P(t,r),n={keySize:4096,keyOps:["encrypt","decrypt"]},o=await s.createKey(e,a,"RSA",n);return E.a.parseKeyIdentifier(o.key.kid)}catch(e){throw new c.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var T=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:s,keyVersion:n=""}){try{const o=P(t,r),i=await o.encrypt(e,s,n,"RSA-OAEP",Buffer.from(a));return JSON.stringify(i.result)}catch(e){throw new c.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var l=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:s}){try{const n=P(t,r),o=await n.setSecret(e,s,a);return E.a.parseSecretIdentifier(o.id)}catch(e){throw new c.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},S=r("dotenv-safe"),d=r.n(S);d.a.config();const{KEY_VAULT_URL:C,KEY_VAULT_WRITE_CLIENT_ID:A,KEY_VAULT_WRITE_APP_SECRET:u}=process.env;async function k(e,t,r){await p({uri:C,clientId:A,appSecret:u,keyName:e});const a=await T({uri:C,clientId:A,appSecret:u,value:r,keyName:e});return(await l({uri:C,clientId:A,appSecret:u,secretValue:a,secretName:t})).version}var N=r("@azure/ms-rest-nodeauth"),I=r("@azure/arm-eventgrid");var y=["tasks","candles","ticks","signals","trades","log","error"];var O={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8104,types:["CPZ.Tasks.Adviser.Start","CPZ.Tasks.Adviser.Stop","CPZ.Tasks.Adviser.Update","CPZ.Tasks.Adviser.Run"]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",localPort:8104,types:["CPZ.Candles.NewCandle"]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8108,types:["CPZ.Tasks.Backtester.Start","CPZ.Tasks.Backtester.Stop"]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8103,types:["CPZ.Tasks.Candlebatcher.Start","CPZ.Tasks.Candlebatcher.Stop","CPZ.Tasks.Candlebatcher.Update","CPZ.Tasks.Candlebatcher.Run"]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/serviceEvents",localPort:8107,types:["CPZ.Tasks.Marketwatcher.Started","CPZ.Tasks.Marketwatcher.Stopped","CPZ.Tasks.Marketwatcher.Updated","CPZ.Tasks.Candlebatcher.Started","CPZ.Tasks.Candlebatcher.Stopped","CPZ.Tasks.Candlebatcher.Updated","CPZ.Tasks.Importer.Started","CPZ.Tasks.Importer.Stoppped","CPZ.Tasks.Importer.Finished","CPZ.Tasks.Adviser.Started","CPZ.Tasks.Adviser.Stopped","CPZ.Tasks.Adviser.Updated","CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Backtester.Started","CPZ.Tasks.Backtester.Stopped","CPZ.Tasks.Backtester.Finished","CPZ.Tasks.Exwatcher.Started","CPZ.Tasks.Exwatcher.Stopped"]},{name:"control-error",topic:"error",url:"/api/serviceEvents",localPort:8107,types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Candlebatcher.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error"]}]},...{eventslogger:[{name:"eventslogger-tasks",topic:"tasks",url:"/api/events",types:["CPZ.Tasks.Adviser.Start","CPZ.Tasks.Adviser.Stop","CPZ.Tasks.Adviser.Update","CPZ.Tasks.Adviser.Started","CPZ.Tasks.Adviser.Stopped","CPZ.Tasks.Adviser.Updated","CPZ.Tasks.Backtester.Start","CPZ.Tasks.Backtester.Stop","CPZ.Tasks.Backtester.Started","CPZ.Tasks.Backtester.Stopped","CPZ.Tasks.Backtester.Finished","CPZ.Tasks.Candlebatcher.Start","CPZ.Tasks.Candlebatcher.Stop","CPZ.Tasks.Candlebatcher.Update","CPZ.Tasks.Candlebatcher.Started","CPZ.Tasks.Candlebatcher.Stopped","CPZ.Tasks.Candlebatcher.Updated","CPZ.Tasks.Importer.Start","CPZ.Tasks.Importer.Stop","CPZ.Tasks.Importer.Started","CPZ.Tasks.Importer.Stoppped","CPZ.Tasks.Importer.Finished","CPZ.Tasks.Marketwatcher.Start","CPZ.Tasks.Marketwatcher.Stop","CPZ.Tasks.Marketwatcher.Subscribe","CPZ.Tasks.Marketwatcher.Unsubscribe","CPZ.Tasks.Marketwatcher.Started","CPZ.Tasks.Marketwatcher.Stopped","CPZ.Tasks.Marketwatcher.Updated","CPZ.Tasks.Trader.Start","CPZ.Tasks.Trader.Stop","CPZ.Tasks.Trader.Update","CPZ.Tasks.Trader.Started","CPZ.Tasks.Trader.Stopped","CPZ.Tasks.Trader.Updated","CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished","CPZ.Tasks.Exwatcher.Started","CPZ.Tasks.Exwatcher.Stopped","CPZ.Tasks.UserRobot.Hist"]},{name:"eventslogger-candles",topic:"candles",url:"/api/events",types:["CPZ.Candles.NewCandle","CPZ.Candles.Handled"]},{name:"eventslogger-signals",topic:"signals",url:"/api/events",types:["CPZ.Signals.NewSignal","CPZ.Signals.Handled"]},{name:"eventslogger-ticks",topic:"ticks",url:"/api/events",types:["CPZ.Ticks.NewTick","CPZ.Ticks.Handled"]},{name:"eventslogger-trades",topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:"eventslogger-log",topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:"eventslogger-error",topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8105,types:["CPZ.Tasks.Importer.Start","CPZ.Tasks.Importer.Stop"]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8102,types:["CPZ.Tasks.Marketwatcher.Start","CPZ.Tasks.Marketwatcher.Stop","CPZ.Tasks.Marketwatcher.Subscribe","CPZ.Tasks.Marketwatcher.Unsubscribe"]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8106,types:["CPZ.Tasks.Trader.Start","CPZ.Tasks.Trader.Stop","CPZ.Tasks.Trader.Update","CPZ.Tasks.Trader.Run"]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",localPort:8106,types:["CPZ.Candles.NewCandle"]},{name:"trader-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8106,types:["CPZ.Ticks.NewTick"]},{name:"trader-signals",topic:"signals",url:"/api/signalEvents",localPort:8106,types:["CPZ.Signals.NewSignal"]}]}};d.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP","STORAGE"]);const{MANAGE_APP_ID:v,MANAGE_APP_KEY:Z,AD_DIRECTORY_ID:m,SUBSRIPTION_ID:K,RESOURSE_GROUP:R,STORAGE:G}=process.env;async function g(e,{topic:t,topicName:r,serviceName:a,subName:s,endpointUrl:n,eventTypes:o},c=!1){const i=`/subscriptions/${K}/resourceGroups/${R}/providers/Microsoft.EventGrid/topics/${r}`,E={deadLetterDestination:{endpointType:"StorageBlob",blobContainerName:`eg-${t}-dead`,resourceId:`/subscriptions/${K}/resourceGroups/${R}/providers/microsoft.Storage/storageAccounts/${G}`},destination:{endpointType:"WebHook",endpointUrl:n},filter:{includedEventTypes:o},retryPolicy:{eventTimeToLiveInMinutes:60,maxDeliveryAttempts:10},eventDeliverySchema:"EventGridSchema"};return c?(console.warn(s,i,E),!0):await e.eventSubscriptions.createOrUpdate(i,s,E)}const f=(e,t,r,a)=>`https://cpz-${e}-${t}.azurewebsites.net${r}?api-key=${a}`,b=(e,t)=>`cpz-${e}-${t}`;async function h(e,t,r=!1){try{for(const a of t){console.log(`Creating ${a.topicName} - ${a.name} sub to ${a.url}`);try{await g(e,{topic:a.topic,topicName:a.topicName,serviceName:a.serviceName,subName:a.name,endpointUrl:a.url,eventTypes:a.types},r),console.log(a.name,"ok")}catch(e){console.log(e)}}}catch(e){console.error(e)}}var D={adviser:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_EVENT_CS","AZ_STORAGE_BLOB_NAME","AZ_STORAGE_BLOB_KEY","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DEBUG"],backtester:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"],candlebatcher:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_EVENT_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"],connector:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"],control:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_BACKTESTER_CS","AZ_STORAGE_EVENT_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"],eventslogger:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"],importer:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"],marketwatcher:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","PROXY_ENDPOINT","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","DEBUG"],trader:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_EVENT_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_ERROR_ENDPOINT","EG_ERROR_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},w=r("fs"),L=r.n(w);d.a.config();const{KEY_VAULT_URL:U,KEY_VAULT_WRITE_CLIENT_ID:Y,KEY_VAULT_WRITE_APP_SECRET:M}=process.env;function B(){try{const e=JSON.parse(L.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),e}catch(e){return console.log("No current env list file"),{}}}const V=new s.a;V.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:s,APIKeyEncrKeyName:o,APISecretEncrKeyName:c,APIKeySecretName:i,APISecretSecretName:E}=e.options,_={APIKey:{},APISecret:{}};a&&(_.APIKey.encryptionKeyName=a.toString(),_.APISecret.encryptionKeyName=a.toString(),_.APIKey.name=a.toString(),_.APISecret.name=a.toString()),_.APIKey.encryptionKeyName=o||_.APIKey.encryptionKeyName||Object(n.v4)(),_.APISecret.encryptionKeyName=c||_.APISecret.encryptionKeyName||Object(n.v4)(),_.APIKey.name=i||_.APIKey.name||Object(n.v4)(),_.APISecret.name=E||_.APISecret.name||Object(n.v4)(),_.APIKey.version=await k(_.APIKey.encryptionKeyName,_.APIKey.name,t),_.APISecret.version=await k(_.APISecret.encryptionKeyName,_.APISecret.name,r);const P={};s?P.spare=_:P.main=_,this.log(JSON.stringify(P))}),V.command("eg create subs <Env> <APIKey>").option("-d, --debug","Debug mode.").action(async function(e){this.log("createSubs",e),this.log("Creating Event Grid subscriptions for environment",e.Env);const t=await async function(){const e=await N.loginWithServicePrincipalSecret(v,Z,m);return new I.EventGridManagementClient(e,K)}();this.log("Connected to Azure!");const r=function(e,t){let r=[];Object.keys(O).filter(e=>"adviser"===e).forEach(a=>{r=[...new Set([...O[a].map(r=>({...r,topicName:b(r.topic,e),url:f(a,e,r.url,t),serviceName:a})),...r])]});const a={};return y.forEach(e=>{a[e]=r.filter(t=>t.topic===e)}),a}(e.Env,e.APIKey);for(const a of Object.keys(r)){const s=r[a];this.log(`Creating "${a}" subscriptions`,s.map(e=>e.name).join(", ")),await h(t,s,e.options.debug)}}),V.command("env create list").action(async function(e){this.log("createEnvList",e),function(){let e=B();e||(e={}),Object.keys(D).forEach(t=>{e[t]||(e[t]={}),D[t].variables.forEach(r=>{e[t][r]||(e[t][r]="")}),Object.keys(e[t]).filter(e=>!D[t].variables.includes(e)).forEach(r=>{delete e[t][r]})}),L.a.writeFileSync("envlist.json",JSON.stringify(e))}()}),V.command("env update <Env>").action(async function(e){this.log("updateEnvVars",e),await async function(e){const t=B();if(!t)return void console.log("Create envlist.json first","env create list");const r={...t};await Promise.all(Object.keys(t).map(async a=>{await Promise.all(Object.keys(t[a]).map(async s=>{const n=`${a}-${s}-${e}`.replace(/_/g,"-");console.log(n),console.log(t[a][s]),await l({uri:U,clientId:Y,appSecret:M,secretValue:t[a][s],secretName:n}),r[a][s]=n}))})),L.a.writeFileSync("envsetresult.json",JSON.stringify(r))}(e.Env)}),V.delimiter("cpz$").show()},"@azure/arm-eventgrid":function(e,t){e.exports=require("@azure/arm-eventgrid")},"@azure/ms-rest-nodeauth":function(e,t){e.exports=require("@azure/ms-rest-nodeauth")},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},fs:function(e,t){e.exports=require("fs")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQva2V5VmF1bHQvY2xpZW50LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L2NyZWF0ZUtleS5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9rZXlWYXVsdC9lbmNyeXB0LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2tleVZhdWx0L3NldFNlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMva2V5VmF1bHQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL3RvcGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvZW5kcG9pbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy9lbmRwb2ludHMvYWR2aXNlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGFza3MvYWR2aXNlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvY2FuZGxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvZW5kcG9pbnRzL2JhY2t0ZXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL2VuZHBvaW50cy9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy9lbmRwb2ludHMvY29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGFza3MvbWFya2V0d2F0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGFza3MvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL3R5cGVzL3Rhc2tzL3RyYWRlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGFza3MvZXh3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy90eXBlcy9lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvZW5kcG9pbnRzL2V2ZW50c2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGFza3MvYmFja3Rlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL3R5cGVzL3Rhc2tzL3VzZXJSb2JvdC5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvc2lnbmFscy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvdGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL3R5cGVzL3RyYWRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9ldmVudHMvdHlwZXMvbG9nLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy9lbmRwb2ludHMvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvZXZlbnRzL2VuZHBvaW50cy9tYXJrZXR3YXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2V2ZW50cy9lbmRwb2ludHMvdHJhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvdXRpbHMvZW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2FkdmlzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9iYWNrdGVzdGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jYW5kbGViYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9jcHotc2hhcmVkL2NvbmZpZy9lbnZpcm9ubWVudC9jb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2NvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L2V2ZW50c2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vY3B6LXNoYXJlZC9jb25maWcvZW52aXJvbm1lbnQvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L21hcmtldHdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2Nwei1zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50L3RyYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZW52dmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tleVZhdWx0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudEdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudnZhcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYXp1cmUvbXMtcmVzdC1ub2RlYXV0aFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImFkYWwtbm9kZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImF6dXJlLWtleXZhdWx0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZG90ZW52LXNhZmVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInV1aWRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2ZXJyb3JcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2b3JwYWxcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNsaWVudCIsImNsaWVudElkIiwic2VjcmV0IiwiYWRhbENhbGxiYWNrIiwiY2hhbGxlbmdlIiwiY2FsbGJhY2siLCJleHRlcm5hbF9hZGFsX25vZGVfIiwiYXV0aG9yaXphdGlvbiIsImFjcXVpcmVUb2tlbldpdGhDbGllbnRDcmVkZW50aWFscyIsInJlc291cmNlIiwiZXJyIiwidG9rZW5SZXNwb25zZSIsInRva2VuVHlwZSIsImFjY2Vzc1Rva2VuIiwiZXh0ZXJuYWxfYXp1cmVfa2V5dmF1bHRfZGVmYXVsdCIsImEiLCJLZXlWYXVsdENsaWVudCIsIktleVZhdWx0Q3JlZGVudGlhbHMiLCJlcnJvciIsImV4dGVybmFsX3ZlcnJvcl9kZWZhdWx0IiwiY2F1c2UiLCJrZXlWYXVsdF9jcmVhdGVLZXkiLCJhc3luYyIsInVyaSIsImFwcFNlY3JldCIsImtleU5hbWUiLCJrZXlWYXVsdENsaWVudCIsImtleU9wdGlvbnMiLCJrZXlTaXplIiwia2V5T3BzIiwicmVzdWx0IiwiY3JlYXRlS2V5IiwicGFyc2VLZXlJZGVudGlmaWVyIiwia2lkIiwia2V5VmF1bHRfZW5jcnlwdCIsImtleVZlcnNpb24iLCJlbmNyeXB0IiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXlWYXVsdF9zZXRTZWNyZXQiLCJzZWNyZXRWYWx1ZSIsInNlY3JldE5hbWUiLCJzZXRTZWNyZXQiLCJwYXJzZVNlY3JldElkZW50aWZpZXIiLCJpZCIsImV4dGVybmFsX2RvdGVudl9zYWZlX2RlZmF1bHQiLCJjb25maWciLCJLRVlfVkFVTFRfVVJMIiwiS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCIsIktFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVUIiwicHJvY2VzcyIsImVudiIsImVuY3J5cHRBbmRTYXZlIiwiZW5jcnlwdGVkRGF0YSIsInZlcnNpb24iLCJldmVudHNfdG9waWNzIiwiZXZlbnRzX2VuZHBvaW50cyIsImFkdmlzZXIiLCJ0b3BpYyIsInVybCIsImxvY2FsUG9ydCIsInR5cGVzIiwiYmFja3Rlc3RlciIsImNhbmRsZWJhdGNoZXIiLCJjb250cm9sIiwiZXZlbnRzbG9nZ2VyIiwiaW1wb3J0ZXIiLCJtYXJrZXR3YXRjaGVyIiwidHJhZGVyIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIm1pc3NpbmdWYXJzIiwiZmlsdGVyIiwidmFyaWFibGUiLCJFcnJvciIsImpvaW4iLCJjaGVja0VudlZhcnMiLCJNQU5BR0VfQVBQX0lEIiwiTUFOQUdFX0FQUF9LRVkiLCJBRF9ESVJFQ1RPUllfSUQiLCJTVUJTUklQVElPTl9JRCIsIlJFU09VUlNFX0dST1VQIiwiU1RPUkFHRSIsImNyZWF0ZU9yVXBkYXRlU3ViIiwiRUdNQ2xpZW50IiwidG9waWNOYW1lIiwic2VydmljZU5hbWUiLCJzdWJOYW1lIiwiZW5kcG9pbnRVcmwiLCJldmVudFR5cGVzIiwiZGVidWciLCJzY29wZSIsInByb3BlcnRpZXMiLCJkZWFkTGV0dGVyRGVzdGluYXRpb24iLCJlbmRwb2ludFR5cGUiLCJibG9iQ29udGFpbmVyTmFtZSIsInJlc291cmNlSWQiLCJkZXN0aW5hdGlvbiIsImluY2x1ZGVkRXZlbnRUeXBlcyIsInJldHJ5UG9saWN5IiwiZXZlbnRUaW1lVG9MaXZlSW5NaW51dGVzIiwibWF4RGVsaXZlcnlBdHRlbXB0cyIsImV2ZW50RGVsaXZlcnlTY2hlbWEiLCJjb25zb2xlIiwid2FybiIsImV2ZW50U3Vic2NyaXB0aW9ucyIsImNyZWF0ZU9yVXBkYXRlIiwiY3JlYXRlRW5kcG9pbnRVcmwiLCJlbnZpcm9ubWVudCIsInBvc3RmaXgiLCJhcGlrZXkiLCJjcmVhdGVUb3BpY05hbWUiLCJjcmVhdGVTdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9ucyIsInN1YnNjcmlwdGlvbiIsImxvZyIsImNvbmZpZ19lbnZpcm9ubWVudCIsImNvbm5lY3RvciIsInV0aWxzX0tFWV9WQVVMVF9VUkwiLCJ1dGlsc19LRVlfVkFVTFRfV1JJVEVfQ0xJRU5UX0lEIiwidXRpbHNfS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVQiLCJsb2FkRW52RmlsZSIsImVudkZpbGUiLCJwYXJzZSIsImV4dGVybmFsX2ZzX2RlZmF1bHQiLCJyZWFkRmlsZVN5bmMiLCJ2b3JwYWwiLCJleHRlcm5hbF92b3JwYWxfZGVmYXVsdCIsImNvbW1hbmQiLCJvcHRpb24iLCJhY3Rpb24iLCJhcmdzIiwidGhpcyIsIkFQSUtleSIsIkFQSVNlY3JldCIsInVzZXIiLCJzcGFyZSIsIkFQSUtleUVuY3JLZXlOYW1lIiwiQVBJU2VjcmV0RW5jcktleU5hbWUiLCJBUElLZXlTZWNyZXROYW1lIiwiQVBJU2VjcmV0U2VjcmV0TmFtZSIsIm9wdGlvbnMiLCJpbmZvIiwiZW5jcnlwdGlvbktleU5hbWUiLCJ0b1N0cmluZyIsImV4dGVybmFsX3V1aWRfIiwia2V5cyIsIm1haW4iLCJFbnYiLCJjcmVkZW50aWFscyIsIm1zX3Jlc3Rfbm9kZWF1dGhfIiwiYXJtX2V2ZW50Z3JpZF8iLCJ1dGlsc19nZXRDbGllbnQiLCJhbGxFbmRwb2ludHMiLCJmb3JFYWNoIiwiU2V0IiwibWFwIiwiZW5kcG9pbnQiLCJlbmRwb2ludHMiLCJjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCIsInRvcGljU3Vic2NyaXB0aW9ucyIsInN1YiIsInZhcmlhYmxlcyIsImluY2x1ZGVzIiwid3JpdGVGaWxlU3luYyIsImdlbmVyYXRlRW52VmFyc0xpc3QiLCJlbnZTZXRSZXN1bHQiLCJQcm9taXNlIiwiYWxsIiwicmVwbGFjZSIsInNldFNlY3JldEVudlZhcnMiLCJkZWxpbWl0ZXIiLCJzaG93IiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Im1FQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUEwREEsT0FyREFGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlC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Q3pCbEIsSUFBaUJtRyxFQUNqQnpILFNBQXNCMEgsRUFDdEJuRyxVQUF1Qm9HLEVBQ3ZCbEYsWUFBQW9GLEVBQUF2SSxHQUFBc0YsR0FDQWxDLGVBRUErSCxFQUFBbkwsR0FBQXNGLEdBQUFsQyxRQU1FcUYsRUFBQWpILEVBQUV5SixjQUFBLG9CQUFBakksS0FBQUMsVUFBQWtJLElJaEVJSSxDQUFnQnZDLEVBQUFpQixPSDZCeEJ0QixFQUFBNkMsVUFBQSxRQUFBQyw2Q0l0Q0FqTixFQUFBRCxRQUFBbU4sUUFBQSxpRUNBQWxOLEVBQUFELFFBQUFtTixRQUFBLHNEQ0FBbE4sRUFBQUQsUUFBQW1OLFFBQUEsNkNDQUFsTixFQUFBRCxRQUFBbU4sUUFBQSwrQ0NBQWxOLEVBQUFELFFBQUFtTixRQUFBLGlDQ0FBbE4sRUFBQUQsUUFBQW1OLFFBQUEsMEJDQUFsTixFQUFBRCxRQUFBbU4sUUFBQSw4QkNBQWxOLEVBQUFELFFBQUFtTixRQUFBLGdDQ0FBbE4sRUFBQUQsUUFBQW1OLFFBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsImltcG9ydCBWRXJyb3IgZnJvbSBcInZlcnJvclwiO1xuaW1wb3J0IEtleVZhdWx0IGZyb20gXCJhenVyZS1rZXl2YXVsdFwiO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25Db250ZXh0IH0gZnJvbSBcImFkYWwtbm9kZVwiO1xuXG4vKipcbiAqINCa0LvQuNC10L3RgiDQuiDRgdC70YPQttCx0LUgQXp1cmUgS2V5VmF1bHRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/RgNC40LvQvtC20LXQvdC40Y9cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNyZXQg0L/QsNGA0L7Qu9GMINC/0YDQuNC70L7QttC10L3QuNGPXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBLZXlWYXVsdENsaWVudFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnQoY2xpZW50SWQsIHNlY3JldCkge1xuICB0cnkge1xuICAgIC8vIENhbGxiYWNrIGZvciBBREFMIGF1dGhlbnRpY2F0aW9uLlxuICAgIGNvbnN0IGFkYWxDYWxsYmFjayA9IChjaGFsbGVuZ2UsIGNhbGxiYWNrKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gbmV3IEF1dGhlbnRpY2F0aW9uQ29udGV4dChjaGFsbGVuZ2UuYXV0aG9yaXphdGlvbik7XG4gICAgICByZXR1cm4gY29udGV4dC5hY3F1aXJlVG9rZW5XaXRoQ2xpZW50Q3JlZGVudGlhbHMoXG4gICAgICAgIGNoYWxsZW5nZS5yZXNvdXJjZSxcbiAgICAgICAgY2xpZW50SWQsXG4gICAgICAgIHNlY3JldCxcbiAgICAgICAgKGVyciwgdG9rZW5SZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgS2V5VmF1bHRDcmVkZW50aWFscyBjYWxsYmFjayBleHBlY3RzIGFuIGVycm9yLCBpZiBhbnksIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIuXG4gICAgICAgICAgLy8gSXQgdGhlbiBleHBlY3RzIGEgdmFsdWUgZm9yIHRoZSBIVFRQICdBdXRob3JpemF0aW9uJyBoZWFkZXIsIHdoaWNoIHdlIGNvbXB1dGUgYmFzZWQgdXBvbiB0aGUgYWNjZXNzIHRva2VuIG9idGFpbmVkIHdpdGggdGhlIFNQIGNsaWVudCBjcmVkZW50aWFscy5cbiAgICAgICAgICAvLyBUaGUgdG9rZW4gdHlwZSB3aWxsIGdlbmVyYWxseSBlcXVhbCAnQmVhcmVyJyAtIGluIHNvbWUgdXNlci1zcGVjaWZpYyBzaXR1YXRpb25zLCBhIGRpZmZlcmVudCB0eXBlIG9mIHRva2VuIG1heSBiZSBpc3N1ZWQuXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGAke3Rva2VuUmVzcG9uc2UudG9rZW5UeXBlfSAke3Rva2VuUmVzcG9uc2UuYWNjZXNzVG9rZW59YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGtleVZhdWx0Q2xpZW50ID0gbmV3IEtleVZhdWx0LktleVZhdWx0Q2xpZW50KFxuICAgICAgbmV3IEtleVZhdWx0LktleVZhdWx0Q3JlZGVudGlhbHMoYWRhbENhbGxiYWNrKVxuICAgICk7XG5cbiAgICByZXR1cm4ga2V5VmF1bHRDbGllbnQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IFZFcnJvcihcbiAgICAgIHsgbmFtZTogXCJLZXlWYXVsdEVycm9yXCIsIGNhdXNlOiBlcnJvciB9LFxuICAgICAgXCJGYWlsZWQgdG8gY3JlYXRlIEtleVZhdWx0IGNsaWVudFwiXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRDbGllbnQ7XG4iLCJpbXBvcnQgVkVycm9yIGZyb20gXCJ2ZXJyb3JcIjtcbmltcG9ydCBLZXlWYXVsdCBmcm9tIFwiYXp1cmUta2V5dmF1bHRcIjtcbmltcG9ydCBnZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50XCI7XG5cbi8qKlxuICog0KHQvtC30LTQsNC90LjQtSDQvdC+0LLQvtCz0L4g0LrQu9GO0YfQsFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgQXp1cmUgS2V5IFZhdWx0IFVSSVxuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIEF6dXJlIEtleSBWYXVsdCBDbGllbnQgSWQgKFNlcnZpY2UgcHJpbmNpcGFsKVxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFNlY3JldCBBenVyZSBLZXkgVmF1bHQgQXBwbGljYXRpb24gU2VjcmV0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5TmFtZSDQuNC80Y9cbiAqIEByZXR1cm5zIHtzdHJpbmd9INCy0LXRgNGB0LjRj1xuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVLZXkoeyB1cmksIGNsaWVudElkLCBhcHBTZWNyZXQsIGtleU5hbWUgfSkge1xuICB0cnkge1xuICAgIGNvbnN0IGtleVZhdWx0Q2xpZW50ID0gZ2V0Q2xpZW50KGNsaWVudElkLCBhcHBTZWNyZXQpO1xuXG4gICAgY29uc3Qga2V5T3BlcmF0aW9ucyA9IFtcImVuY3J5cHRcIiwgXCJkZWNyeXB0XCJdO1xuICAgIGNvbnN0IGtleU9wdGlvbnMgPSB7XG4gICAgICBrZXlTaXplOiA0MDk2LFxuICAgICAga2V5T3BzOiBrZXlPcGVyYXRpb25zXG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGtleVZhdWx0Q2xpZW50LmNyZWF0ZUtleShcbiAgICAgIHVyaSxcbiAgICAgIGtleU5hbWUsXG4gICAgICBcIlJTQVwiLFxuICAgICAga2V5T3B0aW9uc1xuICAgICk7XG5cbiAgICBjb25zdCBrZXlJZCA9IEtleVZhdWx0LnBhcnNlS2V5SWRlbnRpZmllcihyZXN1bHQua2V5LmtpZCk7XG4gICAgcmV0dXJuIGtleUlkO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBWRXJyb3IoXG4gICAgICB7IG5hbWU6IFwiS2V5VmF1bHRFcnJvclwiLCBjYXVzZTogZXJyb3IgfSxcbiAgICAgIFwiRmFpbGVkIHRvIGNyZWF0ZSBuZXcga2V5XCJcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUtleTtcbiIsImltcG9ydCBWRXJyb3IgZnJvbSBcInZlcnJvclwiO1xuaW1wb3J0IGdldENsaWVudCBmcm9tIFwiLi9jbGllbnRcIjtcblxuLyoqXG4gKiDQqNC40YTRgNC+0LLQsNC90LjQtSDRgdC+0L7QsdGJ0LXQvdC40Y9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIEF6dXJlIEtleSBWYXVsdCBVUklcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBBenVyZSBLZXkgVmF1bHQgQ2xpZW50IElkIChTZXJ2aWNlIHByaW5jaXBhbClcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBTZWNyZXQgQXp1cmUgS2V5IFZhdWx0IEFwcGxpY2F0aW9uIFNlY3JldFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlINGB0L7QvtCx0YnQtdC90LjQtVxuICogQHBhcmFtIHtzdHJpbmd9IGtleU5hbWUg0LjQvNGPINC60LvRjtGH0LBcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlWZXJzaW9uINCy0LXRgNGB0LjRjyDQutC70Y7Rh9CwXG4gKiBAcmV0dXJucyB7anNvbn0g0LfQsNGI0LjRhNGA0L7QstCw0L3QvdC+0LUg0YHQvtC+0LHRidC10L3QuNC1XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVuY3J5cHQoe1xuICB1cmksXG4gIGNsaWVudElkLFxuICBhcHBTZWNyZXQsXG4gIHZhbHVlLFxuICBrZXlOYW1lLFxuICBrZXlWZXJzaW9uID0gXCJcIlxufSkge1xuICB0cnkge1xuICAgIGNvbnN0IGtleVZhdWx0Q2xpZW50ID0gZ2V0Q2xpZW50KGNsaWVudElkLCBhcHBTZWNyZXQpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQga2V5VmF1bHRDbGllbnQuZW5jcnlwdChcbiAgICAgIHVyaSxcbiAgICAgIGtleU5hbWUsXG4gICAgICBrZXlWZXJzaW9uLFxuICAgICAgXCJSU0EtT0FFUFwiLFxuICAgICAgQnVmZmVyLmZyb20odmFsdWUpXG4gICAgKTtcblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQucmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgVkVycm9yKFxuICAgICAgeyBuYW1lOiBcIktleVZhdWx0RXJyb3JcIiwgY2F1c2U6IGVycm9yIH0sXG4gICAgICBcIkZhaWxlZCB0byBlbmNyeXB0IHZhbHVlXCJcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVuY3J5cHQ7XG4iLCJpbXBvcnQgVkVycm9yIGZyb20gXCJ2ZXJyb3JcIjtcbmltcG9ydCBLZXlWYXVsdCBmcm9tIFwiYXp1cmUta2V5dmF1bHRcIjtcbmltcG9ydCBnZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50XCI7XG5cbi8qKlxuICog0KHQvtGF0YDQsNC90LXQvdC40LUg0YHQtdC60YDQtdGC0LAg0LIg0YXRgNCw0L3QuNC70LjRidC1XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBBenVyZSBLZXkgVmF1bHQgVVJJXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQgQXp1cmUgS2V5IFZhdWx0IENsaWVudCBJZCAoU2VydmljZSBwcmluY2lwYWwpXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwU2VjcmV0IEF6dXJlIEtleSBWYXVsdCBBcHBsaWNhdGlvbiBTZWNyZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNyZXRWYWx1ZSDQt9C90LDRh9C10L3QuNC1XG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjcmV0TmFtZSDQuNC80Y9cbiAqIEByZXR1cm5zIHtqc29ufSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRTZWNyZXQoe1xuICB1cmksXG4gIGNsaWVudElkLFxuICBhcHBTZWNyZXQsXG4gIHNlY3JldFZhbHVlLFxuICBzZWNyZXROYW1lXG59KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qga2V5VmF1bHRDbGllbnQgPSBnZXRDbGllbnQoY2xpZW50SWQsIGFwcFNlY3JldCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQga2V5VmF1bHRDbGllbnQuc2V0U2VjcmV0KHVyaSwgc2VjcmV0TmFtZSwgc2VjcmV0VmFsdWUpO1xuICAgIGNvbnN0IHNlY3JldElkID0gS2V5VmF1bHQucGFyc2VTZWNyZXRJZGVudGlmaWVyKHJlc3VsdC5pZCk7XG4gICAgcmV0dXJuIHNlY3JldElkO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBWRXJyb3IoXG4gICAgICB7IG5hbWU6IFwiS2V5VmF1bHRFcnJvclwiLCBjYXVzZTogZXJyb3IgfSxcbiAgICAgIFwiRmFpbGVkIHRvIHNldCBzZWNyZXRcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0U2VjcmV0O1xuIiwiaW1wb3J0IHsgY3JlYXRlS2V5LCBlbmNyeXB0LCBzZXRTZWNyZXQgfSBmcm9tIFwiY3B6L2tleVZhdWx0XCI7XG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnYtc2FmZVwiO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5jb25zdCB7XG4gIEtFWV9WQVVMVF9VUkwsXG4gIEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXG4gIEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVUXG59ID0gcHJvY2Vzcy5lbnY7XG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0QW5kU2F2ZShrZXlOYW1lLCBzZWNyZXROYW1lLCB2YWx1ZSkge1xuICBhd2FpdCBjcmVhdGVLZXkoe1xuICAgIHVyaTogS0VZX1ZBVUxUX1VSTCxcbiAgICBjbGllbnRJZDogS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCxcbiAgICBhcHBTZWNyZXQ6IEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVULFxuICAgIGtleU5hbWVcbiAgfSk7XG4gIGNvbnN0IGVuY3J5cHRlZERhdGEgPSBhd2FpdCBlbmNyeXB0KHtcbiAgICB1cmk6IEtFWV9WQVVMVF9VUkwsXG4gICAgY2xpZW50SWQ6IEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXG4gICAgYXBwU2VjcmV0OiBLRVlfVkFVTFRfV1JJVEVfQVBQX1NFQ1JFVCxcbiAgICB2YWx1ZSxcbiAgICBrZXlOYW1lXG4gIH0pO1xuICBjb25zdCBzZWNyZXQgPSBhd2FpdCBzZXRTZWNyZXQoe1xuICAgIHVyaTogS0VZX1ZBVUxUX1VSTCxcbiAgICBjbGllbnRJZDogS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCxcbiAgICBhcHBTZWNyZXQ6IEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVULFxuICAgIHNlY3JldFZhbHVlOiBlbmNyeXB0ZWREYXRhLFxuICAgIHNlY3JldE5hbWVcbiAgfSk7XG4gIHJldHVybiBzZWNyZXQudmVyc2lvbjtcbn1cblxuZXhwb3J0IHsgZW5jcnlwdEFuZFNhdmUgfTtcbiIsImNvbnN0IFRBU0tTX1RPUElDID0gXCJ0YXNrc1wiO1xuY29uc3QgQ0FORExFU19UT1BJQyA9IFwiY2FuZGxlc1wiO1xuY29uc3QgVElDS1NfVE9QSUMgPSBcInRpY2tzXCI7XG5jb25zdCBTSUdOQUxTX1RPUElDID0gXCJzaWduYWxzXCI7XG5jb25zdCBUUkFERVNfVE9QSUMgPSBcInRyYWRlc1wiO1xuY29uc3QgTE9HX1RPUElDID0gXCJsb2dcIjtcbmNvbnN0IEVSUk9SX1RPUElDID0gXCJlcnJvclwiO1xuZXhwb3J0IHtcbiAgVEFTS1NfVE9QSUMsXG4gIENBTkRMRVNfVE9QSUMsXG4gIFRJQ0tTX1RPUElDLFxuICBTSUdOQUxTX1RPUElDLFxuICBUUkFERVNfVE9QSUMsXG4gIExPR19UT1BJQyxcbiAgRVJST1JfVE9QSUNcbn07XG5cbmNvbnN0IHRvcGljcyA9IFtcbiAgVEFTS1NfVE9QSUMsXG4gIENBTkRMRVNfVE9QSUMsXG4gIFRJQ0tTX1RPUElDLFxuICBTSUdOQUxTX1RPUElDLFxuICBUUkFERVNfVE9QSUMsXG4gIExPR19UT1BJQyxcbiAgRVJST1JfVE9QSUNcbl07XG5leHBvcnQgZGVmYXVsdCB0b3BpY3M7XG4iLCJpbXBvcnQgYWR2aXNlciBmcm9tIFwiLi9hZHZpc2VyXCI7XG5pbXBvcnQgYmFja3Rlc3RlciBmcm9tIFwiLi9iYWNrdGVzdGVyXCI7XG5pbXBvcnQgY2FuZGxlYmF0Y2hlciBmcm9tIFwiLi9jYW5kbGViYXRjaGVyXCI7XG5pbXBvcnQgY29udHJvbCBmcm9tIFwiLi9jb250cm9sXCI7XG5pbXBvcnQgZXZlbnRzbG9nZ2VyIGZyb20gXCIuL2V2ZW50c2xvZ2dlclwiO1xuaW1wb3J0IGltcG9ydGVyIGZyb20gXCIuL2ltcG9ydGVyXCI7XG5pbXBvcnQgbWFya2V0d2F0Y2hlciBmcm9tIFwiLi9tYXJrZXR3YXRjaGVyXCI7XG5pbXBvcnQgdHJhZGVyIGZyb20gXCIuL3RyYWRlclwiO1xuXG5jb25zdCBlbmRwb2ludHMgPSB7XG4gIC4uLmFkdmlzZXIsXG4gIC4uLmJhY2t0ZXN0ZXIsXG4gIC4uLmNhbmRsZWJhdGNoZXIsXG4gIC4uLmNvbnRyb2wsXG4gIC4uLmV2ZW50c2xvZ2dlcixcbiAgLi4uaW1wb3J0ZXIsXG4gIC4uLm1hcmtldHdhdGNoZXIsXG4gIC4uLnRyYWRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGVuZHBvaW50cztcbiIsImltcG9ydCB7IEFEVklTRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9jb25maWcvc2VydmljZXNcIjtcbmltcG9ydCB7IFRBU0tTX1RPUElDLCBDQU5ETEVTX1RPUElDIH0gZnJvbSBcIi4uL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9SVU5fRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2FkdmlzZXJcIjtcbmltcG9ydCB7IENBTkRMRVNfTkVXQ0FORExFX0VWRU5UIH0gZnJvbSBcIi4uL3R5cGVzL2NhbmRsZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbQURWSVNFUl9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke0FEVklTRVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA0LFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9SVU5fRVZFTlRcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke0FEVklTRVJfU0VSVklDRX0tJHtDQU5ETEVTX1RPUElDfWAsXG4gICAgICB0b3BpYzogQ0FORExFU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2NhbmRsZUV2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA0LFxuICAgICAgdHlwZXM6IFtDQU5ETEVTX05FV0NBTkRMRV9FVkVOVF1cbiAgICB9XG4gIF1cbn07XG4iLCJjb25zdCBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5UID0gXCJDUFouVGFza3MuQWR2aXNlci5TdGFydFwiO1xuY29uc3QgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5UID0gXCJDUFouVGFza3MuQWR2aXNlci5TdG9wXCI7XG5jb25zdCBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCA9IFwiQ1BaLlRhc2tzLkFkdmlzZXIuVXBkYXRlXCI7XG5jb25zdCBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQgPSBcIkNQWi5UYXNrcy5BZHZpc2VyLlN0YXJ0ZWRcIjtcbmNvbnN0IFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkFkdmlzZXIuU3RvcHBlZFwiO1xuY29uc3QgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5UID0gXCJDUFouVGFza3MuQWR2aXNlci5VcGRhdGVkXCI7XG5jb25zdCBUQVNLU19BRFZJU0VSX1JVTl9FVkVOVCA9IFwiQ1BaLlRhc2tzLkFkdmlzZXIuUnVuXCI7XG5leHBvcnQge1xuICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1JVTl9FVkVOVFxufTtcbiIsImNvbnN0IENBTkRMRVNfTkVXQ0FORExFX0VWRU5UID0gXCJDUFouQ2FuZGxlcy5OZXdDYW5kbGVcIjtcbmNvbnN0IENBTkRMRVNfSEFORExFRF9FVkVOVCA9IFwiQ1BaLkNhbmRsZXMuSGFuZGxlZFwiO1xuZXhwb3J0IHsgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQsIENBTkRMRVNfSEFORExFRF9FVkVOVCB9O1xuIiwiaW1wb3J0IHsgQkFDS1RFU1RFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi4vdG9waWNzXCI7XG5pbXBvcnQge1xuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbQkFDS1RFU1RFUl9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke0JBQ0tURVNURVJfU0VSVklDRX0tJHtUQVNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRBU0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvdGFza0V2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA4LFxuICAgICAgdHlwZXM6IFtUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULCBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlRdXG4gICAgfVxuICBdXG59O1xuIiwiY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RhcnRcIjtcbmNvbnN0IFRBU0tTX0JBQ0tURVNURVJfU1RPUF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkJhY2t0ZXN0ZXIuU3RvcFwiO1xuY29uc3QgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5UID0gXCJDUFouVGFza3MuQmFja3Rlc3Rlci5TdGFydGVkXCI7XG5jb25zdCBUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQgPSBcIkNQWi5UYXNrcy5CYWNrdGVzdGVyLlN0b3BwZWRcIjtcbmNvbnN0IFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlQgPSBcIkNQWi5UYXNrcy5CYWNrdGVzdGVyLkZpbmlzaGVkXCI7XG5leHBvcnQge1xuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXG59O1xuIiwiaW1wb3J0IHsgQ0FORExFQkFUQ0hFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi4vdG9waWNzXCI7XG5pbXBvcnQge1xuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1JVTl9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvY2FuZGxlYmF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtDQU5ETEVCQVRDSEVSX1NFUlZJQ0VdOiBbXG4gICAge1xuICAgICAgbmFtZTogYCR7Q0FORExFQkFUQ0hFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDMsXG4gICAgICB0eXBlczogW1xuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQsXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1JVTl9FVkVOVFxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcbiIsImNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQgPSBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0YXJ0XCI7XG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQgPSBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlN0b3BcIjtcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5UID0gXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5VcGRhdGVcIjtcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkNhbmRsZWJhdGNoZXIuU3RhcnRlZFwiO1xuY29uc3QgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5UID0gXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5TdG9wcGVkXCI7XG5jb25zdCBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlQgPSBcIkNQWi5UYXNrcy5DYW5kbGViYXRjaGVyLlVwZGF0ZWRcIjtcbmNvbnN0IFRBU0tTX0NBTkRMRUJBVENIRVJfUlVOX0VWRU5UID0gXCJDUFouVGFza3MuQ2FuZGxlYmF0Y2hlci5SdW5cIjtcbmV4cG9ydCB7XG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfUlVOX0VWRU5UXG59O1xuIiwiaW1wb3J0IHsgQ09OVFJPTF9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMsIEVSUk9SX1RPUElDIH0gZnJvbSBcIi4uL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfQURWSVNFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvYWR2aXNlclwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2JhY2t0ZXN0ZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2NhbmRsZWJhdGNoZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0lNUE9SVEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9pbXBvcnRlclwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvbWFya2V0d2F0Y2hlclwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfVFJBREVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvdHJhZGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfRVhXQVRDSEVSX1NUT1BQRURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2V4d2F0Y2hlclwiO1xuaW1wb3J0IHtcbiAgRVJST1JfQURWSVNFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQkFDS1RFU1RFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQ0FORExFQkFUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfRVhXQVRDSEVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9JTVBPUlRFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfVFJBREVSX0VSUk9SX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy9lcnJvclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtDT05UUk9MX1NFUlZJQ0VdOiBbXG4gICAge1xuICAgICAgbmFtZTogYCR7Q09OVFJPTF9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS9zZXJ2aWNlRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDcsXG4gICAgICB0eXBlczogW1xuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9TVE9QUEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfRklOSVNIRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0VYV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19FWFdBVENIRVJfU1RPUFBFRF9FVkVOVFxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7Q09OVFJPTF9TRVJWSUNFfS0ke0VSUk9SX1RPUElDfWAsXG4gICAgICB0b3BpYzogRVJST1JfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS9zZXJ2aWNlRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDcsXG4gICAgICB0eXBlczogW1xuICAgICAgICBFUlJPUl9BRFZJU0VSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9CQUNLVEVTVEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9DQU5ETEVCQVRDSEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9FWFdBVENIRVJfRVJST1JfRVZFTlQsXG4gICAgICAgIEVSUk9SX0lNUE9SVEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9NQVJLRVRXQVRDSEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9UUkFERVJfRVJST1JfRVZFTlRcbiAgICAgIF1cbiAgICB9XG4gIF1cbn07XG4iLCJjb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5UID0gXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5TdGFydFwiO1xuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QX0VWRU5UID0gXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5TdG9wXCI7XG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVCA9IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuU3Vic2NyaWJlXCI7XG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5UID1cbiAgXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5VbnN1YnNjcmliZVwiO1xuY29uc3QgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5UID0gXCJDUFouVGFza3MuTWFya2V0d2F0Y2hlci5TdGFydGVkXCI7XG5jb25zdCBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BQRURfRVZFTlQgPSBcIkNQWi5UYXNrcy5NYXJrZXR3YXRjaGVyLlN0b3BwZWRcIjtcbmNvbnN0IFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLk1hcmtldHdhdGNoZXIuVXBkYXRlZFwiO1xuZXhwb3J0IHtcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVUJTQ1JJQkVfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVU5TVUJTQ1JJQkVfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfVVBEQVRFRF9FVkVOVFxufTtcbiIsImNvbnN0IFRBU0tTX0lNUE9SVEVSX1NUQVJUX0VWRU5UID0gXCJDUFouVGFza3MuSW1wb3J0ZXIuU3RhcnRcIjtcbmNvbnN0IFRBU0tTX0lNUE9SVEVSX1NUT1BfRVZFTlQgPSBcIkNQWi5UYXNrcy5JbXBvcnRlci5TdG9wXCI7XG5jb25zdCBUQVNLU19JTVBPUlRFUl9TVEFSVEVEX0VWRU5UID0gXCJDUFouVGFza3MuSW1wb3J0ZXIuU3RhcnRlZFwiO1xuY29uc3QgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkltcG9ydGVyLlN0b3BwcGVkXCI7XG5jb25zdCBUQVNLU19JTVBPUlRFUl9GSU5JU0hFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkltcG9ydGVyLkZpbmlzaGVkXCI7XG5leHBvcnQge1xuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfRklOSVNIRURfRVZFTlRcbn07XG4iLCJjb25zdCBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQgPSBcIkNQWi5UYXNrcy5UcmFkZXIuU3RhcnRcIjtcbmNvbnN0IFRBU0tTX1RSQURFUl9TVE9QX0VWRU5UID0gXCJDUFouVGFza3MuVHJhZGVyLlN0b3BcIjtcbmNvbnN0IFRBU0tTX1RSQURFUl9VUERBVEVfRVZFTlQgPSBcIkNQWi5UYXNrcy5UcmFkZXIuVXBkYXRlXCI7XG5jb25zdCBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLlRyYWRlci5TdGFydGVkXCI7XG5jb25zdCBUQVNLU19UUkFERVJfU1RPUFBFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLlRyYWRlci5TdG9wcGVkXCI7XG5jb25zdCBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLlRyYWRlci5VcGRhdGVkXCI7XG5jb25zdCBUQVNLU19UUkFERVJfUlVOX0VWRU5UID0gXCJDUFouVGFza3MuVHJhZGVyLlJ1blwiO1xuZXhwb3J0IHtcbiAgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19UUkFERVJfVVBEQVRFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1JVTl9FVkVOVFxufTtcbiIsImNvbnN0IEVYV0FUQ0hFUl9TVEFSVCA9IFwiRXh3YXRjaGVyLlN0YXJ0XCI7XG5jb25zdCBUQVNLU19FWFdBVENIRVJfU1RBUlRFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkV4d2F0Y2hlci5TdGFydGVkXCI7XG5jb25zdCBUQVNLU19FWFdBVENIRVJfU1RPUFBFRF9FVkVOVCA9IFwiQ1BaLlRhc2tzLkV4d2F0Y2hlci5TdG9wcGVkXCI7XG5leHBvcnQge1xuICBFWFdBVENIRVJfU1RBUlQsXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICBUQVNLU19FWFdBVENIRVJfU1RPUFBFRF9FVkVOVFxufTtcbiIsImNvbnN0IEVSUk9SX0FEVklTRVJfRVJST1JfRVZFTlQgPSBcIkNQWi5BZHZpc2VyLkVycm9yXCI7XG5jb25zdCBFUlJPUl9CQUNLVEVTVF9FUlJPUl9FVkVOVCA9IFwiQ1BaLkJhY2t0ZXN0LkVycm9yXCI7XG5jb25zdCBFUlJPUl9CQUNLVEVTVEVSX0VSUk9SX0VWRU5UID0gXCJDUFouQmFja3Rlc3Rlci5FcnJvclwiO1xuY29uc3QgRVJST1JfQ0FORExFQkFUQ0hFUl9FUlJPUl9FVkVOVCA9IFwiQ1BaLkNhbmRsZWJhdGNoZXIuRXJyb3JcIjtcbmNvbnN0IEVSUk9SX0NPTlRST0xfRVJST1JfRVZFTlQgPSBcIkNQWi5Db250cm9sLkVycm9yXCI7XG5jb25zdCBFUlJPUl9FWFdBVENIRVJfRVJST1JfRVZFTlQgPSBcIkNQWi5FeHdhdGNoZXIuRXJyb3JcIjtcbmNvbnN0IEVSUk9SX0lNUE9SVEVSX0VSUk9SX0VWRU5UID0gXCJDUFouSW1wb3J0ZXIuRXJyb3JcIjtcbmNvbnN0IEVSUk9SX01BUktFVFdBVENIRVJfRVJST1JfRVZFTlQgPSBcIkNQWi5NYXJrZXR3YXRjaGVyLkVycm9yXCI7XG5jb25zdCBFUlJPUl9UUkFERVJfRVJST1JfRVZFTlQgPSBcIkNQWi5UcmFkZXIuRXJyb3JcIjtcbmNvbnN0IEVSUk9SX1VTRVJST0JPVF9FUlJPUl9FVkVOVCA9IFwiQ1BaLlVzZXJSb2JvdC5FcnJvclwiO1xuXG5leHBvcnQge1xuICBFUlJPUl9BRFZJU0VSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVF9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQkFDS1RFU1RFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQ0FORExFQkFUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQ09OVFJPTF9FUlJPUl9FVkVOVCxcbiAgRVJST1JfRVhXQVRDSEVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9JTVBPUlRFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfVFJBREVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9VU0VSUk9CT1RfRVJST1JfRVZFTlRcbn07XG4iLCJpbXBvcnQgeyBFVkVOVFNfTE9HR0VSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vY29uZmlnL3NlcnZpY2VzXCI7XG5pbXBvcnQge1xuICBUQVNLU19UT1BJQyxcbiAgQ0FORExFU19UT1BJQyxcbiAgU0lHTkFMU19UT1BJQyxcbiAgVElDS1NfVE9QSUMsXG4gIFRSQURFU19UT1BJQyxcbiAgTE9HX1RPUElDLFxuICBFUlJPUl9UT1BJQ1xufSBmcm9tIFwiLi4vdG9waWNzXCI7XG5pbXBvcnQge1xuICBUQVNLU19BRFZJU0VSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19BRFZJU0VSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0FEVklTRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQURWSVNFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9hZHZpc2VyXCI7XG5pbXBvcnQge1xuICBUQVNLU19CQUNLVEVTVEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QUEVEX0VWRU5ULFxuICBUQVNLU19CQUNLVEVTVEVSX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0NBTkRMRUJBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfQ0FORExFQkFUQ0hFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9jYW5kbGViYXRjaGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfRklOSVNIRURfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL2ltcG9ydGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9tYXJrZXR3YXRjaGVyXCI7XG5pbXBvcnQge1xuICBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy90cmFkZXJcIjtcbmltcG9ydCB7XG4gIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX0ZJTklTSEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9iYWNrdGVzdFwiO1xuaW1wb3J0IHtcbiAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5UXG59IGZyb20gXCIuLi90eXBlcy90YXNrcy9leHdhdGNoZXJcIjtcbmltcG9ydCB7IFRBU0tTX1VTRVJST0JPVF9ISVNUX0VWRU5UIH0gZnJvbSBcIi4uL3R5cGVzL3Rhc2tzL3VzZXJSb2JvdFwiO1xuaW1wb3J0IHtcbiAgQ0FORExFU19ORVdDQU5ETEVfRVZFTlQsXG4gIENBTkRMRVNfSEFORExFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvY2FuZGxlc1wiO1xuaW1wb3J0IHtcbiAgU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQsXG4gIFNJR05BTFNfSEFORExFRF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvc2lnbmFsc1wiO1xuaW1wb3J0IHsgVElDS1NfTkVXVElDS19FVkVOVCwgVElDS1NfSEFORExFRF9FVkVOVCB9IGZyb20gXCIuLi90eXBlcy90aWNrc1wiO1xuaW1wb3J0IHsgVFJBREVTX1BPU0lUSU9OX0VWRU5ULCBUUkFERVNfT1JERVJfRVZFTlQgfSBmcm9tIFwiLi4vdHlwZXMvdHJhZGVzXCI7XG5pbXBvcnQge1xuICBMT0dfQURWSVNFUl9MT0dfRVZFTlQsXG4gIExPR19CQUNLVEVTVEVSX0xPR19FVkVOVCxcbiAgTE9HX0JBQ0tURVNUX0xPR19FVkVOVCxcbiAgTE9HX0NBTkRMRUJBVENIRVJfTE9HX0VWRU5ULFxuICBMT0dfQ09OVFJPTF9MT0dfRVZFTlQsXG4gIExPR19FWFdBVENIRVJfTE9HX0VWRU5ULFxuICBMT0dfSU1QT1JURVJfTE9HX0VWRU5ULFxuICBMT0dfTUFSS0VUV0FUQ0hFUl9MT0dfRVZFTlQsXG4gIExPR19UUkFERVJfTE9HX0VWRU5ULFxuICBMT0dfVVNFUlJPQk9UX0xPR19FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvbG9nXCI7XG5pbXBvcnQge1xuICBFUlJPUl9BRFZJU0VSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVEVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9CQUNLVEVTVF9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQ0FORExFQkFUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfQ09OVFJPTF9FUlJPUl9FVkVOVCxcbiAgRVJST1JfRVhXQVRDSEVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9JTVBPUlRFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgRVJST1JfVFJBREVSX0VSUk9SX0VWRU5ULFxuICBFUlJPUl9VU0VSUk9CT1RfRVJST1JfRVZFTlRcbn0gZnJvbSBcIi4uL3R5cGVzL2Vycm9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW0VWRU5UU19MT0dHRVJfU0VSVklDRV06IFtcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VEFTS1NfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBUQVNLU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2V2ZW50c1wiLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19BRFZJU0VSX1VQREFURV9FVkVOVCxcbiAgICAgICAgVEFTS1NfQURWSVNFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19BRFZJU0VSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0FEVklTRVJfVVBEQVRFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVEFSVF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19CQUNLVEVTVEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0JBQ0tURVNURVJfU1RPUFBFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQkFDS1RFU1RFUl9GSU5JU0hFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVF9FVkVOVCxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1VQREFURV9FVkVOVCxcbiAgICAgICAgVEFTS1NfQ0FORExFQkFUQ0hFUl9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19DQU5ETEVCQVRDSEVSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0NBTkRMRUJBVENIRVJfVVBEQVRFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfSU1QT1JURVJfU1RBUlRfRVZFTlQsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUT1BfRVZFTlQsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0lNUE9SVEVSX0ZJTklTSEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1RPUFBFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VUERBVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfU1RBUlRFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfVFJBREVSX1NUT1BQRURfRVZFTlQsXG4gICAgICAgIFRBU0tTX1RSQURFUl9VUERBVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19CQUNLVEVTVF9TVEFSVEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19CQUNLVEVTVF9GSU5JU0hFRF9FVkVOVCxcbiAgICAgICAgVEFTS1NfRVhXQVRDSEVSX1NUQVJURURfRVZFTlQsXG4gICAgICAgIFRBU0tTX0VYV0FUQ0hFUl9TVE9QUEVEX0VWRU5ULFxuICAgICAgICBUQVNLU19VU0VSUk9CT1RfSElTVF9FVkVOVFxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke0NBTkRMRVNfVE9QSUN9YCxcbiAgICAgIHRvcGljOiBDQU5ETEVTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW0NBTkRMRVNfTkVXQ0FORExFX0VWRU5ULCBDQU5ETEVTX0hBTkRMRURfRVZFTlRdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7U0lHTkFMU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFNJR05BTFNfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS9ldmVudHNcIixcbiAgICAgIHR5cGVzOiBbU0lHTkFMU19ORVdTSUdOQUxfRVZFTlQsIFNJR05BTFNfSEFORExFRF9FVkVOVF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke0VWRU5UU19MT0dHRVJfU0VSVklDRX0tJHtUSUNLU19UT1BJQ31gLFxuICAgICAgdG9waWM6IFRJQ0tTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1RJQ0tTX05FV1RJQ0tfRVZFTlQsIFRJQ0tTX0hBTkRMRURfRVZFTlRdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtFVkVOVFNfTE9HR0VSX1NFUlZJQ0V9LSR7VFJBREVTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVFJBREVTX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1RSQURFU19QT1NJVElPTl9FVkVOVCwgVFJBREVTX09SREVSX0VWRU5UXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogYCR7RVZFTlRTX0xPR0dFUl9TRVJWSUNFfS0ke0xPR19UT1BJQ31gLFxuICAgICAgdG9waWM6IExPR19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2V2ZW50c1wiLFxuICAgICAgdHlwZXM6IFtcbiAgICAgICAgTE9HX0FEVklTRVJfTE9HX0VWRU5ULFxuICAgICAgICBMT0dfQkFDS1RFU1RFUl9MT0dfRVZFTlQsXG4gICAgICAgIExPR19CQUNLVEVTVF9MT0dfRVZFTlQsXG4gICAgICAgIExPR19DQU5ETEVCQVRDSEVSX0xPR19FVkVOVCxcbiAgICAgICAgTE9HX0NPTlRST0xfTE9HX0VWRU5ULFxuICAgICAgICBMT0dfRVhXQVRDSEVSX0xPR19FVkVOVCxcbiAgICAgICAgTE9HX0lNUE9SVEVSX0xPR19FVkVOVCxcbiAgICAgICAgTE9HX01BUktFVFdBVENIRVJfTE9HX0VWRU5ULFxuICAgICAgICBMT0dfVFJBREVSX0xPR19FVkVOVCxcbiAgICAgICAgTE9HX1VTRVJST0JPVF9MT0dfRVZFTlRcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke0VWRU5UU19MT0dHRVJfU0VSVklDRX0tJHtFUlJPUl9UT1BJQ31gLFxuICAgICAgdG9waWM6IEVSUk9SX1RPUElDLFxuICAgICAgdXJsOiBcIi9hcGkvZXZlbnRzXCIsXG4gICAgICB0eXBlczogW1xuICAgICAgICBFUlJPUl9BRFZJU0VSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9CQUNLVEVTVEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9CQUNLVEVTVF9FUlJPUl9FVkVOVCxcbiAgICAgICAgRVJST1JfQ0FORExFQkFUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgICAgICAgRVJST1JfQ09OVFJPTF9FUlJPUl9FVkVOVCxcbiAgICAgICAgRVJST1JfRVhXQVRDSEVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9JTVBPUlRFUl9FUlJPUl9FVkVOVCxcbiAgICAgICAgRVJST1JfTUFSS0VUV0FUQ0hFUl9FUlJPUl9FVkVOVCxcbiAgICAgICAgRVJST1JfVFJBREVSX0VSUk9SX0VWRU5ULFxuICAgICAgICBFUlJPUl9VU0VSUk9CT1RfRVJST1JfRVZFTlRcbiAgICAgIF1cbiAgICB9XG4gIF1cbn07XG4iLCJjb25zdCBCQUNLVEVTVF9TVEFSVCA9IFwiQmFja3Rlc3QuU3RhcnRcIjtcbmNvbnN0IEJBQ0tURVNUX1NUT1AgPSBcIkJhY2t0ZXN0LlN0b3BcIjtcbmNvbnN0IFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQgPSBcIkNQWi5UYXNrcy5CYWNrdGVzdC5TdGFydGVkXCI7XG5jb25zdCBUQVNLU19CQUNLVEVTVF9TVE9QUEVEX0VWRU5UID0gXCJDUFouVGFza3MuQmFja3Rlc3QuU3RvcHBlZFwiO1xuY29uc3QgVEFTS1NfQkFDS1RFU1RfRklOSVNIRURfRVZFTlQgPSBcIkNQWi5UYXNrcy5CYWNrdGVzdC5GaW5pc2hlZFwiO1xuZXhwb3J0IHtcbiAgQkFDS1RFU1RfU1RBUlQsXG4gIEJBQ0tURVNUX1NUT1AsXG4gIFRBU0tTX0JBQ0tURVNUX1NUQVJURURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX1NUT1BQRURfRVZFTlQsXG4gIFRBU0tTX0JBQ0tURVNUX0ZJTklTSEVEX0VWRU5UXG59O1xuIiwiY29uc3QgVVNFUl9ST0JPVF9TVEFSVCA9IFwiVXNlclJvYm90LlN0YXJ0XCI7XG5jb25zdCBVU0VSX1JPQk9UX1NUT1AgPSBcIlVzZXJSb2JvdC5TdG9wXCI7XG5jb25zdCBVU0VSX1JPQk9UX1VQREFURSA9IFwiVXNlclJvYm90LlVwZGF0ZVwiO1xuY29uc3QgVEFTS1NfVVNFUlJPQk9UX0hJU1RfRVZFTlQgPSBcIkNQWi5UYXNrcy5Vc2VyUm9ib3QuSGlzdFwiO1xuZXhwb3J0IHtcbiAgVVNFUl9ST0JPVF9TVEFSVCxcbiAgVVNFUl9ST0JPVF9TVE9QLFxuICBVU0VSX1JPQk9UX1VQREFURSxcbiAgVEFTS1NfVVNFUlJPQk9UX0hJU1RfRVZFTlRcbn07XG4iLCJjb25zdCBTSUdOQUxTX05FV1NJR05BTF9FVkVOVCA9IFwiQ1BaLlNpZ25hbHMuTmV3U2lnbmFsXCI7XG5jb25zdCBTSUdOQUxTX0hBTkRMRURfRVZFTlQgPSBcIkNQWi5TaWduYWxzLkhhbmRsZWRcIjtcbmV4cG9ydCB7IFNJR05BTFNfTkVXU0lHTkFMX0VWRU5ULCBTSUdOQUxTX0hBTkRMRURfRVZFTlQgfTtcbiIsImNvbnN0IFRJQ0tTX05FV1RJQ0tfRVZFTlQgPSBcIkNQWi5UaWNrcy5OZXdUaWNrXCI7XG5jb25zdCBUSUNLU19IQU5ETEVEX0VWRU5UID0gXCJDUFouVGlja3MuSGFuZGxlZFwiO1xuZXhwb3J0IHsgVElDS1NfTkVXVElDS19FVkVOVCwgVElDS1NfSEFORExFRF9FVkVOVCB9O1xuIiwiY29uc3QgVFJBREVTX09SREVSX0VWRU5UID0gXCJDUFouVHJhZGVzLk9yZGVyXCI7XG5jb25zdCBUUkFERVNfUE9TSVRJT05fRVZFTlQgPSBcIkNQWi5UcmFkZXMuUG9zaXRpb25cIjtcbmV4cG9ydCB7IFRSQURFU19PUkRFUl9FVkVOVCwgVFJBREVTX1BPU0lUSU9OX0VWRU5UIH07XG4iLCJjb25zdCBMT0dfQURWSVNFUl9MT0dfRVZFTlQgPSBcIkNQWi5BZHZpc2VyLkxvZ1wiO1xuY29uc3QgTE9HX0JBQ0tURVNUX0xPR19FVkVOVCA9IFwiQ1BaLkJhY2t0ZXN0LkxvZ1wiO1xuY29uc3QgTE9HX0JBQ0tURVNURVJfTE9HX0VWRU5UID0gXCJDUFouQmFja3Rlc3Rlci5Mb2dcIjtcbmNvbnN0IExPR19DQU5ETEVCQVRDSEVSX0xPR19FVkVOVCA9IFwiQ1BaLkNhbmRsZWJhdGNoZXIuTG9nXCI7XG5jb25zdCBMT0dfQ09OVFJPTF9MT0dfRVZFTlQgPSBcIkNQWi5Db250cm9sLkxvZ1wiO1xuY29uc3QgTE9HX0VYV0FUQ0hFUl9MT0dfRVZFTlQgPSBcIkNQWi5FeHdhdGNoZXIuTG9nXCI7XG5jb25zdCBMT0dfSU1QT1JURVJfTE9HX0VWRU5UID0gXCJDUFouSW1wb3J0ZXIuTG9nXCI7XG5jb25zdCBMT0dfTUFSS0VUV0FUQ0hFUl9MT0dfRVZFTlQgPSBcIkNQWi5NYXJrZXR3YXRjaGVyLkxvZ1wiO1xuY29uc3QgTE9HX1RSQURFUl9MT0dfRVZFTlQgPSBcIkNQWi5UcmFkZXIuTG9nXCI7XG5jb25zdCBMT0dfVVNFUlJPQk9UX0xPR19FVkVOVCA9IFwiQ1BaLlVzZXJSb2JvdC5Mb2dcIjtcblxuZXhwb3J0IHtcbiAgTE9HX0FEVklTRVJfTE9HX0VWRU5ULFxuICBMT0dfQkFDS1RFU1RfTE9HX0VWRU5ULFxuICBMT0dfQkFDS1RFU1RFUl9MT0dfRVZFTlQsXG4gIExPR19DQU5ETEVCQVRDSEVSX0xPR19FVkVOVCxcbiAgTE9HX0NPTlRST0xfTE9HX0VWRU5ULFxuICBMT0dfRVhXQVRDSEVSX0xPR19FVkVOVCxcbiAgTE9HX0lNUE9SVEVSX0xPR19FVkVOVCxcbiAgTE9HX01BUktFVFdBVENIRVJfTE9HX0VWRU5ULFxuICBMT0dfVFJBREVSX0xPR19FVkVOVCxcbiAgTE9HX1VTRVJST0JPVF9MT0dfRVZFTlRcbn07XG4iLCJpbXBvcnQgeyBJTVBPUlRFUl9TRVJWSUNFIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgVEFTS1NfVE9QSUMgfSBmcm9tIFwiLi4vdG9waWNzXCI7XG5pbXBvcnQge1xuICBUQVNLU19JTVBPUlRFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfSU1QT1JURVJfU1RPUF9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvaW1wb3J0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBbSU1QT1JURVJfU0VSVklDRV06IFtcbiAgICB7XG4gICAgICBuYW1lOiBgJHtJTVBPUlRFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDUsXG4gICAgICB0eXBlczogW1RBU0tTX0lNUE9SVEVSX1NUQVJUX0VWRU5ULCBUQVNLU19JTVBPUlRFUl9TVE9QX0VWRU5UXVxuICAgIH1cbiAgXVxufTtcbiIsImltcG9ydCB7IE1BUktFVFdBVENIRVJfU0VSVklDRSB9IGZyb20gXCIuLi8uLi9jb25maWcvc2VydmljZXNcIjtcbmltcG9ydCB7IFRBU0tTX1RPUElDIH0gZnJvbSBcIi4uL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVEFSVF9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9TVE9QX0VWRU5ULFxuICBUQVNLU19NQVJLRVRXQVRDSEVSX1NVQlNDUklCRV9FVkVOVCxcbiAgVEFTS1NfTUFSS0VUV0FUQ0hFUl9VTlNVQlNDUklCRV9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvbWFya2V0d2F0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtNQVJLRVRXQVRDSEVSX1NFUlZJQ0VdOiBbXG4gICAge1xuICAgICAgbmFtZTogYCR7TUFSS0VUV0FUQ0hFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDIsXG4gICAgICB0eXBlczogW1xuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUQVJUX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1NUT1BfRVZFTlQsXG4gICAgICAgIFRBU0tTX01BUktFVFdBVENIRVJfU1VCU0NSSUJFX0VWRU5ULFxuICAgICAgICBUQVNLU19NQVJLRVRXQVRDSEVSX1VOU1VCU0NSSUJFX0VWRU5UXG4gICAgICBdXG4gICAgfVxuICBdXG59O1xuIiwiaW1wb3J0IHsgVFJBREVSX1NFUlZJQ0UgfSBmcm9tIFwiLi4vLi4vY29uZmlnL3NlcnZpY2VzXCI7XG5pbXBvcnQge1xuICBUQVNLU19UT1BJQyxcbiAgQ0FORExFU19UT1BJQyxcbiAgU0lHTkFMU19UT1BJQyxcbiAgVElDS1NfVE9QSUNcbn0gZnJvbSBcIi4uL3RvcGljc1wiO1xuaW1wb3J0IHtcbiAgVEFTS1NfVFJBREVSX1NUQVJUX0VWRU5ULFxuICBUQVNLU19UUkFERVJfU1RPUF9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1VQREFURV9FVkVOVCxcbiAgVEFTS1NfVFJBREVSX1JVTl9FVkVOVFxufSBmcm9tIFwiLi4vdHlwZXMvdGFza3MvdHJhZGVyXCI7XG5pbXBvcnQgeyBDQU5ETEVTX05FV0NBTkRMRV9FVkVOVCB9IGZyb20gXCIuLi90eXBlcy9jYW5kbGVzXCI7XG5pbXBvcnQgeyBUSUNLU19ORVdUSUNLX0VWRU5UIH0gZnJvbSBcIi4uL3R5cGVzL3RpY2tzXCI7XG5pbXBvcnQgeyBTSUdOQUxTX05FV1NJR05BTF9FVkVOVCB9IGZyb20gXCIuLi90eXBlcy9zaWduYWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW1RSQURFUl9TRVJWSUNFXTogW1xuICAgIHtcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke1RBU0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVEFTS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90YXNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXG4gICAgICB0eXBlczogW1xuICAgICAgICBUQVNLU19UUkFERVJfU1RBUlRfRVZFTlQsXG4gICAgICAgIFRBU0tTX1RSQURFUl9TVE9QX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfVVBEQVRFX0VWRU5ULFxuICAgICAgICBUQVNLU19UUkFERVJfUlVOX0VWRU5UXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtUUkFERVJfU0VSVklDRX0tJHtDQU5ETEVTX1RPUElDfWAsXG4gICAgICB0b3BpYzogQ0FORExFU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL2NhbmRsZUV2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA2LFxuICAgICAgdHlwZXM6IFtDQU5ETEVTX05FV0NBTkRMRV9FVkVOVF1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IGAke1RSQURFUl9TRVJWSUNFfS0ke1RJQ0tTX1RPUElDfWAsXG4gICAgICB0b3BpYzogVElDS1NfVE9QSUMsXG4gICAgICB1cmw6IFwiL2FwaS90aWNrRXZlbnRzXCIsXG4gICAgICBsb2NhbFBvcnQ6IDgxMDYsXG4gICAgICB0eXBlczogW1RJQ0tTX05FV1RJQ0tfRVZFTlRdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBgJHtUUkFERVJfU0VSVklDRX0tJHtTSUdOQUxTX1RPUElDfWAsXG4gICAgICB0b3BpYzogU0lHTkFMU19UT1BJQyxcbiAgICAgIHVybDogXCIvYXBpL3NpZ25hbEV2ZW50c1wiLFxuICAgICAgbG9jYWxQb3J0OiA4MTA2LFxuICAgICAgdHlwZXM6IFtTSUdOQUxTX05FV1NJR05BTF9FVkVOVF1cbiAgICB9XG4gIF1cbn07XG4iLCJpbXBvcnQgKiBhcyBtc1Jlc3RBenVyZSBmcm9tIFwiQGF6dXJlL21zLXJlc3Qtbm9kZWF1dGhcIjtcbmltcG9ydCB7IEV2ZW50R3JpZE1hbmFnZW1lbnRDbGllbnQgfSBmcm9tIFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIjtcbmltcG9ydCB7IGNoZWNrRW52VmFycyB9IGZyb20gXCJjcHovdXRpbHMvZW52aXJvbm1lbnRcIjtcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XG5pbXBvcnQgZXZlbnRFbmRwb2ludHMgZnJvbSBcImNwei9ldmVudHMvZW5kcG9pbnRzXCI7XG5pbXBvcnQgdG9waWNzIGZyb20gXCJjcHovZXZlbnRzL3RvcGljc1wiO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5jaGVja0VudlZhcnMoW1xuICBcIk1BTkFHRV9BUFBfSURcIixcbiAgXCJNQU5BR0VfQVBQX0tFWVwiLFxuICBcIkFEX0RJUkVDVE9SWV9JRFwiLFxuICBcIlNVQlNSSVBUSU9OX0lEXCIsXG4gIFwiUkVTT1VSU0VfR1JPVVBcIixcbiAgXCJTVE9SQUdFXCJcbl0pO1xuY29uc3Qge1xuICBNQU5BR0VfQVBQX0lELFxuICBNQU5BR0VfQVBQX0tFWSxcbiAgQURfRElSRUNUT1JZX0lELFxuICBTVUJTUklQVElPTl9JRCxcbiAgUkVTT1VSU0VfR1JPVVAsXG4gIFNUT1JBR0Vcbn0gPSBwcm9jZXNzLmVudjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2xpZW50KCkge1xuICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IG1zUmVzdEF6dXJlLmxvZ2luV2l0aFNlcnZpY2VQcmluY2lwYWxTZWNyZXQoXG4gICAgTUFOQUdFX0FQUF9JRCxcbiAgICBNQU5BR0VfQVBQX0tFWSxcbiAgICBBRF9ESVJFQ1RPUllfSURcbiAgKTtcblxuICBjb25zdCBFR01DbGllbnQgPSBuZXcgRXZlbnRHcmlkTWFuYWdlbWVudENsaWVudChjcmVkZW50aWFscywgU1VCU1JJUFRJT05fSUQpO1xuICByZXR1cm4gRUdNQ2xpZW50O1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZVN1YihcbiAgRUdNQ2xpZW50LFxuICB7IHRvcGljLCB0b3BpY05hbWUsIHNlcnZpY2VOYW1lLCBzdWJOYW1lLCBlbmRwb2ludFVybCwgZXZlbnRUeXBlcyB9LFxuICBkZWJ1ZyA9IGZhbHNlXG4pIHtcbiAgY29uc3Qgc2NvcGUgPSBgL3N1YnNjcmlwdGlvbnMvJHtTVUJTUklQVElPTl9JRH0vcmVzb3VyY2VHcm91cHMvJHtSRVNPVVJTRV9HUk9VUH0vcHJvdmlkZXJzL01pY3Jvc29mdC5FdmVudEdyaWQvdG9waWNzLyR7dG9waWNOYW1lfWA7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgZGVhZExldHRlckRlc3RpbmF0aW9uOiB7XG4gICAgICBlbmRwb2ludFR5cGU6IFwiU3RvcmFnZUJsb2JcIixcbiAgICAgIGJsb2JDb250YWluZXJOYW1lOiBgZWctJHt0b3BpY30tZGVhZGAsXG4gICAgICByZXNvdXJjZUlkOiBgL3N1YnNjcmlwdGlvbnMvJHtTVUJTUklQVElPTl9JRH0vcmVzb3VyY2VHcm91cHMvJHtSRVNPVVJTRV9HUk9VUH0vcHJvdmlkZXJzL21pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy8ke1NUT1JBR0V9YFxuICAgIH0sXG4gICAgZGVzdGluYXRpb246IHtcbiAgICAgIGVuZHBvaW50VHlwZTogXCJXZWJIb29rXCIsXG4gICAgICBlbmRwb2ludFVybFxuICAgIH0sXG4gICAgZmlsdGVyOiB7XG4gICAgICBpbmNsdWRlZEV2ZW50VHlwZXM6IGV2ZW50VHlwZXNcbiAgICB9LFxuICAgIHJldHJ5UG9saWN5OiB7XG4gICAgICBldmVudFRpbWVUb0xpdmVJbk1pbnV0ZXM6IDYwLFxuICAgICAgbWF4RGVsaXZlcnlBdHRlbXB0czogMTBcbiAgICB9LFxuICAgIGV2ZW50RGVsaXZlcnlTY2hlbWE6IFwiRXZlbnRHcmlkU2NoZW1hXCJcbiAgfTtcbiAgaWYgKGRlYnVnKSB7XG4gICAgY29uc29sZS53YXJuKHN1Yk5hbWUsIHNjb3BlLCBwcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBFR01DbGllbnQuZXZlbnRTdWJzY3JpcHRpb25zLmNyZWF0ZU9yVXBkYXRlKFxuICAgIHNjb3BlLFxuICAgIHN1Yk5hbWUsXG4gICAgcHJvcGVydGllc1xuICApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVTdWIoRUdNQ2xpZW50LCB0b3BpY05hbWUsIHN1Yk5hbWUpIHtcbiAgY29uc3Qgc2NvcGUgPSBgL3N1YnNjcmlwdGlvbnMvJHtTVUJTUklQVElPTl9JRH0vcmVzb3VyY2VHcm91cHMvJHtSRVNPVVJTRV9HUk9VUH0vcHJvdmlkZXJzL01pY3Jvc29mdC5FdmVudEdyaWQvdG9waWNzLyR7dG9waWNOYW1lfWA7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEVHTUNsaWVudC5ldmVudFN1YnNjcmlwdGlvbnMuZGVsZXRlTWV0aG9kKFxuICAgIHNjb3BlLFxuICAgIHN1Yk5hbWVcbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbGlzdFN1YnMoRUdNQ2xpZW50LCB0b3BpY05hbWUpIHtcbiAgY29uc3QgbGlzdCA9IGF3YWl0IEVHTUNsaWVudC5ldmVudFN1YnNjcmlwdGlvbnMubGlzdEJ5UmVzb3VyY2UoXG4gICAgUkVTT1VSU0VfR1JPVVAsXG4gICAgXCJNaWNyb3NvZnQuRXZlbnRHcmlkXCIsXG4gICAgXCJ0b3BpY3NcIixcbiAgICB0b3BpY05hbWVcbiAgKTtcbiAgY29uc3Qgc3VicyA9IFtdO1xuICBpZiAobGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICBsaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBzdWJzLnB1c2goe1xuICAgICAgICBuYW1lOiBlbGVtZW50Lm5hbWUsXG4gICAgICAgIHVybDogZWxlbWVudC5kZXN0aW5hdGlvbi5lbmRwb2ludEJhc2VVcmwsXG4gICAgICAgIGZpbHRlcjogZWxlbWVudC5maWx0ZXIsXG4gICAgICAgIHN0YXR1czogZWxlbWVudC5wcm92aXNpb25pbmdTdGF0ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN1YnM7XG59XG5cbi8qKlxuICogQ3JlYXRlIFN1YnNjcmlwdGlvbiBFbmRwb2ludCBVcmxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnZpcm9ubWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHBvc3RmaXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGlrZXlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGNyZWF0ZUVuZHBvaW50VXJsID0gKHNlcnZpY2VOYW1lLCBlbnZpcm9ubWVudCwgcG9zdGZpeCwgYXBpa2V5KSA9PlxuICBgaHR0cHM6Ly9jcHotJHtzZXJ2aWNlTmFtZX0tJHtlbnZpcm9ubWVudH0uYXp1cmV3ZWJzaXRlcy5uZXQke3Bvc3RmaXh9P2FwaS1rZXk9JHthcGlrZXl9YDtcblxuLyoqXG4gKiBDcmVhdGUgRXZlbnQgR3JpZCBUb3BpYyBOYW1lXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcGljTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGVudmlyb25tZW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCBjcmVhdGVUb3BpY05hbWUgPSAodG9waWNOYW1lLCBlbnZpcm9ubWVudCkgPT5cbiAgYGNwei0ke3RvcGljTmFtZX0tJHtlbnZpcm9ubWVudH1gO1xuXG4vKipcbiAqIENyZWF0ZSBTdWJzY3JpcHRpb25zIExpc3QgZnJvbSBnbG9iYWwgY29uZmlndXJhdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnZpcm9ubWVudFxuICogQHJldHVybnMge09iamVjdH1cbiAqXG4gKiBAZXhhbXBsZVxuICogeyBlcnJvcjogW3sgbmFtZTogJ2V2ZW50c2xvZ2dlci1lcnJvcicsXG4gKiAgICAgICAgICAgICB0b3BpYzogJ2Vycm9yJyxcbiAqICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vY3B6LWV2ZW50c2xvZ2dlci1wcm9kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ldmVudHMnLFxuICogICAgICAgICAgICAgdHlwZXM6IFtcIkNQWi5BZHZpc2VyLkVycm9yXCIsXCJDUFouQmFja3Rlc3Rlci5FcnJvclwiXSxcbiAqICAgICAgICAgICAgIHRvcGljTmFtZTogJ2Nwei1lcnJvci1wcm9kJyB9XX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uc0xpc3QoZW52aXJvbm1lbnQsIGFwaWtleSkge1xuICBsZXQgYWxsRW5kcG9pbnRzID0gW107XG4gIE9iamVjdC5rZXlzKGV2ZW50RW5kcG9pbnRzKVxuICAgIC5maWx0ZXIoa2V5ID0+IGtleSA9PT0gXCJhZHZpc2VyXCIpXG4gICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGFsbEVuZHBvaW50cyA9IFtcbiAgICAgICAgLi4ubmV3IFNldChbXG4gICAgICAgICAgLi4uZXZlbnRFbmRwb2ludHNba2V5XS5tYXAoZW5kcG9pbnQgPT4gKHtcbiAgICAgICAgICAgIC4uLmVuZHBvaW50LFxuICAgICAgICAgICAgdG9waWNOYW1lOiBjcmVhdGVUb3BpY05hbWUoZW5kcG9pbnQudG9waWMsIGVudmlyb25tZW50KSxcbiAgICAgICAgICAgIHVybDogY3JlYXRlRW5kcG9pbnRVcmwoa2V5LCBlbnZpcm9ubWVudCwgZW5kcG9pbnQudXJsLCBhcGlrZXkpLFxuICAgICAgICAgICAgc2VydmljZU5hbWU6IGtleVxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICAuLi5hbGxFbmRwb2ludHNcbiAgICAgICAgXSlcbiAgICAgIF07XG4gICAgfSk7XG5cbiAgY29uc3QgZW5kcG9pbnRzID0ge307XG4gIHRvcGljcy5mb3JFYWNoKHRvcGljID0+IHtcbiAgICBlbmRwb2ludHNbdG9waWNdID0gYWxsRW5kcG9pbnRzLmZpbHRlcihcbiAgICAgIGVuZHBvaW50ID0+IGVuZHBvaW50LnRvcGljID09PSB0b3BpY1xuICAgICk7XG4gIH0pO1xuICByZXR1cm4gZW5kcG9pbnRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb25zKGNsaWVudCwgc3Vic2NyaXB0aW9ucywgZGVidWcgPSBmYWxzZSkge1xuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1hd2FpdC1pbi1sb29wICovXG4gICAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2Ygc3Vic2NyaXB0aW9ucykge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBDcmVhdGluZyAke3N1YnNjcmlwdGlvbi50b3BpY05hbWV9IC0gJHtzdWJzY3JpcHRpb24ubmFtZX0gc3ViIHRvICR7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnVybFxuICAgICAgICB9YFxuICAgICAgKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY3JlYXRlT3JVcGRhdGVTdWIoXG4gICAgICAgICAgY2xpZW50LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRvcGljOiBzdWJzY3JpcHRpb24udG9waWMsXG4gICAgICAgICAgICB0b3BpY05hbWU6IHN1YnNjcmlwdGlvbi50b3BpY05hbWUsXG4gICAgICAgICAgICBzZXJ2aWNlTmFtZTogc3Vic2NyaXB0aW9uLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgc3ViTmFtZTogc3Vic2NyaXB0aW9uLm5hbWUsXG4gICAgICAgICAgICBlbmRwb2ludFVybDogc3Vic2NyaXB0aW9uLnVybCxcbiAgICAgICAgICAgIGV2ZW50VHlwZXM6IHN1YnNjcmlwdGlvbi50eXBlc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVidWdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc29sZS5sb2coc3Vic2NyaXB0aW9uLm5hbWUsIFwib2tcIik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgICovXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgZ2V0Q2xpZW50LFxuICBjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCxcbiAgY3JlYXRlU3Vic2NyaXB0aW9ucyxcbiAgZGVsZXRlU3ViLFxuICBsaXN0U3Vic1xufTtcbiIsIi8qKlxuICogQ2hlY2tzIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICpcbiAqIEBwYXJhbSB7W3N0cmluZ119IGxpc3RcbiAqL1xuZnVuY3Rpb24gY2hlY2tFbnZWYXJzKGxpc3QpIHtcbiAgaWYgKCFsaXN0IHx8ICFBcnJheS5pc0FycmF5KGxpc3QpIHx8IGxpc3QubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGNvbnN0IG1pc3NpbmdWYXJzID0gbGlzdC5maWx0ZXIodmFyaWFibGUgPT4gIXByb2Nlc3MuZW52W3ZhcmlhYmxlXSk7XG4gIGlmIChtaXNzaW5nVmFycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nVmFycy5qb2luKFwiLCBcIil9IHJlcXVpcmVkIWBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IGNoZWNrRW52VmFycyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgW1xuICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxuICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgXCJBWl9TVE9SQUdFX0NPTlRST0xfQ1NcIixcbiAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxuICBcIkFaX1NUT1JBR0VfRVZFTlRfQ1NcIixcbiAgXCJBWl9TVE9SQUdFX0JMT0JfTkFNRVwiLFxuICBcIkFaX1NUT1JBR0VfQkxPQl9LRVlcIixcbiAgXCJBUElfS0VZXCIsXG4gIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcbiAgXCJFR19UQVNLU19LRVlcIixcbiAgXCJFR19MT0dfRU5EUE9JTlRcIixcbiAgXCJFR19MT0dfS0VZXCIsXG4gIFwiRUdfRVJST1JfRU5EUE9JTlRcIixcbiAgXCJFR19FUlJPUl9LRVlcIixcbiAgXCJFR19TSUdOQUxTX0VORFBPSU5UXCIsXG4gIFwiRUdfU0lHTkFMU19LRVlcIixcbiAgXCJFR19DQU5ETEVTX0VORFBPSU5UXCIsXG4gIFwiRUdfQ0FORExFU19LRVlcIixcbiAgXCJERUJVR1wiXG5dO1xuIiwiaW1wb3J0IGFkdmlzZXIgZnJvbSBcIi4vYWR2aXNlclwiO1xuaW1wb3J0IGJhY2t0ZXN0ZXIgZnJvbSBcIi4vYmFja3Rlc3RlclwiO1xuaW1wb3J0IGNhbmRsZWJhdGNoZXIgZnJvbSBcIi4vY2FuZGxlYmF0Y2hlclwiO1xuaW1wb3J0IGNvbm5lY3RvciBmcm9tIFwiLi9jb25uZWN0b3JcIjtcbmltcG9ydCBjb250cm9sIGZyb20gXCIuL2NvbnRyb2xcIjtcbmltcG9ydCBldmVudHNsb2dnZXIgZnJvbSBcIi4vZXZlbnRzbG9nZ2VyXCI7XG5pbXBvcnQgaW1wb3J0ZXIgZnJvbSBcIi4vaW1wb3J0ZXJcIjtcbmltcG9ydCBtYXJrZXR3YXRjaGVyIGZyb20gXCIuL21hcmtldHdhdGNoZXJcIjtcbmltcG9ydCB0cmFkZXIgZnJvbSBcIi4vdHJhZGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWR2aXNlcixcbiAgYmFja3Rlc3RlcixcbiAgY2FuZGxlYmF0Y2hlcixcbiAgY29ubmVjdG9yLFxuICBjb250cm9sLFxuICBldmVudHNsb2dnZXIsXG4gIGltcG9ydGVyLFxuICBtYXJrZXR3YXRjaGVyLFxuICB0cmFkZXJcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBbXG4gIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxuICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gIFwiQVpfU1RPUkFHRV9UUkFERV9DU1wiLFxuICBcIkFaX1NUT1JBR0VfQkFDS1RFU1RFUl9DU1wiLFxuICBcIkFQSV9LRVlcIixcbiAgXCJFR19UQVNLU19FTkRQT0lOVFwiLFxuICBcIkVHX1RBU0tTX0tFWVwiLFxuICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICBcIkVHX0xPR19LRVlcIixcbiAgXCJEQl9BUElfRU5EUE9JTlRcIixcbiAgXCJEQl9BUElfQUNDRVNTX0tFWVwiLFxuICBcIkRFQlVHXCJcbl07XG4iLCJleHBvcnQgZGVmYXVsdCBbXG4gIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXG4gIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxuICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gIFwiQVpfU1RPUkFHRV9DT05UUk9MX0NTXCIsXG4gIFwiQVpfU1RPUkFHRV9FVkVOVF9DU1wiLFxuICBcIkFQSV9LRVlcIixcbiAgXCJFR19UQVNLU19FTkRQT0lOVFwiLFxuICBcIkVHX1RBU0tTX0tFWVwiLFxuICBcIkVHX0xPR19FTkRQT0lOVFwiLFxuICBcIkVHX0xPR19LRVlcIixcbiAgXCJFR19FUlJPUl9FTkRQT0lOVFwiLFxuICBcIkVHX0VSUk9SX0tFWVwiLFxuICBcIkVHX0NBTkRMRVNfRU5EUE9JTlRcIixcbiAgXCJFR19DQU5ETEVTX0tFWVwiLFxuICBcIkRCX0FQSV9FTkRQT0lOVFwiLFxuICBcIkRCX0FQSV9BQ0NFU1NfS0VZXCIsXG4gIFwiQ09OTkVDVE9SX0FQSV9FTkRQT0lOVFwiLFxuICBcIkNPTk5FQ1RPUl9BUElfS0VZXCJcbl07XG4iLCJleHBvcnQgZGVmYXVsdCBbXG4gIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCIsXG4gIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiLFxuICBcIkFQSV9LRVlcIixcbiAgXCJQUk9YWV9FTkRQT0lOVFwiLFxuICBcIktFWV9WQVVMVF9VUkxcIixcbiAgXCJLRVlfVkFVTFRfUkVBRF9DTElFTlRfSURcIixcbiAgXCJLRVlfVkFVTFRfUkVBRF9BUFBfU0VDUkVUXCIsXG4gIFwiS0VZX1ZBVUxUX0RFQ1JfQ0xJRU5UX0lEXCIsXG4gIFwiS0VZX1ZBVUxUX0RFQ1JfQVBQX1NFQ1JFVFwiXG5dO1xuIiwiZXhwb3J0IGRlZmF1bHQgW1xuICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiLFxuICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgXCJBWl9TVE9SQUdFX0NPTlRST0xfQ1NcIixcbiAgXCJBWl9TVE9SQUdFX0JBQ0tURVNURVJfQ1NcIixcbiAgXCJBWl9TVE9SQUdFX0VWRU5UX0NTXCIsXG4gIFwiQVBJX0tFWVwiLFxuICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gIFwiRUdfVEFTS1NfS0VZXCIsXG4gIFwiRUdfTE9HX0VORFBPSU5UXCIsXG4gIFwiRUdfTE9HX0tFWVwiLFxuICBcIkVHX0VSUk9SX0VORFBPSU5UXCIsXG4gIFwiRUdfRVJST1JfS0VZXCIsXG4gIFwiREJfQVBJX0VORFBPSU5UXCIsXG4gIFwiREJfQVBJX0FDQ0VTU19LRVlcIlxuXTtcbiIsImV4cG9ydCBkZWZhdWx0IFtcbiAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcbiAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gIFwiQVpfU1RPUkFHRV9FVkVOVF9DU1wiLFxuICBcIkFaX1NUT1JBR0VfTUFSS0VUX0NTXCIsXG4gIFwiRUdfRU1VTEFUT1JfTU9ERVwiLFxuICBcIkxPR19UQUJMRV9TVE9SQUdFXCIsXG4gIFwiTE9HX1BPU1RHUkVcIixcbiAgXCJEQl9BUElfRU5EUE9JTlRcIixcbiAgXCJEQl9BUElfQUNDRVNTX0tFWVwiLFxuICBcIkFQSV9LRVlcIlxuXTtcbiIsImV4cG9ydCBkZWZhdWx0IFtcbiAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcbiAgXCJBUElfS0VZXCIsXG4gIFwiRUdfVEFTS1NfRU5EUE9JTlRcIixcbiAgXCJFR19UQVNLU19LRVlcIixcbiAgXCJFR19MT0dfRU5EUE9JTlRcIixcbiAgXCJFR19MT0dfS0VZXCIsXG4gIFwiREJfQVBJX0VORFBPSU5UXCIsXG4gIFwiREJfQVBJX0FDQ0VTU19LRVlcIixcbiAgXCJDT05ORUNUT1JfQVBJX0VORFBPSU5UXCIsXG4gIFwiQ09OTkVDVE9SX0FQSV9LRVlcIixcbiAgXCJERUJVR1wiXG5dO1xuIiwiZXhwb3J0IGRlZmF1bHQgW1xuICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIixcbiAgXCJBWl9TVE9SQUdFX01BUktFVF9DU1wiLFxuICBcIkFQSV9LRVlcIixcbiAgXCJQUk9YWV9FTkRQT0lOVFwiLFxuICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gIFwiRUdfVEFTS1NfS0VZXCIsXG4gIFwiRUdfTE9HX0VORFBPSU5UXCIsXG4gIFwiRUdfTE9HX0tFWVwiLFxuICBcIkVHX1RJQ0tTX0VORFBPSU5UXCIsXG4gIFwiRUdfVElDS1NfS0VZXCIsXG4gIFwiREVCVUdcIlxuXTtcbiIsImV4cG9ydCBkZWZhdWx0IFtcbiAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIixcbiAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCIsXG4gIFwiQVpfU1RPUkFHRV9DT05UUk9MX0NTXCIsXG4gIFwiQVpfU1RPUkFHRV9NQVJLRVRfQ1NcIixcbiAgXCJBWl9TVE9SQUdFX0VWRU5UX0NTXCIsXG4gIFwiQVBJX0tFWVwiLFxuICBcIkVHX1RBU0tTX0VORFBPSU5UXCIsXG4gIFwiRUdfVEFTS1NfS0VZXCIsXG4gIFwiRUdfTE9HX0VORFBPSU5UXCIsXG4gIFwiRUdfTE9HX0tFWVwiLFxuICBcIkVHX0VSUk9SX0VORFBPSU5UXCIsXG4gIFwiRUdfRVJST1JfS0VZXCIsXG4gIFwiRUdfVFJBREVTX0VORFBPSU5UXCIsXG4gIFwiRUdfVFJBREVTX0tFWVwiLFxuICBcIkVHX1NJR05BTFNfRU5EUE9JTlRcIixcbiAgXCJFR19TSUdOQUxTX0tFWVwiLFxuICBcIkNPTk5FQ1RPUl9BUElfRU5EUE9JTlRcIixcbiAgXCJDT05ORUNUT1JfQVBJX0tFWVwiXG5dO1xuIiwiaW1wb3J0IGVudlZhcnMgZnJvbSBcImNwei9jb25maWcvZW52aXJvbm1lbnRcIjtcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudi1zYWZlXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBzZXRTZWNyZXQgfSBmcm9tIFwiY3B6L2tleVZhdWx0XCI7XG5cbmRvdGVudi5jb25maWcoKTtcbmNvbnN0IHtcbiAgS0VZX1ZBVUxUX1VSTCxcbiAgS0VZX1ZBVUxUX1dSSVRFX0NMSUVOVF9JRCxcbiAgS0VZX1ZBVUxUX1dSSVRFX0FQUF9TRUNSRVRcbn0gPSBwcm9jZXNzLmVudjtcblxuZnVuY3Rpb24gbG9hZEVudkZpbGUoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW52RmlsZSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKFwiZW52bGlzdC5qc29uXCIpKTtcbiAgICBjb25zb2xlLmxvZyhcIkZvdW5kIGVudmxpc3QuanNvblwiKTtcbiAgICByZXR1cm4gZW52RmlsZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZyhcIk5vIGN1cnJlbnQgZW52IGxpc3QgZmlsZVwiKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbmZ1bmN0aW9uIGdlbmVyYXRlRW52VmFyc0xpc3QoKSB7XG4gIGxldCBlbnZGaWxlID0gbG9hZEVudkZpbGUoKTtcblxuICBpZiAoIWVudkZpbGUpIGVudkZpbGUgPSB7fTtcblxuICBPYmplY3Qua2V5cyhlbnZWYXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKCFlbnZGaWxlW2tleV0pIGVudkZpbGVba2V5XSA9IHt9O1xuICAgIGVudlZhcnNba2V5XS52YXJpYWJsZXMuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XG4gICAgICBpZiAoIWVudkZpbGVba2V5XVt2YXJpYWJsZV0pIGVudkZpbGVba2V5XVt2YXJpYWJsZV0gPSBcIlwiO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlZHVuZGFudFZhcnMgPSBPYmplY3Qua2V5cyhlbnZGaWxlW2tleV0pLmZpbHRlcihcbiAgICAgIHZhcmlhYmxlID0+ICFlbnZWYXJzW2tleV0udmFyaWFibGVzLmluY2x1ZGVzKHZhcmlhYmxlKVxuICAgICk7XG4gICAgcmVkdW5kYW50VmFycy5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgIGRlbGV0ZSBlbnZGaWxlW2tleV1bdmFyaWFibGVdO1xuICAgIH0pO1xuICB9KTtcblxuICBmcy53cml0ZUZpbGVTeW5jKFwiZW52bGlzdC5qc29uXCIsIEpTT04uc3RyaW5naWZ5KGVudkZpbGUpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0U2VjcmV0RW52VmFycyhlbnZpcm9ubWVudCkge1xuICBjb25zdCBlbnZGaWxlID0gbG9hZEVudkZpbGUoKTtcbiAgaWYgKCFlbnZGaWxlKSB7XG4gICAgY29uc29sZS5sb2coXCJDcmVhdGUgZW52bGlzdC5qc29uIGZpcnN0XCIsIFwiZW52IGNyZWF0ZSBsaXN0XCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBlbnZTZXRSZXN1bHQgPSB7IC4uLmVudkZpbGUgfTtcbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgT2JqZWN0LmtleXMoZW52RmlsZSkubWFwKGFzeW5jIGtleSA9PiB7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgT2JqZWN0LmtleXMoZW52RmlsZVtrZXldKS5tYXAoYXN5bmMgdmFyaWFibGUgPT4ge1xuICAgICAgICAgIGNvbnN0IHNlY3JldE5hbWUgPSBgJHtrZXl9LSR7dmFyaWFibGV9LSR7ZW52aXJvbm1lbnR9YC5yZXBsYWNlKFxuICAgICAgICAgICAgL18vZyxcbiAgICAgICAgICAgIFwiLVwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhzZWNyZXROYW1lKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlbnZGaWxlW2tleV1bdmFyaWFibGVdKTtcbiAgICAgICAgICBhd2FpdCBzZXRTZWNyZXQoe1xuICAgICAgICAgICAgdXJpOiBLRVlfVkFVTFRfVVJMLFxuICAgICAgICAgICAgY2xpZW50SWQ6IEtFWV9WQVVMVF9XUklURV9DTElFTlRfSUQsXG4gICAgICAgICAgICBhcHBTZWNyZXQ6IEtFWV9WQVVMVF9XUklURV9BUFBfU0VDUkVULFxuICAgICAgICAgICAgc2VjcmV0VmFsdWU6IGVudkZpbGVba2V5XVt2YXJpYWJsZV0sXG4gICAgICAgICAgICBzZWNyZXROYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZW52U2V0UmVzdWx0W2tleV1bdmFyaWFibGVdID0gc2VjcmV0TmFtZTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcblxuICBmcy53cml0ZUZpbGVTeW5jKFwiZW52c2V0cmVzdWx0Lmpzb25cIiwgSlNPTi5zdHJpbmdpZnkoZW52U2V0UmVzdWx0KSk7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlRW52VmFyc0xpc3QsIHNldFNlY3JldEVudlZhcnMgfTtcbiIsImltcG9ydCBWb3JwYWwgZnJvbSBcInZvcnBhbFwiO1xuXG5pbXBvcnQgeyBzYXZlQVBJS2V5cyB9IGZyb20gXCIuL2tleVZhdWx0XCI7XG5pbXBvcnQgeyBjcmVhdGVTdWJzIH0gZnJvbSBcIi4vZXZlbnRHcmlkXCI7XG5pbXBvcnQgeyBjcmVhdGVFbnZMaXN0LCB1cGRhdGVFbnZWYXJzIH0gZnJvbSBcIi4vZW52dmFyc1wiO1xuXG5jb25zdCB2b3JwYWwgPSBuZXcgVm9ycGFsKCk7XG52b3JwYWxcbiAgLmNvbW1hbmQoXG4gICAgXCJrdiBzYXZlIGFwaS1rZXlzIDxBUElLZXk+IDxBUElTZWNyZXQ+XCIsXG4gICAgXCJFbmNyeXB0IGFuZCBzYXZlIEV4Y2hhbmdlIEFQSSBLZXlzIHRvIEtleSBWYXVsdC5cIlxuICApXG4gIC5vcHRpb24oXCItdSwgLS11c2VyIDx1c2VySWQ+XCIsIFwiVXNlIHVzZXJJZCBhcyBuYW1lXCIpXG4gIC5vcHRpb24oXCItcywgLS1zcGFyZVwiLCBcIlNhdmUgc3BhcmUga2V5cy5cIilcbiAgLm9wdGlvbihcbiAgICBcIi0tQVBJS2V5RW5jcktleU5hbWUgPEFQSUtleUVuY3JLZXlOYW1lPlwiLFxuICAgIFwiRW5jcnlwdGlvbiBrZXkgbmFtZSBmb3IgQVBJIEtleS5cIlxuICApXG4gIC5vcHRpb24oXG4gICAgXCItLUFQSVNlY3JldEVuY3JLZXlOYW1lIDxBUElTZWNyZXRFbmNyS2V5TmFtZT5cIixcbiAgICBcIkVuY3J5cHRpb24ga2V5IG5hbWUgZm9yIEFQSSBTZWNyZXQuXCJcbiAgKVxuICAub3B0aW9uKFxuICAgIFwiLS1BUElLZXlTZWNyZXROYW1lIDxBUElLZXlTZWNyZXROYW1lPlwiLFxuICAgIFwiTmFtZSBvZiBzZWNyZXQgZm9yIEFQSSBLZXkuXCJcbiAgKVxuICAub3B0aW9uKFxuICAgIFwiLS1BUElTZWNyZXRTZWNyZXROYW1lIDxBUElTZWNyZXRTZWNyZXROYW1lPlwiLFxuICAgIFwiTmFtZSBvZiBzZWNyZXQgZm9yIEFQSSBTZWNyZXQuXCJcbiAgKVxuICAuYWN0aW9uKHNhdmVBUElLZXlzKTtcblxudm9ycGFsXG4gIC5jb21tYW5kKFwiZWcgY3JlYXRlIHN1YnMgPEVudj4gPEFQSUtleT5cIilcbiAgLm9wdGlvbihcIi1kLCAtLWRlYnVnXCIsIFwiRGVidWcgbW9kZS5cIilcbiAgLmFjdGlvbihjcmVhdGVTdWJzKTtcbnZvcnBhbC5jb21tYW5kKFwiZW52IGNyZWF0ZSBsaXN0XCIpLmFjdGlvbihjcmVhdGVFbnZMaXN0KTtcbnZvcnBhbC5jb21tYW5kKFwiZW52IHVwZGF0ZSA8RW52PlwiKS5hY3Rpb24odXBkYXRlRW52VmFycyk7XG52b3JwYWwuZGVsaW1pdGVyKFwiY3B6JFwiKS5zaG93KCk7XG4iLCJpbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGVuY3J5cHRBbmRTYXZlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUFQSUtleXMoYXJncykge1xuICB0aGlzLmxvZyhhcmdzKTtcbiAgY29uc3QgeyBBUElLZXksIEFQSVNlY3JldCB9ID0gYXJncztcbiAgY29uc3Qge1xuICAgIHVzZXIsXG4gICAgc3BhcmUsXG4gICAgQVBJS2V5RW5jcktleU5hbWUsXG4gICAgQVBJU2VjcmV0RW5jcktleU5hbWUsXG4gICAgQVBJS2V5U2VjcmV0TmFtZSxcbiAgICBBUElTZWNyZXRTZWNyZXROYW1lXG4gIH0gPSBhcmdzLm9wdGlvbnM7XG5cbiAgY29uc3QgaW5mbyA9IHtcbiAgICBBUElLZXk6IHt9LFxuICAgIEFQSVNlY3JldDoge31cbiAgfTtcbiAgaWYgKHVzZXIpIHtcbiAgICBpbmZvLkFQSUtleS5lbmNyeXB0aW9uS2V5TmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcbiAgICBpbmZvLkFQSVNlY3JldC5lbmNyeXB0aW9uS2V5TmFtZSA9IHVzZXIudG9TdHJpbmcoKTtcbiAgICBpbmZvLkFQSUtleS5uYW1lID0gdXNlci50b1N0cmluZygpO1xuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUgPSB1c2VyLnRvU3RyaW5nKCk7XG4gIH1cbiAgaW5mby5BUElLZXkuZW5jcnlwdGlvbktleU5hbWUgPVxuICAgIEFQSUtleUVuY3JLZXlOYW1lIHx8IGluZm8uQVBJS2V5LmVuY3J5cHRpb25LZXlOYW1lIHx8IHV1aWQoKTtcbiAgaW5mby5BUElTZWNyZXQuZW5jcnlwdGlvbktleU5hbWUgPVxuICAgIEFQSVNlY3JldEVuY3JLZXlOYW1lIHx8IGluZm8uQVBJU2VjcmV0LmVuY3J5cHRpb25LZXlOYW1lIHx8IHV1aWQoKTtcbiAgaW5mby5BUElLZXkubmFtZSA9IEFQSUtleVNlY3JldE5hbWUgfHwgaW5mby5BUElLZXkubmFtZSB8fCB1dWlkKCk7XG4gIGluZm8uQVBJU2VjcmV0Lm5hbWUgPSBBUElTZWNyZXRTZWNyZXROYW1lIHx8IGluZm8uQVBJU2VjcmV0Lm5hbWUgfHwgdXVpZCgpO1xuICBpbmZvLkFQSUtleS52ZXJzaW9uID0gYXdhaXQgZW5jcnlwdEFuZFNhdmUoXG4gICAgaW5mby5BUElLZXkuZW5jcnlwdGlvbktleU5hbWUsXG4gICAgaW5mby5BUElLZXkubmFtZSxcbiAgICBBUElLZXlcbiAgKTtcbiAgaW5mby5BUElTZWNyZXQudmVyc2lvbiA9IGF3YWl0IGVuY3J5cHRBbmRTYXZlKFxuICAgIGluZm8uQVBJU2VjcmV0LmVuY3J5cHRpb25LZXlOYW1lLFxuICAgIGluZm8uQVBJU2VjcmV0Lm5hbWUsXG4gICAgQVBJU2VjcmV0XG4gICk7XG5cbiAgY29uc3Qga2V5cyA9IHt9O1xuICBpZiAoc3BhcmUpIHtcbiAgICBrZXlzLnNwYXJlID0gaW5mbztcbiAgfSBlbHNlIHtcbiAgICBrZXlzLm1haW4gPSBpbmZvO1xuICB9XG5cbiAgdGhpcy5sb2coSlNPTi5zdHJpbmdpZnkoa2V5cykpO1xufVxuXG5leHBvcnQgeyBzYXZlQVBJS2V5cyB9O1xuIiwiaW1wb3J0IHtcbiAgZ2V0Q2xpZW50LFxuICBjcmVhdGVTdWJzY3JpcHRpb25zTGlzdCxcbiAgY3JlYXRlU3Vic2NyaXB0aW9uc1xufSBmcm9tIFwiLi91dGlsc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTdWJzKGFyZ3MpIHtcbiAgdGhpcy5sb2coXCJjcmVhdGVTdWJzXCIsIGFyZ3MpO1xuICB0aGlzLmxvZyhcIkNyZWF0aW5nIEV2ZW50IEdyaWQgc3Vic2NyaXB0aW9ucyBmb3IgZW52aXJvbm1lbnRcIiwgYXJncy5FbnYpO1xuICBjb25zdCBFR01DbGllbnQgPSBhd2FpdCBnZXRDbGllbnQoKTtcbiAgdGhpcy5sb2coXCJDb25uZWN0ZWQgdG8gQXp1cmUhXCIpO1xuICBjb25zdCBzdWJzY3JpcHRpb25zID0gY3JlYXRlU3Vic2NyaXB0aW9uc0xpc3QoYXJncy5FbnYsIGFyZ3MuQVBJS2V5KTtcbiAgLyogdGhpcy5sb2coXG4gICAgXCJTdWJzY3JpcHRpb25zIGxpc3RcIixcblxuICAgIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpLm1hcChcbiAgICAgIGtleSA9PiBgJHtrZXl9OiAke3N1YnNjcmlwdGlvbnNba2V5XS5tYXAoc3ViID0+IHN1Yi5uYW1lKS5qb2luKFwiLCBcIil9YFxuICAgIClcbiAgKTsgKi9cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9ucykpIHtcbiAgICBjb25zdCB0b3BpY1N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zW2tleV07XG4gICAgdGhpcy5sb2coXG4gICAgICBgQ3JlYXRpbmcgXCIke2tleX1cIiBzdWJzY3JpcHRpb25zYCxcbiAgICAgIHRvcGljU3Vic2NyaXB0aW9ucy5tYXAoc3ViID0+IHN1Yi5uYW1lKS5qb2luKFwiLCBcIilcbiAgICApO1xuICAgIGF3YWl0IGNyZWF0ZVN1YnNjcmlwdGlvbnMoXG4gICAgICBFR01DbGllbnQsXG4gICAgICB0b3BpY1N1YnNjcmlwdGlvbnMsXG4gICAgICBhcmdzLm9wdGlvbnMuZGVidWdcbiAgICApO1xuICB9XG4gIC8qIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1hd2FpdC1pbi1sb29wICovXG59XG5leHBvcnQgeyBjcmVhdGVTdWJzIH07XG4iLCJpbXBvcnQgeyBnZW5lcmF0ZUVudlZhcnNMaXN0LCBzZXRTZWNyZXRFbnZWYXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW52TGlzdChhcmdzKSB7XG4gIHRoaXMubG9nKFwiY3JlYXRlRW52TGlzdFwiLCBhcmdzKTtcbiAgZ2VuZXJhdGVFbnZWYXJzTGlzdCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVFbnZWYXJzKGFyZ3MpIHtcbiAgdGhpcy5sb2coXCJ1cGRhdGVFbnZWYXJzXCIsIGFyZ3MpO1xuICBhd2FpdCBzZXRTZWNyZXRFbnZWYXJzKGFyZ3MuRW52KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRW52TGlzdCwgdXBkYXRlRW52VmFycyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGF6dXJlL2FybS1ldmVudGdyaWRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGF6dXJlL21zLXJlc3Qtbm9kZWF1dGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWRhbC1ub2RlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF6dXJlLWtleXZhdWx0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRvdGVudi1zYWZlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV1aWRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidmVycm9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInZvcnBhbFwiKTsiXSwic291cmNlUm9vdCI6IiJ9