require("source-map-support").install(),module.exports=function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.js")}({"./src/index.js":function(e,t,r){"use strict";r.r(t);var a=r("vorpal"),o=r.n(a),n=r("uuid"),s=r("verror"),i=r.n(s),c=r("azure-keyvault"),p=r.n(c),E=r("adal-node");var l=function(e,t){try{const r=(r,a)=>new E.AuthenticationContext(r.authorization).acquireTokenWithClientCredentials(r.resource,e,t,(e,t)=>{if(e)throw e;return a(null,`${t.tokenType} ${t.accessToken}`)});return new p.a.KeyVaultClient(new p.a.KeyVaultCredentials(r))}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};var _=async function({uri:e,clientId:t,appSecret:r,keyName:a}){try{const o=l(t,r),n={keySize:4096,keyOps:["encrypt","decrypt"]},s=await o.createKey(e,a,"RSA",n);return p.a.parseKeyIdentifier(s.key.kid)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to create new key")}};var d=async function({uri:e,clientId:t,appSecret:r,value:a,keyName:o,keyVersion:n=""}){try{const s=l(t,r),c=await s.encrypt(e,o,n,"RSA-OAEP",Buffer.from(a));return JSON.stringify(c.result)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to encrypt value")}};var P=async function({uri:e,clientId:t,appSecret:r,secretValue:a,secretName:o}){try{const n=l(t,r),s=await n.setSecret(e,o,a);return p.a.parseSecretIdentifier(s.id)}catch(e){throw new i.a({name:"KeyVaultError",cause:e},"Failed to set secret")}},S=r("dotenv-safe"),u=r.n(S);u.a.config();const{KEY_VAULT_URL:A,KEY_VAULT_WRITE_CLIENT_ID:y,KEY_VAULT_WRITE_APP_SECRET:T}=process.env;async function I(e,t,r){await _({uri:A,clientId:y,appSecret:T,keyName:e});const a=await d({uri:A,clientId:y,appSecret:T,value:r,keyName:e});return(await P({uri:A,clientId:y,appSecret:T,secretValue:a,secretName:t})).version}var m=r("@azure/ms-rest-nodeauth"),C=r("@azure/arm-eventgrid");const N="eventslogger",v={type:"object",description:"Error object if something goes wrong.",optional:!0,props:{name:{description:"Error name.",type:"string",empty:!1},message:{description:"Error message.",type:"string",empty:!1},info:{description:"Error details.",type:"object",optional:!0}}},k={debug:{description:"Debug mode.",type:"boolean",optional:!0},proxy:{description:"Proxy endpoint.",type:"string",optional:!0,empty:!1},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},K={debug:{description:"Debug mode.",type:"boolean",optional:!0},strategyParameters:{description:"Strategy parameters.",type:"object",optional:!0},requiredHistoryCache:{description:"Load history data from cache.",type:"boolean",optional:!0,default:!0},requiredHistoryMaxBars:{description:"Load history data from cache.",type:"int",integer:!0,optional:!0}},O={encryptionKeyName:{description:"Name of encryption key",type:"string"},name:{description:"Secret name",type:"string"},version:{description:"Secret version",type:"string"}},b={mode:{description:"Service run mode.",type:"tradeMode",values:["emulator","realtime"],requiredProps:{realtime:["keys.main.APIKey","keys.main.APISecret"]},optional:!0},debug:{description:"Debug mode.",type:"boolean",optional:!0},slippageStep:{description:"Price Slippage Step.",type:"number",optional:!0},deviation:{description:"Price deviation",type:"number",optional:!0},volume:{description:"User trade volume",type:"number",optional:!0},multiPosition:{description:"Multiple active positions available",type:"boolean",optional:!0},exchangeParams:{description:"User specific exchange parameters",type:"object",optional:!0},keys:{description:"Exchange API Keys Info",type:"object",props:{main:{description:"Main Exchange API Keys Info",type:"object",props:{APIKey:{description:"Main Exchange API Key",type:"object",props:O},APISecret:{description:"Main Exchange API Secret",type:"object",props:O}}},spare:{description:"Spare Exchange API Keys Info",type:"object",props:{APIKey:{description:"Spare Exchange API Key",type:"object",props:O},APISecret:{description:"Spare Exchange API Secret",type:"object",props:O}},optional:!0}},optional:!0}},g="CPZ.Tasks.Adviser.Start",f="CPZ.Tasks.Adviser.Stop",R="CPZ.Tasks.Adviser.Update",G="CPZ.Tasks.Adviser.Started",h="CPZ.Tasks.Adviser.Stopped",Z="CPZ.Tasks.Adviser.Updated",D="CPZ.Candles.NewCandle";const w="CPZ.Tasks.Backtester.Start",L="CPZ.Tasks.Backtester.Stop",U="CPZ.Tasks.Backtester.Started",Y="CPZ.Tasks.Backtester.Stopped",M="CPZ.Tasks.Backtester.Finished";const j="CPZ.Tasks.Candlebatcher.Start",x="CPZ.Tasks.Candlebatcher.Stop",B="CPZ.Tasks.Candlebatcher.Update",$="CPZ.Tasks.Candlebatcher.Started",z="CPZ.Tasks.Candlebatcher.Stopped",V="CPZ.Tasks.Candlebatcher.Updated";const W="CPZ.Tasks.Importer.Start",F="CPZ.Tasks.Importer.Stop",q="CPZ.Tasks.Importer.Started",J="CPZ.Tasks.Importer.Stoppped",H="CPZ.Tasks.Importer.Finished",X="CPZ.Tasks.Marketwatcher.Start",Q="CPZ.Tasks.Marketwatcher.Stop",ee="CPZ.Tasks.Marketwatcher.Subscribe",te="CPZ.Tasks.Marketwatcher.Unsubscribe",re="CPZ.Tasks.Marketwatcher.Started",ae="CPZ.Tasks.Marketwatcher.Stopped",oe="CPZ.Tasks.Marketwatcher.Updated",ne="CPZ.Tasks.Trader.Start",se="CPZ.Tasks.Trader.Stop",ie="CPZ.Tasks.Trader.Update",ce="CPZ.Tasks.Trader.Started",pe="CPZ.Tasks.Trader.Stopped",Ee="CPZ.Tasks.Trader.Updated",le="CPZ.Tasks.Exwatcher.Started",_e="CPZ.Tasks.Exwatcher.Stopped";const de="CPZ.Signals.NewSignal",Pe="CPZ.Ticks.NewTick";const Se={...{adviser:[{name:"adviser-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8104,types:[g,f,R]},{name:"adviser-candles",topic:"candles",url:"/api/candleEvents",localPort:8104,types:[D]}]},...{backtester:[{name:"backtester-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8108,types:[w,L]}]},...{candlebatcher:[{name:"candlebatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8103,types:[j,x,B]}]},...{control:[{name:"control-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8107,types:[re,ae,oe,$,z,V,q,J,H,G,h,Z,ce,pe,Ee,U,Y,M,le,_e]}]},...{[N]:[{name:`${N}-tasks`,topic:"tasks",url:"/api/events",types:[g,f,R,G,h,Z,w,L,U,Y,M,j,x,B,$,z,V,W,F,q,J,H,X,Q,ee,te,re,ae,oe,ne,se,ie,ce,pe,Ee,"CPZ.Tasks.Backtest.Started","CPZ.Tasks.Backtest.Stopped","CPZ.Tasks.Backtest.Finished",le,_e,"CPZ.Tasks.UserRobot.Started","CPZ.Tasks.UserRobot.Stopped","CPZ.Tasks.UserRobot.Updated"]},{name:`${N}-candles`,topic:"candles",url:"/api/events",types:[D,"CPZ.Candles.Handled"]},{name:`${N}-signals`,topic:"signals",url:"/api/events",types:[de,"CPZ.Signals.Handled"]},{name:`${N}-ticks`,topic:"ticks",url:"/api/events",types:[Pe,"CPZ.Ticks.Handled"]},{name:`${N}-trades`,topic:"trades",url:"/api/events",types:["CPZ.Trades.Position","CPZ.Trades.Order"]},{name:`${N}-log`,topic:"log",url:"/api/events",types:["CPZ.Adviser.Log","CPZ.Backtester.Log","CPZ.Backtest.Log","CPZ.Candlebatcher.Log","CPZ.Control.Log","CPZ.Exwatcher.Log","CPZ.Importer.Log","CPZ.Marketwatcher.Log","CPZ.Trader.Log","CPZ.UserRobot.Log"]},{name:`${N}-error`,topic:"error",url:"/api/events",types:["CPZ.Adviser.Error","CPZ.Backtester.Error","CPZ.Backtest.Error","CPZ.Candlebatcher.Error","CPZ.Control.Error","CPZ.Exwatcher.Error","CPZ.Importer.Error","CPZ.Marketwatcher.Error","CPZ.Trader.Error","CPZ.UserRobot.Error"]}]},...{importer:[{name:"importer-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8105,types:[W,F]}]},...{marketwatcher:[{name:"marketwatcher-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8102,types:[X,Q,ee,te]}]},...{trader:[{name:"trader-tasks",topic:"tasks",url:"/api/taskEvents",localPort:8106,types:[ne,se,ie]},{name:"trader-candles",topic:"candles",url:"/api/candleEvents",localPort:8106,types:[D]},{name:"trader-ticks",topic:"ticks",url:"/api/tickEvents",localPort:8106,types:[Pe]},{name:"trader-signals",topic:"signals",url:"/api/signalEvents",localPort:8106,types:[de]}]}},ue=["tasks","candles","ticks","signals","trades","log","error"];u.a.config(),function(e){if(!e||!Array.isArray(e)||0===e.length)return;const t=e.filter(e=>!process.env[e]);if(t.length>0)throw new Error(`Environment variables: ${t.join(", ")} required!`)}(["MANAGE_APP_ID","MANAGE_APP_KEY","AD_DIRECTORY_ID","SUBSRIPTION_ID","RESOURSE_GROUP","STORAGE"]);const{MANAGE_APP_ID:Ae,MANAGE_APP_KEY:ye,AD_DIRECTORY_ID:Te,SUBSRIPTION_ID:Ie,RESOURSE_GROUP:me,STORAGE:Ce}=process.env;async function Ne(e,{topic:t,topicName:r,serviceName:a,subName:o,endpointUrl:n,eventTypes:s}){const i=`/subscriptions/${Ie}/resourceGroups/${me}/providers/Microsoft.EventGrid/topics/${r}`,c={deadLetterDestination:{endpointType:"StorageBlob",blobContainerName:`eg-${t}-dead`,resourceId:`/subscriptions/${Ie}/resourceGroups/${me}/providers/microsoft.Storage/storageAccounts/${Ce}`},destination:{endpointType:"WebHook",endpointUrl:n},filter:{includedEventTypes:a===N?null:s},retryPolicy:{eventTimeToLiveInMinutes:60,maxDeliveryAttempts:10},eventDeliverySchema:"EventGridSchema"};return await e.eventSubscriptions.createOrUpdate(i,o,c)}const ve=(e,t,r,a)=>`https://cpz-${e}-${t}.azurewebsites.net${r}?api-key=${a}`,ke=(e,t)=>`cpz-${e}-${t}`;async function Ke(e,t){try{for(const r of t){console.log(`Creating ${r.topicName} - ${r.name} sub to ${r.url}`);try{await Ne(e,{topic:r.topic,topicName:r.topicName,serviceName:r.serviceName,subName:r.name,endpointUrl:r.url,eventTypes:r.types}),console.log(r.name,"ok")}catch(e){console.log(e)}}}catch(e){console.error(e)}}var Oe={adviser:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_TRADE_CS","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","DEBUG"]},backtester:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","DEBUG"]},candlebatcher:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_CANDLES_ENDPOINT","EG_CANDLES_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]},connector:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","API_KEY","PROXY_ENDPOINT","KEY_VAULT_URL","KEY_VAULT_READ_CLIENT_ID","KEY_VAULT_READ_APP_SECRET","KEY_VAULT_DECR_CLIENT_ID","KEY_VAULT_DECR_APP_SECRET"]},control:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_CONTROL_CS","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","AZ_STORAGE_BACKTESTER_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY"]},eventslogger:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_EVENT_CS","AZ_STORAGE_MARKET_CS","EG_EMULATOR_MODE","LOG_TABLE_STORAGE","LOG_POSTGRE","DB_API_ENDPOINT","DB_API_ACCESS_KEY","API_KEY"]},importer:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","DB_API_ENDPOINT","DB_API_ACCESS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY","DEBUG"]},marketwatcher:{variables:["AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","API_KEY","PROXY_ENDPOINT","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TICKS_ENDPOINT","EG_TICKS_KEY","DEBUG"]},trader:{variables:["FUNCTIONS_WORKER_RUNTIME","AzureWebJobsStorage","AZ_STORAGE_MARKET_CS","AZ_STORAGE_TRADE_CS","API_KEY","EG_TASKS_ENDPOINT","EG_TASKS_KEY","EG_LOG_ENDPOINT","EG_LOG_KEY","EG_TRADES_ENDPOINT","EG_TRADES_KEY","EG_SIGNALS_ENDPOINT","EG_SIGNALS_KEY","CONNECTOR_API_ENDPOINT","CONNECTOR_API_KEY"]}},be=r("fs"),ge=r.n(be);u.a.config();const{KEY_VAULT_URL:fe,KEY_VAULT_WRITE_CLIENT_ID:Re,KEY_VAULT_WRITE_APP_SECRET:Ge}=process.env;function he(){try{const e=JSON.parse(ge.a.readFileSync("envlist.json"));return console.log("Found envlist.json"),e}catch(e){return console.log("No current env list file"),{}}}const Ze=new o.a;Ze.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(async function(e){this.log(e);const{APIKey:t,APISecret:r}=e,{user:a,spare:o,APIKeyEncrKeyName:s,APISecretEncrKeyName:i,APIKeySecretName:c,APISecretSecretName:p}=e.options,E={APIKey:{},APISecret:{}};a&&(E.APIKey.encryptionKeyName=a.toString(),E.APISecret.encryptionKeyName=a.toString(),E.APIKey.name=a.toString(),E.APISecret.name=a.toString()),E.APIKey.encryptionKeyName=s||E.APIKey.encryptionKeyName||Object(n.v4)(),E.APISecret.encryptionKeyName=i||E.APISecret.encryptionKeyName||Object(n.v4)(),E.APIKey.name=c||E.APIKey.name||Object(n.v4)(),E.APISecret.name=p||E.APISecret.name||Object(n.v4)(),E.APIKey.version=await I(E.APIKey.encryptionKeyName,E.APIKey.name,t),E.APISecret.version=await I(E.APISecret.encryptionKeyName,E.APISecret.name,r);const l={};o?l.spare=E:l.main=E,this.log(JSON.stringify(l))}),Ze.command("eg create subs <Env> <APIKey>").action(async function(e){this.log("createSubs",e),this.log("Creating Event Grid subscriptions for environment",e.Env);const t=await async function(){const e=await m.loginWithServicePrincipalSecret(Ae,ye,Te);return new C.EventGridManagementClient(e,Ie)}();this.log("Connected to Azure!");const r=function(e,t){let r=[];Object.keys(Se).forEach(a=>{r=[...new Set([...Se[a].map(r=>({...r,topicName:ke(r.topic,e),url:ve(a,e,r.url,t),serviceName:a})),...r])]});const a={};return ue.forEach(e=>{a[e]=r.filter(t=>t.topic===e)}),a}(e.Env,e.APIKey);for(const e of Object.keys(r)){const a=r[e];this.log(`Creating "${e}" subscriptions`,a.map(e=>e.name).join(", ")),await Ke(t,a)}}),Ze.command("env create list").action(async function(e){this.log("createEnvList",e),function(){let e=he();e||(e={}),Object.keys(Oe).forEach(t=>{e[t]||(e[t]={}),Oe[t].variables.forEach(r=>{e[t][r]||(e[t][r]="")}),Object.keys(e[t]).filter(e=>!Oe[t].variables.includes(e)).forEach(r=>{delete e[t][r]})}),ge.a.writeFileSync("envlist.json",JSON.stringify(e))}()}),Ze.command("env update <Env>").action(async function(e){this.log("updateEnvVars",e),await async function(e){const t=he();if(!t)return void console.log("Create envlist.json first","env create list");const r={...t};await Promise.all(Object.keys(t).map(async a=>{await Promise.all(Object.keys(t[a]).map(async o=>{const n=`${a}-${o}-${e}`.replace(/_/g,"-");console.log(n),console.log(t[a][o]),await P({uri:fe,clientId:Re,appSecret:Ge,secretValue:t[a][o],secretName:n}),r[a][o]=n}))})),ge.a.writeFileSync("envsetresult.json",JSON.stringify(r))}(e.Env)}),Ze.delimiter("cpz$").show()},"@azure/arm-eventgrid":function(e,t){e.exports=require("@azure/arm-eventgrid")},"@azure/ms-rest-nodeauth":function(e,t){e.exports=require("@azure/ms-rest-nodeauth")},"adal-node":function(e,t){e.exports=require("adal-node")},"azure-keyvault":function(e,t){e.exports=require("azure-keyvault")},"dotenv-safe":function(e,t){e.exports=require("dotenv-safe")},fs:function(e,t){e.exports=require("fs")},uuid:function(e,t){e.exports=require("uuid")},verror:function(e,t){e.exports=require("verror")},vorpal:function(e,t){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,