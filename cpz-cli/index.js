require("source-map-support").install(),module.exports=function(e){var r={};function t(n){if(r[n])return r[n].exports;var a=r[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var a in e)t.d(n,a,function(r){return e[r]}.bind(null,a));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s="./src/index.js")}({"./src/index.js":function(e,r,t){"use strict";t.r(r);t("babel-polyfill");var n=t("vorpal"),a=t.n(n),o=t("@babel/runtime/regenerator"),c=t.n(o),i=t("@babel/runtime/helpers/asyncToGenerator"),u=t.n(i),s=t("uuid"),p=t("verror"),y=t.n(p),l=t("azure-keyvault"),f=t.n(l),v=t("adal-node");var m=function(e,r){try{return new f.a.KeyVaultClient(new f.a.KeyVaultCredentials(function(t,n){return new v.AuthenticationContext(t.authorization).acquireTokenWithClientCredentials(t.resource,e,r,function(e,r){if(e)throw e;return n(null,"".concat(r.tokenType," ").concat(r.accessToken))})}))}catch(e){throw new y.a({name:"KeyVaultError",cause:e},"Failed to create KeyVault client")}};function d(e,r,t,n,a,o,c){try{var i=e[o](c),u=i.value}catch(e){return void t(e)}i.done?r(u):Promise.resolve(u).then(n,a)}function I(){var e;return e=regeneratorRuntime.mark(function e(r){var t,n,a,o,c,i,u,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.uri,n=r.clientId,a=r.appSecret,o=r.keyName,e.prev=1,c=m(n,a),i={keySize:4096,keyOps:["encrypt","decrypt"]},e.next=7,c.createKey(t,o,"RSA",i);case 7:return u=e.sent,s=f.a.parseKeyIdentifier(u.key.kid),e.abrupt("return",s);case 12:throw e.prev=12,e.t0=e.catch(1),new y.a({name:"KeyVaultError",cause:e.t0},"Failed to create new key");case 15:case"end":return e.stop()}},e,this,[[1,12]])}),(I=function(){var r=this,t=arguments;return new Promise(function(n,a){var o=e.apply(r,t);function c(e){d(o,n,a,c,i,"next",e)}function i(e){d(o,n,a,c,i,"throw",e)}c(void 0)})}).apply(this,arguments)}var P=function(e){return I.apply(this,arguments)};function h(e,r,t,n,a,o,c){try{var i=e[o](c),u=i.value}catch(e){return void t(e)}i.done?r(u):Promise.resolve(u).then(n,a)}function S(){var e;return e=regeneratorRuntime.mark(function e(r){var t,n,a,o,c,i,u,s,p;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.uri,n=r.clientId,a=r.appSecret,o=r.value,c=r.keyName,i=r.keyVersion,u=void 0===i?"":i,e.prev=1,s=m(n,a),e.next=5,s.encrypt(t,c,u,"RSA-OAEP",Buffer.from(o));case 5:return p=e.sent,e.abrupt("return",JSON.stringify(p.result));case 9:throw e.prev=9,e.t0=e.catch(1),new y.a({name:"KeyVaultError",cause:e.t0},"Failed to encrypt value");case 12:case"end":return e.stop()}},e,this,[[1,9]])}),(S=function(){var r=this,t=arguments;return new Promise(function(n,a){var o=e.apply(r,t);function c(e){h(o,n,a,c,i,"next",e)}function i(e){h(o,n,a,c,i,"throw",e)}c(void 0)})}).apply(this,arguments)}var A=function(e){return S.apply(this,arguments)};function K(e,r,t,n,a,o,c){try{var i=e[o](c),u=i.value}catch(e){return void t(e)}i.done?r(u):Promise.resolve(u).then(n,a)}function b(){var e;return e=regeneratorRuntime.mark(function e(r){var t,n,a,o,c,i,u,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.uri,n=r.clientId,a=r.appSecret,o=r.secretValue,c=r.secretName,e.prev=1,i=m(n,a),e.next=5,i.setSecret(t,c,o);case 5:return u=e.sent,s=f.a.parseSecretIdentifier(u.id),e.abrupt("return",s);case 10:throw e.prev=10,e.t0=e.catch(1),new y.a({name:"KeyVaultError",cause:e.t0},"Failed to set secret");case 13:case"end":return e.stop()}},e,this,[[1,10]])}),(b=function(){var r=this,t=arguments;return new Promise(function(n,a){var o=e.apply(r,t);function c(e){K(o,n,a,c,i,"next",e)}function i(e){K(o,n,a,c,i,"throw",e)}c(void 0)})}).apply(this,arguments)}var x=function(e){return b.apply(this,arguments)},w=t("dotenv-safe");t.n(w).a.config();var N=process.env,k=N.KEY_VAULT_URL,g=N.KEY_VAULT_WRITE_CLIENT_ID,E=N.KEY_VAULT_WRITE_APP_SECRET;function _(e,r,t){return O.apply(this,arguments)}function O(){return(O=u()(c.a.mark(function e(r,t,n){var a,o;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,P({uri:k,clientId:g,appSecret:E,keyName:r});case 2:return e.next=4,A({uri:k,clientId:g,appSecret:E,value:n,keyName:r});case 4:return a=e.sent,e.next=7,x({uri:k,clientId:g,appSecret:E,secretValue:a,secretName:t});case 7:return o=e.sent,e.abrupt("return",o.version);case 9:case"end":return e.stop()}},e,this)}))).apply(this,arguments)}function T(){return(T=u()(c.a.mark(function e(r){var t,n,a,o,i,u,p,y,l,f,v;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this.log(r),t=r.APIKey,n=r.APISecret,a=r.options,o=a.user,i=a.spare,u=a.APIKeyEncrKeyName,p=a.APISecretEncrKeyName,y=a.APIKeySecretName,l=a.APISecretSecretName,f={APIKey:{},APISecret:{}},o&&(f.APIKey.encryptionKeyName=o.toString(),f.APISecret.encryptionKeyName=o.toString(),f.APIKey.name=o.toString(),f.APISecret.name=o.toString()),f.APIKey.encryptionKeyName=u||f.APIKey.encryptionKeyName||Object(s.v4)(),f.APISecret.encryptionKeyName=p||f.APISecret.encryptionKeyName||Object(s.v4)(),f.APIKey.name=y||f.APIKey.name||Object(s.v4)(),f.APISecret.name=l||f.APISecret.name||Object(s.v4)(),e.next=11,_(f.APIKey.encryptionKeyName,f.APIKey.name,t);case 11:return f.APIKey.version=e.sent,e.next=14,_(f.APISecret.encryptionKeyName,f.APISecret.name,n);case 14:f.APISecret.version=e.sent,v={},i?v.spare=f:v.main=f,this.log(JSON.stringify(v));case 18:case"end":return e.stop()}},e,this)}))).apply(this,arguments)}var V=new a.a;V.command("kv save api-keys <APIKey> <APISecret>","Encrypt and save Exchange API Keys to Key Vault.").option("-u, --user <userId>","Use userId as name").option("-s, --spare","Save spare keys.").option("--APIKeyEncrKeyName <APIKeyEncrKeyName>","Encryption key name for API Key.").option("--APISecretEncrKeyName <APISecretEncrKeyName>","Encryption key name for API Secret.").option("--APIKeySecretName <APIKeySecretName>","Name of secret for API Key.").option("--APISecretSecretName <APISecretSecretName>","Name of secret for API Secret.").action(function(e){return T.apply(this,arguments)}),V.delimiter("cpz$").show()},"@babel/runtime/helpers/asyncToGenerator":function(e,r){e.exports=require("@babel/runtime/helpers/asyncToGenerator")},"@babel/runtime/regenerator":function(e,r){e.exports=require("@babel/runtime/regenerator")},"adal-node":function(e,r){e.exports=require("adal-node")},"azure-keyvault":function(e,r){e.exports=require("azure-keyvault")},"babel-polyfill":function(e,r){e.exports=require("babel-polyfill")},"dotenv-safe":function(e,r){e.exports=require("dotenv-safe")},uuid:function(e,r){e.exports=require("uuid")},verror:function(e,r){e.exports=require("verror")},vorpal:function(e,r){e.exports=require("vorpal")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,